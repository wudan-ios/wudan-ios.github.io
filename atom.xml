<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一个孤独的搬码猿</title>
  
  <subtitle>虽然代码虐我千百遍，我对代码如初恋。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wudan-ios.github.io/"/>
  <updated>2019-03-21T01:53:30.043Z</updated>
  <id>https://wudan-ios.github.io/</id>
  
  <author>
    <name>wudan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS-3D Touch</title>
    <link href="https://wudan-ios.github.io/2019/03/21/iOS-3D%20Touch/"/>
    <id>https://wudan-ios.github.io/2019/03/21/iOS-3D Touch/</id>
    <published>2019-03-21T01:51:49.822Z</published>
    <updated>2019-03-21T01:53:30.043Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-f28947056b8dfe49.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用"></p><h3 id="桌面图标点击"><a href="#桌面图标点击" class="headerlink" title="桌面图标点击"></a>桌面图标点击</h3><p>需要在<code>AppDelegate</code>里面进行代码编写。<br>1、创建方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/** type  唯一标示r符</span><br><span class="line">    *  localizedTitle 标题</span><br><span class="line">    *  localizedSubtitle 副标题</span><br><span class="line">    *  icon UIApplicationShortcutIcon对象</span><br><span class="line">    *  userInfo 传递信息</span><br><span class="line">    */</span><br><span class="line">    </span><br><span class="line">   // 使用系统提供的图标生成UIApplicationShortcutIcon对象</span><br><span class="line">   UIApplicationShortcutItem *shoreItem1 = [[UIApplicationShortcutItem alloc] initWithType:@&quot;type1&quot;</span><br><span class="line">                                                                            localizedTitle:@&quot;标题&quot;</span><br><span class="line">                                                                         localizedSubtitle:@&quot;副标题&quot;</span><br><span class="line">                                                                                      icon:[UIApplicationShortcutIcon iconWithType:UIApplicationShortcutIconTypeCompose]</span><br><span class="line">                                                                                  userInfo:nil];</span><br><span class="line">   </span><br><span class="line">   // 使用自定义图片生成UIApplicationShortcutIcon对象</span><br><span class="line">   UIApplicationShortcutItem *shoreItem2 = [[UIApplicationShortcutItem alloc] initWithType:@&quot;type2&quot;</span><br><span class="line">                                                                            localizedTitle:@&quot;标题2&quot;</span><br><span class="line">                                                                         localizedSubtitle:@&quot;副标题2&quot;</span><br><span class="line">                                                                                      icon:[UIApplicationShortcutIcon iconWithTemplateImageName:@&quot;验证码&quot;]</span><br><span class="line">                                                                                  userInfo:nil];</span><br><span class="line">   [UIApplication sharedApplication].shortcutItems = @[shoreItem1, shoreItem2];</span><br></pre></td></tr></table></figure></p><blockquote><p>注：系统的UIApplicationShortcutIcon样式，自己去研究吧！<a href="https://developer.apple.com/documentation/uikit/uiapplicationshortcuticontype?language=objc" target="_blank" rel="noopener">点击这个是官方地址</a></p></blockquote><p>2、点击回调，可以根据<code>shortcutItem.type</code> 进行判断点击的是哪个item<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (void)application:(UIApplication *)application performActionForShortcutItem:(UIApplicationShortcutItem *)shortcutItem completionHandler:(void (^)(BOOL))completionHandler &#123;</span><br><span class="line">    NSLog(@&quot;点击了%@&quot;, shortcutItem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="应用内，点击进行页面操作"><a href="#应用内，点击进行页面操作" class="headerlink" title="应用内，点击进行页面操作"></a>应用内，点击进行页面操作</h3><p>1、遵循代理<code>UIViewControllerPreviewingDelegate</code></p><p>2、判断设备是否支持<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (self.traitCollection.forceTouchCapability == UIForceTouchCapabilityAvailable)&#123;</span><br><span class="line">    [self registerForPreviewingWithDelegate:self sourceView:self.view];</span><br><span class="line">    NSLog(@&quot;3D Touch  可用!&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    NSLog(@&quot;3D Touch  不可用!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、实现代理方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (nullable UIViewController *)previewingContext:(id &lt;UIViewControllerPreviewing&gt;)previewingContext viewControllerForLocation:(CGPoint)location &#123;</span><br><span class="line">    NextViewController *vc = [[NextViewController alloc] init];</span><br><span class="line">    return vc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)previewingContext:(id&lt;UIViewControllerPreviewing&gt;)previewingContext commitViewController:(UIViewController *)viewControllerToCommit &#123;</span><br><span class="line">    [self showViewController:viewControllerToCommit sender:self];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4、在需要显示的页面里面调用<code>- (NSArray&lt;id&lt;UIPreviewActionItem&gt;&gt; *)previewActionItems</code>添加Items<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (NSArray&lt;id&lt;UIPreviewActionItem&gt;&gt; *)previewActionItems &#123;</span><br><span class="line">    UIPreviewAction *action1 = [UIPreviewAction actionWithTitle:@&quot;标题1&quot; style:UIPreviewActionStyleDefault handler:^(UIPreviewAction * _Nonnull action, UIViewController * _Nonnull previewViewController) &#123;</span><br><span class="line">        NSLog(@&quot;click---标题1&quot;);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    UIPreviewAction *action2 = [UIPreviewAction actionWithTitle:@&quot;标题2&quot; style:UIPreviewActionStyleSelected handler:^(UIPreviewAction * _Nonnull action, UIViewController * _Nonnull previewViewController) &#123;</span><br><span class="line">        NSLog(@&quot;click---标题2&quot;);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    UIPreviewAction *action3 = [UIPreviewAction actionWithTitle:@&quot;标题3&quot; style:UIPreviewActionStyleDestructive handler:^(UIPreviewAction * _Nonnull action, UIViewController * _Nonnull previewViewController) &#123;</span><br><span class="line">        NSLog(@&quot;click---标题3&quot;);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    NSArray *actions = @[action1,action2,action3];</span><br><span class="line">    return actions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/3334769-f28947056b8dfe49.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Runtime-消息转发</title>
    <link href="https://wudan-ios.github.io/2019/03/19/Runtime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91/"/>
    <id>https://wudan-ios.github.io/2019/03/19/Runtime-消息转发/</id>
    <published>2019-03-19T05:15:50.881Z</published>
    <updated>2019-03-19T05:15:51.093Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://poldw0h4y.bkt.clouddn.com/%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="消息转发流程图"></p><p>iOS 方法的动态解析和消息转发</p><p>以创建的Message类为示例<br>Message.h<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@interface Message : NSObject</span><br><span class="line"></span><br><span class="line">- (void)sendMessage:(NSString *)message;</span><br><span class="line"></span><br><span class="line">+ (void)sendClassMessage:(NSString *)message;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>Message.m<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@implementation Message</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><h3 id="动态方法解析"><a href="#动态方法解析" class="headerlink" title="动态方法解析"></a>动态方法解析</h3><p>征询接收者所属的类，是否需要动态添加类方法或实例方法，来处理这个未找到的方法。</p><ol><li>首先判断是否实现了 <code>resolveInstanceMethod</code>，如果没有实现，进入下一步处理；</li><li>如果实现了，调用 <code>resolveInstanceMethod</code>，获取返回值；</li><li>如果返回值为 YES，表示 <code>resolveInstanceMethod</code> 声称它已经提供了 <code>selector</code> 的实现，因此再次查找 method list，如果找到对应的 <code>IMP</code>，则返回该实现，否则提示警告信息，进入下一步处理；</li><li>如果返回值为 NO，进入下一步处理；<h4 id="1-对象方法"><a href="#1-对象方法" class="headerlink" title="1. 对象方法"></a>1. 对象方法</h4>通过<code>+ (BOOL)resolveInstanceMethod:(SEL)sel;</code>方法进行解析<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    if (sel == @selector(sendMessage:)) &#123;</span><br><span class="line">        class_addMethod([self class], sel, (IMP)innerSenderMessageMetod, &quot;v@:@&quot;);</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    return [super resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void innerSenderMessageMetod(id obj, SEL _cmd) &#123;</span><br><span class="line">    NSLog(@&quot;对象方法，动态解析&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-类方法"><a href="#2-类方法" class="headerlink" title="2. 类方法"></a>2. 类方法</h4><p>通过<code>+ (BOOL)resolveClassMethod:(SEL)sel;</code>方法进行解析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)resolveClassMethod:(SEL)sel &#123;</span><br><span class="line">    if (sel == @selector(sendClassMessage:)) &#123;</span><br><span class="line">        class_addMethod(object_getClass(self), sel, (IMP)innerSenderClassMessageMetod, &quot;v@:@&quot;);</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    return [super resolveClassMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void innerSenderClassMessageMetod(id obj, SEL _cmd) &#123;</span><br><span class="line">    NSLog(@&quot;类方法，动态解析&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>如果没有动态添加方法，则会进入此阶段，此时询问是否要将这条消息转发给其他的对象，来处理这个方法。如果返回nil，即表示不转发给其他对象，此时会进入第3阶段<br>创建了一个备用类<code>MessageTemp</code><br>MessageTemp.h<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@interface MessageTemp : NSObject</span><br><span class="line"></span><br><span class="line">- (void)sendMessage:(NSString *)message;</span><br><span class="line">- (void)sendClassMessage:(NSString *)message;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>MessageTemp.m<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@implementation MessageTemp</span><br><span class="line">- (void)sendMessage:(NSString *)message &#123;</span><br><span class="line">    NSLog(@&quot;备用Message，解析对象方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line">- (void)sendClassMessage:(NSString *)message &#123;</span><br><span class="line">    NSLog(@&quot;备用Message，解析类方法&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><h4 id="1-对象方法-1"><a href="#1-对象方法-1" class="headerlink" title="1. 对象方法"></a>1. 对象方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    if (aSelector == @selector(sendMessage:)) &#123;</span><br><span class="line">        return [MessageTemp new];</span><br><span class="line">    &#125;</span><br><span class="line">    return [super forwardingTargetForSelector:aSelector];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-类方法-1"><a href="#2-类方法-1" class="headerlink" title="2. 类方法"></a>2. 类方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ (id)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    if (aSelector == @selector(sendClassMessage:)) &#123;</span><br><span class="line">        return [MessageTemp new];</span><br><span class="line">    &#125;</span><br><span class="line">    return [super forwardingTargetForSelector:aSelector];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h3><p>当 <code>forwardingTargetForSelector:</code> 方法未做出任何响应的话，会来到消息转发流程。消息转发时会首先调用 <code>methodSignatureForSelector:</code> 方法，在方法内部生成 <code>NSMethodSignature</code> 类型的方法签名对象。在生成签名对象时，可以指定 <code>target</code> 和 <code>SEL</code>，可以将这两个参数换成其他参数，将消息转发给其他对象。</p><h4 id="1-对象方法-2"><a href="#1-对象方法-2" class="headerlink" title="1. 对象方法"></a>1. 对象方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation &#123;</span><br><span class="line">    if ([anInvocation selector] == @selector(sendMessage:)) &#123;</span><br><span class="line">        [anInvocation invokeWithTarget:[MessageTemp new]];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [super forwardInvocation:anInvocation];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    if (aSelector == @selector(sendMessage:)) &#123;</span><br><span class="line">        return [NSMethodSignature signatureWithObjCTypes:&quot;v@:@&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">    return [super methodSignatureForSelector:aSelector];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-类方法-2"><a href="#2-类方法-2" class="headerlink" title="2. 类方法"></a>2. 类方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+ (void)forwardInvocation:(NSInvocation *)anInvocation &#123;</span><br><span class="line">    if ([anInvocation selector] == @selector(sendClassMessage:)) &#123;</span><br><span class="line">        [anInvocation invokeWithTarget:[MessageTemp new]];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [super forwardInvocation:anInvocation];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    if (aSelector == @selector(sendClassMessage:)) &#123;</span><br><span class="line">        return [NSMethodSignature signatureWithObjCTypes:&quot;v@:@&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">    return [super methodSignatureForSelector:aSelector];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>适用于把操作给另外一个类来实现</li><li>利用分类，防止应用程序因为未处理消息而崩溃</li><li>Jspatch </li><li>Aspects</li><li>BlocksKit</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://poldw0h4y.bkt.clouddn.com/%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg&quot; alt=&quot;消息转发流程图&quot;&gt;&lt;/p&gt;
&lt;p&gt;iOS
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS代码块(Snippet)</title>
    <link href="https://wudan-ios.github.io/2019/03/13/%E4%BB%A3%E7%A0%81%E5%9D%97(Snippet)/"/>
    <id>https://wudan-ios.github.io/2019/03/13/代码块(Snippet)/</id>
    <published>2019-03-13T03:03:18.597Z</published>
    <updated>2019-03-13T03:03:18.811Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-b07622a36a646add.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用"></p><p>代码块(Snippet)，方便了代码快速创建。</p><h4 id="管理：在新版Xcode中管理页面在编译器的右上角"><a href="#管理：在新版Xcode中管理页面在编译器的右上角" class="headerlink" title="管理：在新版Xcode中管理页面在编译器的右上角"></a>管理：在新版Xcode中管理页面在编译器的右上角</h4><p><img src="https://upload-images.jianshu.io/upload_images/3334769-80379a923c19ef74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码块管理"></p><h4 id="添加：选中代码鼠标右击"><a href="#添加：选中代码鼠标右击" class="headerlink" title="添加：选中代码鼠标右击"></a>添加：选中代码鼠标右击</h4><p><img src="https://upload-images.jianshu.io/upload_images/3334769-52aa3439524de38c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加"></p><h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><p><img src="https://upload-images.jianshu.io/upload_images/3334769-df39d293cbb6e8b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编辑"></p><ol><li>Title：标题。 </li><li>Summary：描述文字。 </li><li>Platform：可以使用的平台（如iOS、Mac OS）。 </li><li>Language：可以在哪些语言中使用（如 Objective-C、Swift）。 </li><li>Completion Shortcut：快捷方式，以字母开头（支持少数符号，如@）。 </li><li>Completion Scopes：作用范围，一般写在正确的位置拖动即可，Xcode会自行选择好。<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, strong) &lt;#ClassName#&gt; *&lt;#class#&gt;; ///&lt; &lt;#注释#&gt;</span><br><span class="line">@property (nonatomic, assign) &lt;#DataType#&gt; &lt;#name#&gt;; ///&lt; &lt;#注释#&gt;</span><br><span class="line">@property (nonatomic, copy) &lt;#ClassName#&gt; *&lt;#name#&gt;; ///&lt; &lt;#注释#&gt;</span><br><span class="line">@property (nonatomic, weak) id&lt;&lt;#delegateOrDataSouce#&gt;&gt; &lt;#delegateOrDataSouce#&gt;; ///&lt; &lt;#注释#&gt;</span><br><span class="line">@property (nonatomic, weak) &lt;#Class#&gt; *&lt;#name#&gt;; ///&lt; &lt;#注释#&gt;</span><br></pre></td></tr></table></figure></li></ol><h4 id="常用注释"><a href="#常用注释" class="headerlink" title="常用注释"></a>常用注释</h4><ol><li><p>顶部注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/** &lt;#属性注释#&gt; */</span><br></pre></td></tr></table></figure></li><li><p>右侧注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">///&lt; &lt;#注释#&gt;</span><br></pre></td></tr></table></figure></li><li><p>简述顶部注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/** &lt;#简要描述#&gt;</span><br><span class="line"> * &lt;#详细描述#&gt;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li><li><p>Pragma</p></li></ol><ul><li><p>有分割线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark &lt;#mark#&gt;</span><br></pre></td></tr></table></figure></li><li><p>无分割线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - &lt;#mark&gt; 或 // MARK: &lt;#mark#&gt;</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li><p>Warning(警告)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#warning &lt;#message#&gt;</span><br></pre></td></tr></table></figure></li><li><p>???(不确定)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// ???: &lt;#???#&gt;</span><br></pre></td></tr></table></figure></li><li><p>!!!(警告)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// !!!: &lt;#???#&gt;</span><br></pre></td></tr></table></figure></li><li><p>FIXME(需要修改的地方)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// FIXME: &lt;#Fix详情#&gt;</span><br></pre></td></tr></table></figure></li><li><p>常用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 页面控件配置</span><br><span class="line">- (void)setupSubViewsProperties &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 页面控件布局</span><br><span class="line">- (void)setupSubViewsConstraint &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>枚举</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, &lt;#TypeName#&gt;) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">typedef NS_OPTIONS(NSUInteger, &lt;#TypeName#&gt;) &#123;</span><br><span class="line">                </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>IFDEBUG</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#if DEBUG</span><br><span class="line">&lt;#TODO#&gt;</span><br><span class="line">#else</span><br><span class="line">&lt;#TODO#&gt;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></li><li><p>快捷初始化UILabel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UILabel *l = [[UILabel alloc] init];</span><br><span class="line">l.font = [UIFont &lt;#font#&gt;];</span><br><span class="line">l.text = @&quot;&lt;#conent#&gt;&quot;;</span><br><span class="line">l.textColor = [UIColor &lt;#textColor#&gt;];</span><br><span class="line">l.numberOfLines = 0;</span><br><span class="line">[&lt;#view#&gt; addSubview:l];</span><br></pre></td></tr></table></figure></li><li><p>快捷初始化UIButton</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">UIButton *b = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">b.backgroundColor = [UIColor &lt;#backgroundColor#&gt;];</span><br><span class="line">b.titleLabel.font = [UIFont &lt;#font#&gt;];</span><br><span class="line">[b setTitle:&lt;#title#&gt; forState:UIControlStateNormal];</span><br><span class="line">[b setTitleColor:[UIColor &lt;#titleColor#&gt;] forState:UIControlStateNormal];</span><br><span class="line">[b setImage:[UIImage imageNamed:&lt;#(nonnull NSString *)#&gt;] forState:UIControlStateNormal]</span><br><span class="line">[b addTarget:self action:@selector(didTapped&lt;#Button Name#&gt;:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">[&lt;#view#&gt; addSubview:b];</span><br></pre></td></tr></table></figure></li><li><p>UIButton 点击事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/** &lt;#ButtonName#&gt;点击事件 */</span><br><span class="line">- (void)didTapped&lt;#ButtonName#&gt;:(UIButton *)sender &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Notification事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/** &lt;#Notification Name#&gt;通知事件 */</span><br><span class="line">- (void)didReceive&lt;#Notification Name#&gt;:(NSNotification *)notification &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UIGestureRecognizer触摸事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/** &lt;#GestureRecognizer Name#&gt;触摸事件 */</span><br><span class="line">- (void)didRecognized&lt;#GestureRecognizer Name#&gt;:(UIGestureRecognizer *)recognizer &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>这也是为了个人意见，其他还有很多可以做成代码块的，例如CGD，TableViewDataSource等等，希望短短的文章可以让你代码可以写的更好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/3334769-b07622a36a646add.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS工具类-时间差</title>
    <link href="https://wudan-ios.github.io/2019/02/26/iOS%E5%B7%A5%E5%85%B7%E7%B1%BB-%E6%97%B6%E9%97%B4%E5%B7%AE/"/>
    <id>https://wudan-ios.github.io/2019/02/26/iOS工具类-时间差/</id>
    <published>2019-02-26T06:56:01.346Z</published>
    <updated>2019-02-26T07:48:48.016Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-073af85178d8c456.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用"></p><p>最近想写点日常使用的工具类，方便开发。<br>首先想到就是时间之类的问题，所以打开<code>Xocde</code>，进行代码编辑。<br>这个代码考虑不是很完全，日后有时间再进行修改补充。</p><h3 id="接口文件"><a href="#接口文件" class="headerlink" title="接口文件"></a>接口文件</h3><p>我使用的类名称为<code>DateHandleUtils</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">typedef NS_ENUM(NSInteger, WeiBoTimeStyle) &#123;</span><br><span class="line">    WeiBoTimeStyleSecond,</span><br><span class="line">    WeiBoTimeStyleMillisecond</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@interface DateHandleUtils : NSObject</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 根据时间返回文字时间戳</span><br><span class="line"></span><br><span class="line"> @param timeInterval 比较时间</span><br><span class="line"> @param style 时间戳格式</span><br><span class="line"> @return `刚刚`、`10秒前`、`10分钟前`、`1小时前`等等</span><br><span class="line"> */</span><br><span class="line">+ (NSString *)weiboTimeWithPublicTime:(NSTimeInterval)timeInterval timeStyel:(WeiBoTimeStyle)style;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当前时间时间戳</span><br><span class="line"> *</span><br><span class="line"> @return 毫秒的时间戳</span><br><span class="line"> */</span><br><span class="line">+ (NSTimeInterval)currentMilliSecondTimeInterval;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 当前时间时间戳</span><br><span class="line"> *</span><br><span class="line"> @return 秒的时间戳</span><br><span class="line"> */</span><br><span class="line">+ (NSTimeInterval)currentSecondTimeInterval;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据时间戳获取时间差</span><br><span class="line"> *</span><br><span class="line"> @param startTime 开始时间的时间戳</span><br><span class="line"> @param endTime 结束时间的时间戳</span><br><span class="line"> @return 返回差值，单位为秒</span><br><span class="line"> @warning 传值格式为：毫秒级时间戳</span><br><span class="line"> */</span><br><span class="line">+ (NSTimeInterval)timeDifferenceOfMillisecondWithStartTimeInterval:(NSTimeInterval)startTime endTimeInterval:(NSTimeInterval)endTime;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据时间戳获取时间差</span><br><span class="line"> *</span><br><span class="line"> @param startTime 开始时间的时间戳</span><br><span class="line"> @param endTime 结束时间的时间戳</span><br><span class="line"> @return 返回差值，单位为秒</span><br><span class="line"> @warning 传值格式为：秒级时间戳</span><br><span class="line"> */</span><br><span class="line">+ (NSTimeInterval)timeDifferenceOfSecondsWithStartTimeInterval:(NSTimeInterval)startTime endTimeInterval:(NSTimeInterval)endTime;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure></p><h3 id="实现文件"><a href="#实现文件" class="headerlink" title="实现文件"></a>实现文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">@implementation DateHandleUtils</span><br><span class="line"></span><br><span class="line">+ (NSString *)weiboTimeWithPublicTime:(NSTimeInterval)timeInterval timeStyel:(WeiBoTimeStyle)style &#123;</span><br><span class="line">    NSTimeInterval interval;</span><br><span class="line">        switch (style) &#123;</span><br><span class="line">        case WeiBoTimeStyleSecond:</span><br><span class="line">            interval = [DateHandleUtils timeDifferenceOfSecondsWithStartTimeInterval:timeInterval endTimeInterval:[DateHandleUtils currentSecondTimeInterval]];</span><br><span class="line">            break;</span><br><span class="line">        case WeiBoTimeStyleMillisecond:</span><br><span class="line">            interval = [DateHandleUtils timeDifferenceOfMillisecondWithStartTimeInterval:timeInterval endTimeInterval:[DateHandleUtils currentMilliSecondTimeInterval]];</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (interval &lt; 10) &#123;</span><br><span class="line">        return @&quot;刚刚&quot;;</span><br><span class="line">    &#125; else if (interval &lt; 60) &#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%.f秒前&quot;, interval];</span><br><span class="line">    &#125; else if (interval / 60 &lt; 60) &#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%.f分钟前&quot;, interval / 60];</span><br><span class="line">    &#125; else if (interval / 60 / 60 &lt; 24) &#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%.f小时前&quot;, interval / 60 / 60 - 1];</span><br><span class="line">    &#125; else if (interval / 60 / 60 / 24 &lt; 30) &#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%.f天前&quot;, interval / 60 / 60 / 24];</span><br><span class="line">    &#125; else if (interval / 60 / 60 / 24 / 30 &lt; 12) &#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%.f月前&quot;, interval / 60 / 60 / 24 / 30];</span><br><span class="line">    &#125; else if (interval / 60 / 60 / 24 / 30 / 12 &gt;= 1)&#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%.f年前&quot;, interval / 60 / 60 / 24 / 30 / 12];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return @&quot;未知时间&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (NSTimeInterval)currentMilliSecondTimeInterval &#123;</span><br><span class="line">    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];</span><br><span class="line">    [formatter setDateStyle: NSDateFormatterMediumStyle];</span><br><span class="line">    [formatter setTimeStyle: NSDateFormatterShortStyle];</span><br><span class="line">    [formatter setDateFormat: @&quot;YYYY-MM-dd HH:mm:ss SSS&quot;];</span><br><span class="line">    </span><br><span class="line">    NSTimeZone *timeZone = [NSTimeZone timeZoneWithName: @&quot;Asia/Shanghai&quot;];</span><br><span class="line">    [formatter setTimeZone: timeZone];</span><br><span class="line">    NSDate *datenow = [NSDate date];</span><br><span class="line">    return [datenow timeIntervalSince1970] * 1000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (NSTimeInterval)currentSecondTimeInterval &#123;</span><br><span class="line">    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];</span><br><span class="line">    [formatter setDateStyle: NSDateFormatterMediumStyle];</span><br><span class="line">    [formatter setTimeStyle: NSDateFormatterShortStyle];</span><br><span class="line">    [formatter setDateFormat: @&quot;YYYY-MM-dd HH:mm:ss SSS&quot;];</span><br><span class="line">    </span><br><span class="line">    NSTimeZone *timeZone = [NSTimeZone timeZoneWithName: @&quot;Asia/Shanghai&quot;];</span><br><span class="line">    [formatter setTimeZone: timeZone];</span><br><span class="line">    NSDate *datenow = [NSDate date];</span><br><span class="line">    return [datenow timeIntervalSince1970];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (NSTimeInterval)timeDifferenceOfMillisecondWithStartTimeInterval:(NSTimeInterval)startTime endTimeInterval:(NSTimeInterval)endTime &#123;</span><br><span class="line">    if (startTime &lt; endTime) &#123;</span><br><span class="line">        return (endTime - startTime) / 1000;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return (startTime - endTime) / 1000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (NSTimeInterval)timeDifferenceOfSecondsWithStartTimeInterval:(NSTimeInterval)startTime endTimeInterval:(NSTimeInterval)endTime &#123;</span><br><span class="line">    if (startTime &lt; endTime) &#123;</span><br><span class="line">        return (endTime - startTime);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return (startTime - endTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>都是类方法，用的时候直接使用类名调用就可以了(实例：<code>[DateHandleUtils currentMilliSecondTimeInterval];</code>);</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/3334769-073af85178d8c456.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS开发技巧-不断更新中</title>
    <link href="https://wudan-ios.github.io/2019/01/24/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    <id>https://wudan-ios.github.io/2019/01/24/开发技巧/</id>
    <published>2019-01-24T06:23:46.585Z</published>
    <updated>2019-03-18T02:48:04.187Z</updated>
    
    <content type="html"><![CDATA[<p>1、PrefixHeader导入位置写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(SRCROOT)/$(PROJECT_NAME)/&lt;#文件所在文件夹名称#&gt;/PrefixHeader.pch</span><br></pre></td></tr></table></figure></p><p>2、隐藏导航栏的两种方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//方式一 《推荐》</span><br><span class="line">//在需要隐藏的viewController中遵循&lt;UINavigationControllerDelegate&gt;</span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line"> // 设置导航控制器的代理为self</span><br><span class="line">    self.navigationController.delegate = self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - UINavigationControllerDelegate</span><br><span class="line">// 将要显示控制器</span><br><span class="line">- (void)navigationController:(UINavigationController *)navigationController willShowViewController:(UIViewController *)viewController animated:(BOOL)animated &#123;</span><br><span class="line">    // 判断要显示的控制器是否是自己</span><br><span class="line">    BOOL isShowHomePage = [viewController isKindOfClass:[self class]];</span><br><span class="line">    </span><br><span class="line">    [self.navigationController setNavigationBarHidden:isShowHomePage animated:YES];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//方式二</span><br><span class="line">- (void)viewWillAppear:(BOOL)animated &#123;</span><br><span class="line">    [super viewWillAppear:animated];</span><br><span class="line"></span><br><span class="line">    [self.navigationController setNavigationBarHidden:YES animated:YES];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewWillDisappear:(BOOL)animated &#123;</span><br><span class="line">    [super viewWillDisappear:animated];</span><br><span class="line"></span><br><span class="line">    [self.navigationController setNavigationBarHidden:NO animated:YES];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、TabBarItem要求只显示图片不显示文字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// self 表示需要设置样式的控制器</span><br><span class="line">[self.tabBarItem setImageInsets:UIEdgeInsetsMake(6, 0, -6, 0)];</span><br></pre></td></tr></table></figure></p><p>4、TableView或CollectionView单选<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--步骤一、 声明一个全局变量--&gt;</span><br><span class="line">@property (nonatomic, assign) NSInteger selectedIndex;</span><br><span class="line">&lt;!--步骤二、TableView或CollectionView点击事件的方法中保存点击的index，并刷新--&gt;</span><br><span class="line">self.selectedIndex = indexPath.row;</span><br><span class="line">[collectionView reloadData];或[tableView reloadData];</span><br><span class="line">&lt;!--步骤三、在cellForItemAtIndexPath或cellForRowAtIndexPath方法中判断是否是所保存的index--&gt;</span><br><span class="line">if (self.selectedIndex == indexPath.row) &#123;</span><br><span class="line">    // 设置选中样式</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    // 设置成默认样式    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5、怎么区分真机还是模拟器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#if TARGET_IPHONE_SIMULATOR  </span><br><span class="line">    NSLog(@&quot;run on simulator&quot;);  </span><br><span class="line">#define SIMULATOR_TEST</span><br><span class="line">#else  </span><br><span class="line">//不定义SIMULATOR_TEST这个宏</span><br><span class="line">    NSLog(@&quot;run on device&quot;);  </span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></p><p>6、if Debug<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#ifdef DEBUG    </span><br><span class="line">// do sth</span><br><span class="line">#else   </span><br><span class="line">// do sth</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure></p><p>7、一键清理所有模拟器安装过的APP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 先关闭所有模拟器 在终端中输入下面命令即可</span><br><span class="line">xcrun simctl erase all</span><br></pre></td></tr></table></figure></p><p>8、SDWebImage清理缓存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)didReceiveMemoryWarning &#123;</span><br><span class="line">    [super didReceiveMemoryWarning];</span><br><span class="line">    [[[SDWebImageManager sharedManager] imageCache] clearMemory];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>9、UITableView的HeaderView下拉放大<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、View1:作为显示View</span><br><span class="line">2、View2:作为tableView的tableHeaderView，并添加View1，View2的大小和View1大小相同.</span><br><span class="line">3、在UIScrollViewDelegate方法中进行设计</span><br><span class="line">- (void)scrollViewDidScroll:(UIScrollView *)scrollView &#123;</span><br><span class="line">    CGFloat width = UIScreen.mainScreen.bounds.size.width;</span><br><span class="line">    CGFloat viewHeight = kScreenWidth * 0.5; // View1的初始高度</span><br><span class="line">    CGFloat yOffset = scrollView.contentOffset.y;</span><br><span class="line">    if (yOffset &lt; 0) &#123;</span><br><span class="line">        CGFloat totalOffset = viewHeight + ABS(yOffset);</span><br><span class="line">        CGFloat f = totalOffset / viewHeight;</span><br><span class="line">        self.headerView.frame = CGRectMake(- (width * f - width) / 2, yOffset, width * f, totalOffset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>10、Masonry制作就宫格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">//Objective-C ----&gt; Masonry</span><br><span class="line">/**</span><br><span class="line"> 多视图布局</span><br><span class="line"></span><br><span class="line"> @param viewArray 视图数组</span><br><span class="line"> @param column 列数</span><br><span class="line"> @param tbSpeace 视图上下间距</span><br><span class="line"> @param lrSpeace 视图左右间距</span><br><span class="line"> @param topSpeace 和父视图上间距</span><br><span class="line"> @param lrSuperViewSpeace 父视图左右间距</span><br><span class="line"> @param superView 父视图</span><br><span class="line"> @param viewHeight 视图高度</span><br><span class="line"> */</span><br><span class="line">- (void)wd_masLayoutSubViewsWithViewArray:(NSArray&lt;UIView *&gt; *)viewArray</span><br><span class="line">                              columnOfRow:(NSInteger)column</span><br><span class="line">                    topBottomOfItemSpeace:(CGFloat)tbSpeace</span><br><span class="line">                      leftRightItemSpeace:(CGFloat)lrSpeace</span><br><span class="line">                     topOfSuperViewSpeace:(CGFloat)topSpeace</span><br><span class="line">                 leftRightSuperViewSpeace:(CGFloat)lrSuperViewSpeace</span><br><span class="line">                          addToSubperView:(UIView *)superView</span><br><span class="line">                               viewHeight:(CGFloat)viewHeight&#123;</span><br><span class="line">  </span><br><span class="line">                    CGFloat viewWidth = superView.bounds.size.width;</span><br><span class="line">                    CGFloat itemWidth = (viewWidth - lrSuperViewSpeace * 2 - (column - 1) * lrSpeace) / column * 1.0f;</span><br><span class="line">                    CGFloat itemHeight = viewHeight;</span><br><span class="line">                    UIView *last = nil;</span><br><span class="line">  </span><br><span class="line">                    for (int i = 0; i &lt; viewArray.count; i++) &#123;</span><br><span class="line">                        UIView *item = viewArray[i];</span><br><span class="line">                        [superView addSubview:item];</span><br><span class="line"></span><br><span class="line">                        [item mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">                            make.width.mas_equalTo(itemWidth);</span><br><span class="line">                            make.height.mas_equalTo(itemHeight);</span><br><span class="line">                          </span><br><span class="line">                            CGFloat top = topSpeace + (i / column) * (itemHeight + tbSpeace);</span><br><span class="line">                            make.top.mas_offset(top);</span><br><span class="line">                            if (!last || (i % column) == 0) &#123;</span><br><span class="line">                                make.left.mas_offset(lrSuperViewSpeace);</span><br><span class="line">                            &#125;else&#123;</span><br><span class="line">                                make.left.mas_equalTo(last.mas_right).mas_offset(lrSpeace);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;];</span><br><span class="line">                      </span><br><span class="line">                        last = item;</span><br><span class="line">                    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>11、Snapkit制作九宫格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">//Swift ----&gt; SnapKit</span><br><span class="line">    </span><br><span class="line">    /// 多视图布局</span><br><span class="line">    ///</span><br><span class="line">    /// - Parameters:</span><br><span class="line">    ///   - viewArray: 视图数组</span><br><span class="line">    ///   - columnOfRow: 列数</span><br><span class="line">    ///   - topBottomOfItemSpeace: 视图上下间距</span><br><span class="line">    ///   - leftRightItemSpeace: 视图左右间距</span><br><span class="line">    ///   - topOfSuperViewSpeace: 和父视图上间距</span><br><span class="line">    ///   - leftRightSuperViewSpeace: 父视图左右间距</span><br><span class="line">    ///   - addToSubperView: 父视图</span><br><span class="line">    ///   - viewHeight: 视图高度</span><br><span class="line">    func wd_masLayoutSubViews(viewArray:Array&lt;UIView&gt;,</span><br><span class="line">                              columnOfRow:Int,</span><br><span class="line">                              topBottomOfItemSpeace:CGFloat,</span><br><span class="line">                              leftRightItemSpeace:CGFloat,</span><br><span class="line">                              topOfSuperViewSpeace:CGFloat,</span><br><span class="line">                              leftRightSuperViewSpeace:CGFloat,</span><br><span class="line">                              addToSubperView:UIView,</span><br><span class="line">                              viewHeight:CGFloat) -&gt; Void &#123;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        let viewWidth = addToSubperView.bounds.width</span><br><span class="line">        let tempW = leftRightSuperViewSpeace * 2 + CGFloat(columnOfRow - 1) * leftRightItemSpeace</span><br><span class="line">        let itemWidth = (viewWidth - tempW) / CGFloat(columnOfRow)</span><br><span class="line">        let itemHeight = viewHeight</span><br><span class="line">        </span><br><span class="line">        print(leftRightSuperViewSpeace,leftRightItemSpeace,itemWidth)</span><br><span class="line">        </span><br><span class="line">        var lastView:UIView?</span><br><span class="line">        </span><br><span class="line">        for (index) in viewArray.enumerated() &#123;</span><br><span class="line">            </span><br><span class="line">            let item = viewArray[i]</span><br><span class="line">            addToSubperView.addSubview(item)</span><br><span class="line">            </span><br><span class="line">            item.snp.makeConstraints &#123; (make) in</span><br><span class="line">                make.width.equalTo(itemWidth)</span><br><span class="line">                make.height.equalTo(itemHeight)</span><br><span class="line">                let top = topOfSuperViewSpeace + CGFloat(i / columnOfRow) * (itemHeight + topBottomOfItemSpeace)</span><br><span class="line">                make.top.equalTo(top)</span><br><span class="line">                </span><br><span class="line">                if !(lastView != nil) || i%columnOfRow == 0 &#123;</span><br><span class="line">                    make.left.equalTo(leftRightSuperViewSpeace)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    make.left.equalTo((lastView?.snp.right)!).offset(leftRightItemSpeace)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                lastView = item</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>12、沉浸式TableView(ScrollView、CollectionView)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (@available(iOS 11.0, *)) &#123;</span><br><span class="line">self.tableView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">self.automaticallyAdjustsScrollViewInsets = false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>13、通过身份证计算年龄<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/** 通过身份证计算年龄 */</span><br><span class="line">- (NSString *)calculationAgeWithBirthday: (NSString *)birthday &#123;</span><br><span class="line">    NSCalendar *calendar = [NSCalendar currentCalendar];</span><br><span class="line">    NSDate *nowDate = [NSDate date];</span><br><span class="line">    NSString *birth = birthday;</span><br><span class="line">    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc]init];</span><br><span class="line">    [dateFormatter setDateFormat:@&quot;yyyy-MM-dd&quot;];</span><br><span class="line">    NSDate *birthDay = [dateFormatter dateFromString:birth];</span><br><span class="line">    unsigned int unitFlags = NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitDay;</span><br><span class="line">    NSDateComponents *date = [calendar components:unitFlags fromDate:birthDay toDate:nowDate options:0];</span><br><span class="line">    if ([date year] &gt; 0) &#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%ld岁&quot;, (long)[date year]];</span><br><span class="line">    &#125; else if([date month] &gt; 0) &#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%ld月&quot;, (long)[date month]];</span><br><span class="line">    &#125;  else if([date day] &gt; 0)&#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%ld天&quot;, (long)[date day]];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return @&quot;0天&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSString *)ageStrFromIdentityCard:(NSString *)numberStr &#123;</span><br><span class="line">    NSString *dateSt;</span><br><span class="line">    NSMutableString *dateS;</span><br><span class="line">    if (numberStr.length &gt; 15) &#123;</span><br><span class="line">        dateSt = [numberStr substringWithRange:NSMakeRange(6, 8)];</span><br><span class="line">        dateS = [NSMutableString stringWithFormat:@&quot;%@&quot;, dateSt];</span><br><span class="line">        [dateS insertString:@&quot;-&quot; atIndex:4];</span><br><span class="line">        [dateS insertString:@&quot;-&quot; atIndex:7];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">        // 只考虑 19开头的15位的身份证号</span><br><span class="line">        dateSt = [NSString stringWithFormat:@&quot;19%@&quot;,[numberStr substringWithRange:NSMakeRange(6, 6)]];</span><br><span class="line">        dateS = [NSMutableString stringWithFormat:@&quot;%@&quot;, dateSt];</span><br><span class="line">        [dateS insertString:@&quot;-&quot; atIndex:4];</span><br><span class="line">        [dateS insertString:@&quot;-&quot; atIndex:7];</span><br><span class="line">    &#125;</span><br><span class="line">    return [self calculationAgeWithBirthday:dateS];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、PrefixHeader导入位置写法&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AVPlayer封装</title>
    <link href="https://wudan-ios.github.io/2019/01/11/AVPlayer%E5%B0%81%E8%A3%85/"/>
    <id>https://wudan-ios.github.io/2019/01/11/AVPlayer封装/</id>
    <published>2019-01-11T07:41:50.499Z</published>
    <updated>2019-01-11T07:45:56.494Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-066df343391a04f5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="60920ddb4ccdca50074568b5ea54679f.jpg"></p><p>最近在写关于音视频播放的案例，所以就趁机会研究了一下AVPlayer的内容。我封装的目前只能播放网络音视频。还未添加缓存，以后找机会研究一下再更新。代码中提供了音视频的上一曲、下一曲、暂停、开始、停止、单曲播放、顺序播放、随机播放等功能。代码写的不好，仅供参考~</p><h3 id="代码接口文件"><a href="#代码接口文件" class="headerlink" title="代码接口文件"></a>代码接口文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &lt;AVFoundation/AVFoundation.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">// 当前播放器的播放形式</span><br><span class="line">typedef NS_ENUM(NSInteger, MediaPlayType) &#123;</span><br><span class="line">    MediaPlayTypeCycle,   ///&lt; 顺序</span><br><span class="line">    MediaPlayTypeSingle,  ///&lt; 单曲循环</span><br><span class="line">    MediaPlayTypeRandom   ///&lt; 随机播放</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 当前播放器的播放状态</span><br><span class="line">typedef NS_ENUM(NSInteger, MediaPlayStatus) &#123;</span><br><span class="line">    MediaPlayStatusStop,        ///&lt; 停止播放</span><br><span class="line">    MediaPlayStatusPause,       ///&lt; 暂停播放</span><br><span class="line">    MediaPlayStatusPlaying      ///&lt; 正在播放</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 媒体加载状态</span><br><span class="line">typedef NS_ENUM(NSInteger, MediaLoadStatus) &#123;</span><br><span class="line">    MediaLoadStatusReadyToPlay,  ///&lt; 准备播放</span><br><span class="line">    MediaLoadStatusUnknown,      ///&lt; 未知</span><br><span class="line">    MediaPlayStatusFailed        ///&lt; 失败</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@class MediaPlyerManager;</span><br><span class="line"></span><br><span class="line">@protocol MediaPlyerManagerDelegate &lt;NSObject&gt;</span><br><span class="line">@optional</span><br><span class="line">// 数据加载状态 根据状态进行播放或其他操作</span><br><span class="line">- (void)MediaPlayer:(MediaPlyerManager *)playerManager playerItemStatus:(MediaLoadStatus)status;</span><br><span class="line">// 缓冲进度</span><br><span class="line">- (void)MediaPlayer:(MediaPlyerManager *)playerManager netBufferValue:(CGFloat)value;</span><br><span class="line">// 缓冲是否足够播放</span><br><span class="line">- (void)MediaPlayer:(MediaPlyerManager *)playerManager bufferHasEnough:(BOOL)enough;</span><br><span class="line">// 当前播放的时间</span><br><span class="line">- (void)MediaPlayer:(MediaPlyerManager *)playerManager currentPlayTime:(NSString *)time currentPlayTimeValue:(CGFloat)value;</span><br><span class="line">// 播放总时间</span><br><span class="line">- (void)MediaPlayer:(MediaPlyerManager *)playerManager mediaEndTime:(NSString *)time mediaEndTimeValue:(CGFloat)value;</span><br><span class="line">// 播放结束</span><br><span class="line">- (void)MediaPlayerCurrentMediaPlayFinish:(MediaPlyerManager *)playerManager;</span><br><span class="line">// 播放状态</span><br><span class="line">- (void)MediaPlayer:(MediaPlyerManager *)playerManager playeStatus:(MediaPlayStatus)status;</span><br><span class="line">// 获取数据切换时获取正在播放的URL和当前的index</span><br><span class="line">- (void)MediaPlayer:(MediaPlyerManager *)playerManager currentUrl:(NSString *)url currentIndex:(NSInteger)index;</span><br><span class="line">// 为了配合手机后台播放 实时获取播放的进度，总的时间，当前的index&lt;通过index获取图片等信息&gt;</span><br><span class="line">- (void)MediaPlayer:(MediaPlyerManager *)playerManager currentProgressValue:(CGFloat)value totalValue:(CGFloat)totalValue currentIndex:(NSInteger)index;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">typedef MediaPlyerManager *(^playerCurrentTime)(NSString *time);</span><br><span class="line"></span><br><span class="line">@interface MediaPlyerManager : NSObject</span><br><span class="line">@property (nonatomic, strong, readonly) AVPlayer                  *mediaPlayer;          ///&lt; 播放器</span><br><span class="line">@property (nonatomic, strong, readonly) AVPlayerItem              *meidaPlayerItem;      ///&lt; 播放器的CurrentItem</span><br><span class="line">@property (nonatomic, strong, readonly) NSMutableArray&lt;NSString*&gt; *dataUrlArray;         ///&lt; 正在播放的列表数据</span><br><span class="line">@property (nonatomic, assign, readonly) MediaPlayType              playType;             ///&lt; 当前播放类型</span><br><span class="line">@property (nonatomic, assign, readonly) MediaPlayStatus            playStatus;           ///&lt; 当前播放状态</span><br><span class="line">@property (nonatomic, assign, readonly) NSInteger                  currentIndex;         ///&lt; 当前播放的索引</span><br><span class="line">@property (nonatomic, assign, readonly) BOOL                       isPlaying;            ///&lt; 是否在播放</span><br><span class="line">@property (nonatomic, assign, readonly) CGFloat                    curentPlayTimeValue;  ///&lt; 当前播放时间值</span><br><span class="line">@property (nonatomic, copy, readonly) NSString                    *curentPlayTime;       ///&lt; 当前播放时间</span><br><span class="line">@property (nonatomic, assign, readonly) CGFloat                    endPlayTimeValue;     ///&lt; 当前播放时间值</span><br><span class="line">@property (nonatomic, copy, readonly) NSString                    *endPlayTime;          ///&lt; 当前播放时间</span><br><span class="line">+ (instancetype)defaultManager;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 列表播放 ⚠️&lt;默认不自动播放&gt;</span><br><span class="line"></span><br><span class="line"> @param urls 文件路径数组</span><br><span class="line"> @param delegate 回调代理</span><br><span class="line"> @return MediaPlyerManager</span><br><span class="line"> */</span><br><span class="line">- (MediaPlyerManager *)playerWithUrls:(NSArray&lt;NSString *&gt; *)urls actionWithDelegate:(id&lt;MediaPlyerManagerDelegate&gt;)delegate;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 单个音视频播放 ⚠️&lt;默认不自动播放&gt;</span><br><span class="line"></span><br><span class="line"> @param url 文件路径</span><br><span class="line"> @param delegate 回调代理</span><br><span class="line"> @return MediaPlyerManager</span><br><span class="line"> */</span><br><span class="line">- (MediaPlyerManager *)playerWithUrl:(NSString *)url actionWithDelegate:(id&lt;MediaPlyerManagerDelegate&gt;)delegate;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    开始播放</span><br><span class="line"> */</span><br><span class="line">- (void)play;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    暂停播放</span><br><span class="line"> */</span><br><span class="line">- (void)pause;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    停止播放</span><br><span class="line"> */</span><br><span class="line">- (void)stop;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    下一曲</span><br><span class="line"> */</span><br><span class="line">- (void)next;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    上一曲</span><br><span class="line"> */</span><br><span class="line">- (void)previous;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 指定进度开始播放</span><br><span class="line"></span><br><span class="line"> @param progress 进度百分比</span><br><span class="line"> */</span><br><span class="line">- (void)setupPlayerSeekToProgress:(CGFloat)progress;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 制定播放类型</span><br><span class="line"></span><br><span class="line"> @param type 类型</span><br><span class="line"> */</span><br><span class="line">- (void)setupMediaPlayerType:(MediaPlayType)type;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 指定播放的index</span><br><span class="line"></span><br><span class="line"> @param index 索引</span><br><span class="line"> */</span><br><span class="line">- (void)setupPlayerIndex:(NSInteger)index;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 添加数据</span><br><span class="line"></span><br><span class="line"> @param files 文件数组</span><br><span class="line"> @param index 索引</span><br><span class="line"> */</span><br><span class="line">- (void)insertMediaFile:(NSArray&lt;NSString *&gt; *)files atIndex:(NSInteger)index;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    移除全部数据</span><br><span class="line"> */</span><br><span class="line">- (void)removeAllFiles;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 移除索引中的单个数据</span><br><span class="line"></span><br><span class="line"> @param index 索引</span><br><span class="line"> */</span><br><span class="line">- (void)removeObjectAtIndex:(NSInteger)index;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 设置锁屏样式</span><br><span class="line"></span><br><span class="line"> @param coverImage 专辑图片</span><br><span class="line"> @param size 显示大小</span><br><span class="line"> @param title 标题</span><br><span class="line"> @param author 专辑作者</span><br><span class="line"> @param album 专辑名称</span><br><span class="line"> @param currentTime 当前播放时间</span><br><span class="line"> @param duration 播放总时长</span><br><span class="line"> */</span><br><span class="line">- (void)setupLockScreenPlayInfo:(UIImage *)coverImage</span><br><span class="line">                      imageSize:(CGSize)size</span><br><span class="line">                          title:(NSString *)title</span><br><span class="line">                         ahthor:(NSString *)author</span><br><span class="line">                         album:(NSString *)album</span><br><span class="line">                currentPlayTime:(CGFloat)currentTime</span><br><span class="line">                       duration:(CGFloat)duration;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure><h3 id="代码实现文件"><a href="#代码实现文件" class="headerlink" title="代码实现文件"></a>代码实现文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;MediaPlyerManager.h&quot;</span><br><span class="line">#import &lt;MediaPlayer/MediaPlayer.h&gt;</span><br><span class="line"></span><br><span class="line">@interface MediaPlyerManager ()</span><br><span class="line">@property (nonatomic, strong, readwrite) NSMutableArray&lt;NSString *&gt; *dataUrlArray;</span><br><span class="line">@property (nonatomic, strong, readwrite) AVPlayer                  *mediaPlayer;</span><br><span class="line">@property (nonatomic, assign, readwrite) BOOL                      isPlaying;</span><br><span class="line">@property (nonatomic, strong, readwrite) AVPlayerItem              *meidaPlayerItem;</span><br><span class="line">@property (nonatomic, assign, readwrite) MediaPlayType             playeType;</span><br><span class="line">@property (nonatomic, assign, readwrite) NSInteger                 currentIndex;</span><br><span class="line">@property (nonatomic, assign, readwrite) MediaPlayStatus           playStatus;</span><br><span class="line">@property (nonatomic, assign, readwrite) CGFloat                   curentPlayTimeValue;</span><br><span class="line">@property (nonatomic, copy, readwrite  ) NSString                  *curentPlayTime;</span><br><span class="line">@property (nonatomic, assign, readwrite) CGFloat                   endPlayTimeValue;</span><br><span class="line">@property (nonatomic, copy, readwrite  ) NSString                  *endPlayTime;</span><br><span class="line">@property (nonatomic, weak             ) id &lt;MediaPlyerManagerDelegate&gt; delegate;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation MediaPlyerManager</span><br><span class="line"></span><br><span class="line">+ (instancetype)defaultManager &#123;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    static MediaPlyerManager *manger;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        manger = [[MediaPlyerManager alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return manger;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 初始化</span><br><span class="line"></span><br><span class="line">- (MediaPlyerManager *)playerWithUrl:(NSString *)url actionWithDelegate:(id&lt;MediaPlyerManagerDelegate&gt;)delegate &#123;</span><br><span class="line">    [self playerWithUrls:@[url] actionWithDelegate:delegate];</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (MediaPlyerManager *)playerWithUrls:(NSArray&lt;NSString *&gt; *)urls actionWithDelegate:(id&lt;MediaPlyerManagerDelegate&gt;)delegate &#123;</span><br><span class="line">    self.delegate         = delegate;</span><br><span class="line">    self.currentIndex     = 0;</span><br><span class="line">    self.dataUrlArray     = [NSMutableArray array];</span><br><span class="line">    NSMutableArray *array = [NSMutableArray arrayWithCapacity:urls.count];</span><br><span class="line">    for (NSString *urlStr in urls) &#123;</span><br><span class="line">        [array addObject:[self createPlayerItemWithUrl:urlStr]];</span><br><span class="line">        [self.dataUrlArray addObject:urlStr];</span><br><span class="line">    &#125;</span><br><span class="line">    self.playeType = MediaPlayTypeCycle;</span><br><span class="line">    self.mediaPlayer = [[AVPlayer alloc] initWithPlayerItem:array.firstObject];</span><br><span class="line">    self.meidaPlayerItem = self.mediaPlayer.currentItem;</span><br><span class="line">    [self getCurrentIndex:self.currentIndex];</span><br><span class="line">    [self addObserver];</span><br><span class="line">    </span><br><span class="line">    __weak typeof(self) weakself = self;</span><br><span class="line">    [self.mediaPlayer addPeriodicTimeObserverForInterval:CMTimeMake(1, 1) queue:NULL usingBlock:^(CMTime time) &#123;</span><br><span class="line">        NSString *currentString = [weakself getStringFromCMTime:time];</span><br><span class="line">        weakself.curentPlayTime = currentString;</span><br><span class="line">        weakself.curentPlayTimeValue = (CGFloat)time.value/time.timescale;        </span><br><span class="line">#pragma mark - 获取当前播放时间</span><br><span class="line">        if (weakself.delegate &amp;&amp; [weakself.delegate respondsToSelector:@selector(MediaPlayer:currentPlayTime:currentPlayTimeValue:)]) &#123;</span><br><span class="line">            [weakself.delegate MediaPlayer:weakself currentPlayTime:currentString currentPlayTimeValue:(CGFloat)time.value/time.timescale];</span><br><span class="line">        &#125;</span><br><span class="line">#pragma mark - 实时获取播放信息</span><br><span class="line">        if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(MediaPlayer:currentProgressValue:totalValue:currentIndex:)]) &#123;</span><br><span class="line">            [weakself.delegate MediaPlayer:weakself currentProgressValue:weakself.curentPlayTimeValue totalValue:weakself.endPlayTimeValue currentIndex:weakself.currentIndex];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 播放结束</span><br><span class="line"></span><br><span class="line">- (void)playFinish:(NSNotification *)notification &#123;</span><br><span class="line">    if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(MediaPlayerCurrentMediaPlayFinish:)]) &#123;</span><br><span class="line">        [self.delegate MediaPlayerCurrentMediaPlayFinish:self];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (self.playeType == MediaPlayTypeSingle) &#123;</span><br><span class="line">        [self.mediaPlayer seekToTime:kCMTimeZero];</span><br><span class="line">        [self play];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (self.currentIndex &lt; self.dataUrlArray.count - 1) &#123;</span><br><span class="line">            self.currentIndex += 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            self.currentIndex = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        [self.mediaPlayer replaceCurrentItemWithPlayerItem:[self createPlayerItemWithUrl:self.dataUrlArray[self.currentIndex]]];</span><br><span class="line">        self.meidaPlayerItem = self.mediaPlayer.currentItem;</span><br><span class="line">        [self getCurrentIndex:self.currentIndex];</span><br><span class="line">        [self play];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - KVO</span><br><span class="line"></span><br><span class="line">- (void)observeValueForKeyPath:(NSString *)keyPath</span><br><span class="line">                      ofObject:(id)object</span><br><span class="line">                        change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change</span><br><span class="line">                       context:(void *)context &#123;</span><br><span class="line">    </span><br><span class="line">    AVPlayerItem *playerItem = object;</span><br><span class="line">    if ([keyPath isEqualToString:@&quot;status&quot;]) &#123;</span><br><span class="line">        MediaLoadStatus status = [change[@&quot;new&quot;] integerValue];</span><br><span class="line">#pragma mark - 获取媒体加载状态</span><br><span class="line">        if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(MediaPlayer:playerItemStatus:)]) &#123;</span><br><span class="line">            [self.delegate MediaPlayer:self playerItemStatus:status];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if ([keyPath isEqualToString:@&quot;loadedTimeRanges&quot;]) &#123;</span><br><span class="line">        NSArray * timeRanges         = playerItem.loadedTimeRanges;</span><br><span class="line">        CMTimeRange timeRange        = [timeRanges.firstObject CMTimeRangeValue];</span><br><span class="line">        NSTimeInterval totalLoadTime = CMTimeGetSeconds(timeRange.start) \</span><br><span class="line">                                                + CMTimeGetSeconds(timeRange.duration);</span><br><span class="line">        NSTimeInterval duration      = CMTimeGetSeconds(playerItem.duration);</span><br><span class="line">        NSTimeInterval scale         = totalLoadTime/duration;</span><br><span class="line">        </span><br><span class="line">#pragma mark - 获取媒体总时间</span><br><span class="line">        if ((CGFloat)duration/scale &gt;= 0) &#123;</span><br><span class="line">            self.endPlayTime = [self getStringFromCMTime:playerItem.duration];</span><br><span class="line">            self.endPlayTimeValue = (CGFloat)duration/scale;</span><br><span class="line">            if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(MediaPlayer:mediaEndTime:mediaEndTimeValue:)]) &#123;</span><br><span class="line">                [self.delegate MediaPlayer:self mediaEndTime:[self getStringFromCMTime:playerItem.duration] mediaEndTimeValue:(CGFloat)duration/scale];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">#pragma mark - 缓冲百分比</span><br><span class="line">        if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(MediaPlayer:netBufferValue:)]) &#123;</span><br><span class="line">            [self.delegate MediaPlayer:self netBufferValue:scale];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if ([keyPath isEqualToString:@&quot;playbackBufferEmpty&quot;]) &#123;</span><br><span class="line">        </span><br><span class="line">#pragma mark - 缓冲不足够播放</span><br><span class="line">        if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(MediaPlayer:bufferHasEnough:)]) &#123;</span><br><span class="line">            [self.delegate MediaPlayer:self bufferHasEnough:false];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if ([keyPath isEqualToString:@&quot;playbackLikelyToKeepUp&quot;]) &#123;</span><br><span class="line">        </span><br><span class="line">#pragma mark - 缓冲足够播放</span><br><span class="line">        if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(MediaPlayer:bufferHasEnough:)]) &#123;</span><br><span class="line">            [self.delegate MediaPlayer:self bufferHasEnough:true];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pragma mark - 开始播放</span><br><span class="line"></span><br><span class="line">- (void)play &#123;</span><br><span class="line">    [self.mediaPlayer play];</span><br><span class="line">    [self getPlayStatus:MediaPlayStatusPlaying];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 暂停播放</span><br><span class="line"></span><br><span class="line">- (void)pause &#123;</span><br><span class="line">    [self.mediaPlayer pause];</span><br><span class="line">    [self getPlayStatus:MediaPlayStatusPause];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 停止播放</span><br><span class="line"></span><br><span class="line">- (void)stop &#123;</span><br><span class="line">    [self.mediaPlayer replaceCurrentItemWithPlayerItem:nil];</span><br><span class="line">    [self getPlayStatus:MediaPlayStatusStop];</span><br><span class="line">    [self removeObserver];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 下一个</span><br><span class="line"></span><br><span class="line">- (void)next &#123;</span><br><span class="line">    if (self.playeType == MediaPlayTypeRandom) &#123;</span><br><span class="line">        self.currentIndex = (NSInteger)arc4random_uniform((int32_t)(self.dataUrlArray.count - 1));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (self.currentIndex == self.dataUrlArray.count - 1) &#123;</span><br><span class="line">            self.currentIndex = 0;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            self.currentIndex += 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [self.mediaPlayer replaceCurrentItemWithPlayerItem:[self createPlayerItemWithUrl:self.dataUrlArray[self.currentIndex]]];</span><br><span class="line">    self.meidaPlayerItem = self.mediaPlayer.currentItem;</span><br><span class="line">    [self getCurrentIndex:self.currentIndex];</span><br><span class="line">    [self addObserver];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 上一个</span><br><span class="line"></span><br><span class="line">- (void)previous &#123;</span><br><span class="line">    if (self.playeType == MediaPlayTypeRandom) &#123;</span><br><span class="line">        self.currentIndex = (NSInteger)arc4random_uniform((int32_t)(self.dataUrlArray.count - 1));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (self.currentIndex == 0) &#123;</span><br><span class="line">            self.currentIndex = self.dataUrlArray.count - 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            self.currentIndex -= 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [self.mediaPlayer replaceCurrentItemWithPlayerItem:[self createPlayerItemWithUrl:self.dataUrlArray[self.currentIndex]]];</span><br><span class="line">    self.meidaPlayerItem = self.mediaPlayer.currentItem;</span><br><span class="line">    [self getCurrentIndex:self.currentIndex];</span><br><span class="line">    [self addObserver];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 播放状态</span><br><span class="line"></span><br><span class="line">- (void)getPlayStatus:(MediaPlayStatus)status &#123;</span><br><span class="line">    if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(MediaPlayer:playeStatus:)]) &#123;</span><br><span class="line">        [self.delegate MediaPlayer:self playeStatus:status];</span><br><span class="line">    &#125;</span><br><span class="line">    self.playStatus = status;</span><br><span class="line"></span><br><span class="line">    if (status == MediaPlayStatusPlaying) &#123;</span><br><span class="line">        self.isPlaying = true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        self.isPlaying = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 根据index进行回调</span><br><span class="line"></span><br><span class="line">- (void)getCurrentIndex:(NSInteger)index &#123;</span><br><span class="line">    if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(MediaPlayer:currentUrl:currentIndex:)]) &#123;</span><br><span class="line">        [self.delegate MediaPlayer:self currentUrl:self.dataUrlArray[index] currentIndex:index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 设置播放进度百分比</span><br><span class="line"></span><br><span class="line">- (void)setupPlayerSeekToProgress:(CGFloat)progress &#123;</span><br><span class="line">    float timeValue = progress * CMTimeGetSeconds(self.mediaPlayer.currentItem.duration);</span><br><span class="line">    [self.mediaPlayer seekToTime:CMTimeMake(timeValue, 1)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 设置播放形式</span><br><span class="line"></span><br><span class="line">- (void)setupMediaPlayerType:(MediaPlayType)type &#123;</span><br><span class="line">    self.playeType = type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 播放指定index的媒体</span><br><span class="line"></span><br><span class="line">- (void)setupPlayerIndex:(NSInteger)index &#123;</span><br><span class="line">    if (index &gt; (self.dataUrlArray.count - 1)) &#123;</span><br><span class="line">        @throw [NSException exceptionWithName:@&quot;越界错误&quot; reason:@&quot;index 不能超出URL数组的长度&quot; userInfo:nil];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    self.currentIndex = index;</span><br><span class="line">    [self.mediaPlayer replaceCurrentItemWithPlayerItem:[self createPlayerItemWithUrl:self.dataUrlArray[self.currentIndex]]];</span><br><span class="line">    self.meidaPlayerItem = self.mediaPlayer.currentItem;</span><br><span class="line">    [self getCurrentIndex:self.currentIndex];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 插入数据</span><br><span class="line"></span><br><span class="line">- (void)insertMediaFile:(NSArray&lt;NSString *&gt; *)files atIndex:(NSInteger)index &#123;</span><br><span class="line">    for (NSString *urlStr in files) &#123;</span><br><span class="line">        NSInteger i = [files indexOfObject:urlStr];</span><br><span class="line">        [self.dataUrlArray insertObject:urlStr atIndex:index + i];</span><br><span class="line">    &#125;</span><br><span class="line">    if (index &lt; self.currentIndex) &#123;</span><br><span class="line">        self.currentIndex += 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 删除数据</span><br><span class="line"></span><br><span class="line">- (void)removeAllFiles &#123;</span><br><span class="line">    [self stop];</span><br><span class="line">    [self.dataUrlArray removeAllObjects];</span><br><span class="line">    self.dataUrlArray = [NSMutableArray array];</span><br><span class="line">    self.currentIndex = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)removeObjectAtIndex:(NSInteger)index &#123;</span><br><span class="line">    if (self.dataUrlArray.count == 1) &#123;</span><br><span class="line">        [self removeAllFiles];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [self.dataUrlArray removeObjectAtIndex:index];</span><br><span class="line">        if (index == self.currentIndex) &#123;</span><br><span class="line">            if (index == 0) &#123;</span><br><span class="line">                self.currentIndex = 0;</span><br><span class="line">                [self next];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                self.currentIndex -= 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (self.currentIndex &gt; index) &#123;</span><br><span class="line">                self.currentIndex -= 1;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Utils</span><br><span class="line"></span><br><span class="line">- (NSString *)getStringFromCMTime:(CMTime)time &#123;</span><br><span class="line">    float currentTimeValue       = (CGFloat)time.value/time.timescale;</span><br><span class="line">    NSDate * currentDate         = [NSDate dateWithTimeIntervalSince1970:currentTimeValue];</span><br><span class="line">    NSCalendar *calendar         = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];</span><br><span class="line">    NSInteger unitFlags          = NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond;</span><br><span class="line">    NSDateComponents *components = [calendar components:unitFlags fromDate:currentDate];</span><br><span class="line">    if (currentTimeValue &gt;= 3600 ) &#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%02ld:%02ld:%02ld&quot;, (long)components.hour, (long)components.minute, (long)components.second];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return [NSString stringWithFormat:@&quot;%02ld:%02ld&quot;, (long)components.minute, (long)components.second];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)addObserver &#123;</span><br><span class="line">    // 监控状态属性</span><br><span class="line">    [self.meidaPlayerItem addObserver:self</span><br><span class="line">                           forKeyPath:@&quot;status&quot;</span><br><span class="line">                              options:(NSKeyValueObservingOptionOld|NSKeyValueObservingOptionNew)</span><br><span class="line">                              context:nil];</span><br><span class="line">    </span><br><span class="line">    // 监控缓冲加载情况属性</span><br><span class="line">    [self.meidaPlayerItem addObserver:self</span><br><span class="line">                           forKeyPath:@&quot;loadedTimeRanges&quot;</span><br><span class="line">                              options:(NSKeyValueObservingOptionOld|NSKeyValueObservingOptionNew)</span><br><span class="line">                              context:nil];</span><br><span class="line">    </span><br><span class="line">    // 监听缓冲不足够播放</span><br><span class="line">    [self.meidaPlayerItem addObserver:self</span><br><span class="line">                           forKeyPath:@&quot;playbackBufferEmpty&quot;</span><br><span class="line">                              options:NSKeyValueObservingOptionNew</span><br><span class="line">                              context:nil];</span><br><span class="line">    </span><br><span class="line">    // 监听缓冲足够播放</span><br><span class="line">    [self.meidaPlayerItem addObserver:self</span><br><span class="line">                           forKeyPath:@&quot;playbackLikelyToKeepUp&quot;</span><br><span class="line">                              options:NSKeyValueObservingOptionNew</span><br><span class="line">                              context:nil];</span><br><span class="line">    </span><br><span class="line">    // 获取是否播放结束</span><br><span class="line">    [[NSNotificationCenter defaultCenter] addObserver:self</span><br><span class="line">                                             selector:@selector(playFinish:)</span><br><span class="line">                                                 name:AVPlayerItemDidPlayToEndTimeNotification</span><br><span class="line">                                               object:self.meidaPlayerItem];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)removeObserver &#123;</span><br><span class="line">    [[NSNotificationCenter defaultCenter] removeObserver:self];</span><br><span class="line">    @try &#123;</span><br><span class="line">        [self.meidaPlayerItem removeObserver:self forKeyPath:@&quot;loadedTimeRanges&quot;];</span><br><span class="line">        [self.meidaPlayerItem removeObserver:self forKeyPath:@&quot;playbackBufferEmpty&quot;];</span><br><span class="line">        [self.meidaPlayerItem removeObserver:self forKeyPath:@&quot;playbackLikelyToKeepUp&quot;];</span><br><span class="line">        [self.meidaPlayerItem removeObserver:self forKeyPath:@&quot;status&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">    @catch(NSException *exception) &#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;, exception);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 设置锁屏样式</span><br><span class="line"></span><br><span class="line">- (void)setupLockScreenPlayInfo:(UIImage *)coverImage</span><br><span class="line">                      imageSize:(CGSize)size</span><br><span class="line">                          title:(NSString *)title</span><br><span class="line">                         ahthor:(NSString *)author</span><br><span class="line">                          album:(NSString *)album</span><br><span class="line">                currentPlayTime:(CGFloat)currentTime</span><br><span class="line">                       duration:(CGFloat)duration &#123;</span><br><span class="line">    </span><br><span class="line">    Class playingInfoCenter = NSClassFromString(@&quot;MPNowPlayingInfoCenter&quot;);</span><br><span class="line">    if (playingInfoCenter) &#123;</span><br><span class="line">        NSMutableDictionary *songInfo = [[NSMutableDictionary alloc] init];</span><br><span class="line">        MPMediaItemArtwork *albumArt = [[MPMediaItemArtwork alloc] initWithBoundsSize:size requestHandler:^UIImage * _Nonnull(CGSize size) &#123;</span><br><span class="line">            return coverImage;</span><br><span class="line">        &#125;];</span><br><span class="line">        [songInfo setObject:title forKey:MPMediaItemPropertyTitle];</span><br><span class="line">        [songInfo setObject:author forKey:MPMediaItemPropertyArtist];</span><br><span class="line">        [songInfo setObject:album forKey:MPMediaItemPropertyAlbumTitle];</span><br><span class="line">        [songInfo setObject:albumArt forKey:MPMediaItemPropertyArtwork];</span><br><span class="line">        [songInfo setObject:[NSNumber numberWithDouble:currentTime] forKey:MPNowPlayingInfoPropertyElapsedPlaybackTime];</span><br><span class="line">        [songInfo setObject:[NSNumber numberWithDouble:duration] forKey:MPMediaItemPropertyPlaybackDuration];</span><br><span class="line">        [[MPNowPlayingInfoCenter defaultCenter] setNowPlayingInfo:songInfo];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (AVPlayerItem *)createPlayerItemWithUrl:(NSString *)url &#123;</span><br><span class="line">    return [AVPlayerItem playerItemWithURL:[NSURL URLWithString:url]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="提问"><a href="#提问" class="headerlink" title="提问"></a>提问</h3><p>本来相同使用AVQueuePlayer来进行列表播放的，但是当做单曲循环的时候遇到问题：通过通知监听播放完成，在通知的方法里进行具体操作，但是设置无效，直接播放的还是下一个文件。如果有人知道如何解决，帮忙回复一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/3334769-066df343391a04f5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RxSwift学习日常</title>
    <link href="https://wudan-ios.github.io/2019/01/03/RxSwift%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8%EF%BC%88%E5%9F%BA%E7%A1%80%E4%BB%8B%E7%BB%8D%EF%BC%89/"/>
    <id>https://wudan-ios.github.io/2019/01/03/RxSwift学习日常（基础介绍）/</id>
    <published>2019-01-03T01:52:22.730Z</published>
    <updated>2019-01-03T01:52:23.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Observable-介绍"><a href="#Observable-介绍" class="headerlink" title="Observable 介绍"></a>Observable 介绍</h1><h2 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable<t></t></h2><ul><li>Observable<t> 这个类就是 Rx 框架的基础，我们可以称它为可观察序列。它的作用就是可以异步地产生一系列的 Event（事件），即一个 Observable<t> 对象会随着时间推移不定期地发出 event(element : T) 这样一个东西。</t></t></li><li>而且这些 Event 还可以携带数据，它的泛型 <t> 就是用来指定这个 Event 携带的数据的类型。</t></li><li>有了可观察序列，我们还需要有一个 Observer（订阅者）来订阅它，这样这个订阅者才能收到 Observable<t> 不时发出的 Event。<h2 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h2>查看 RxSwift 源码可以发现，事件 Event 的定义如下：</t></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public enum Event&lt;Element&gt; &#123;</span><br><span class="line">    /// Next element is produced.</span><br><span class="line">    case next(Element)</span><br><span class="line"> </span><br><span class="line">    /// Sequence terminated with an error.</span><br><span class="line">    case error(Swift.Error)</span><br><span class="line"> </span><br><span class="line">    /// Sequence completed successfully.</span><br><span class="line">    case completed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 Event 就是一个枚举，也就是说一个 Observable 是可以发出 3 种不同类型的 Event 事件：</p><ul><li>next：next 事件就是那个可以携带数据 <t> 的事件，可以说它就是一个“最正常”的事件。</t></li><li>error：error 事件表示一个错误，它可以携带具体的错误内容，一旦 Observable 发出了 error event，则这个 Observable 就等于终止了，以后它再也不会发出 event 事件了。</li><li>completed：completed 事件表示 Observable 发出的事件正常地结束了，跟 error 一样，一旦 Observable 发出了 completed event，则这个 Observable 就等于终止了，以后它再也不会发出 event 事件了<h2 id="Observable-与-Sequence比较"><a href="#Observable-与-Sequence比较" class="headerlink" title="Observable 与 Sequence比较"></a>Observable 与 Sequence比较</h2>(1)、为更好地理解，我们可以把每一个 Observable 的实例想象成于一个 Swift 中的 Sequence：</li><li>即一个 Observable（ObservableType）相当于一个序列 Sequence（SequenceType）。</li><li>ObservableType.subscribe(_:) 方法其实就相当于 SequenceType.generate()。</li></ul><p>(2)、但它们之间还是有许多区别的：</p><ul><li>Swift 中的 SequenceType 是同步的循环，而 Observable 是异步的。</li><li>Observable 对象会在有任何 Event 时候，自动将 Event 作为一个参数通过 ObservableType.subscribe(_:) 发出，并不需要使用 next 方法。<h2 id="创建-Observable-序列"><a href="#创建-Observable-序列" class="headerlink" title="创建 Observable 序列"></a>创建 Observable 序列</h2><h3 id="just-方法"><a href="#just-方法" class="headerlink" title="just() 方法"></a>just() 方法</h3>（1）该方法通过传入一个默认值来初始化。<br><br>（2）下面样例我们显式地标注出了 observable 的类型为 Observable<int>，即指定了这个 Observable 所发出的事件携带的数据类型必须是 Int 类型的。</int></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let observable = Observable&lt;Int&gt;.just(5)</span><br></pre></td></tr></table></figure><h3 id="of-方法"><a href="#of-方法" class="headerlink" title="of() 方法"></a>of() 方法</h3><p>（1）该方法可以接受可变数量的参数（必需要是同类型的）<br><br>（2）下面样例中我没有显式地声明出 Observable 的泛型类型，Swift 也会自动推断类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let observable = Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="from-方法"><a href="#from-方法" class="headerlink" title="from() 方法"></a>from() 方法</h3><p>（1）该方法需要一个数组参数。<br><br>（2）下面样例中数据里的元素就会被当做这个 Observable 所发出 event 携带的数据内容，最终效果同上面饿 of() 样例是一样的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let observable = Observable.from([&quot;A&quot;, &quot;B&quot;, &quot;C&quot;])</span><br></pre></td></tr></table></figure></p><h3 id="empty-方法"><a href="#empty-方法" class="headerlink" title="empty() 方法"></a>empty() 方法</h3><p>该方法创建一个空内容的 Observable 序列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let observable = Observable&lt;Int&gt;.empty()</span><br></pre></td></tr></table></figure></p><h3 id="never-方法"><a href="#never-方法" class="headerlink" title="never() 方法"></a>never() 方法</h3><p>该方法创建一个永远不会发出 Event（也不会终止）的 Observable 序列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let observable = Observable&lt;Int&gt;.never()</span><br></pre></td></tr></table></figure></p><h3 id="error-方法"><a href="#error-方法" class="headerlink" title="error() 方法"></a>error() 方法</h3><p>该方法创建一个不做任何操作，而是直接发送一个错误的 Observable 序列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum MyError: Error &#123;</span><br><span class="line">    case A</span><br><span class="line">    case B</span><br><span class="line">&#125;</span><br><span class="line">         </span><br><span class="line">let observable = Observable&lt;Int&gt;.error(MyError.A)</span><br></pre></td></tr></table></figure></p><h3 id="range-方法"><a href="#range-方法" class="headerlink" title="range() 方法"></a>range() 方法</h3><p>（1）该方法通过指定起始和结束数值，创建一个以这个范围内所有值作为初始值的 Observable 序列。<br><br>（2）下面样例中，两种方法创建的 Observable 序列都是一样的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//使用range()</span><br><span class="line">let observable = Observable.range(start: 1, count: 5)</span><br><span class="line"> </span><br><span class="line">//使用of()</span><br><span class="line">let observable = Observable.of(1, 2, 3 ,4 ,5)</span><br></pre></td></tr></table></figure></p><h3 id="repeatElement-方法"><a href="#repeatElement-方法" class="headerlink" title="repeatElement() 方法"></a>repeatElement() 方法</h3><p>该方法创建一个可以无限发出给定元素的 Event 的 Observable 序列（永不终止）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let observable = Observable.repeatElement(1)</span><br></pre></td></tr></table></figure></p><h3 id="generate-方法"><a href="#generate-方法" class="headerlink" title="generate() 方法"></a>generate() 方法</h3><p>（1）该方法创建一个只有当提供的所有的判断条件都为 true 的时候，才会给出动作的 Observable 序列。<br><br>（2）下面样例中，两种方法创建的 Observable 序列都是一样的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//使用generate()方法</span><br><span class="line">let observable = Observable.generate(</span><br><span class="line">    initialState: 0,</span><br><span class="line">    condition: &#123; $0 &lt;= 10 &#125;,</span><br><span class="line">    iterate: &#123; $0 + 2 &#125;</span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">//使用of()方法</span><br><span class="line">let observable = Observable.of(0 , 2 ,4 ,6 ,8 ,10)</span><br></pre></td></tr></table></figure></p><h3 id="create-方法"><a href="#create-方法" class="headerlink" title="create() 方法"></a>create() 方法</h3><p>（1）该方法接受一个 block 形式的参数，任务是对每一个过来的订阅进行处理。<br><br>（2）下面是一个简单的样例。为方便演示，这里增加了订阅相关代码（关于订阅我之后会详细介绍的）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//这个block有一个回调参数observer就是订阅这个Observable对象的订阅者</span><br><span class="line">//当一个订阅者订阅这个Observable对象的时候，就会将订阅者作为参数传入这个block来执行一些内容</span><br><span class="line">let observable = Observable&lt;String&gt;.create&#123;observer in</span><br><span class="line">    //对订阅者发出了.next事件，且携带了一个数据&quot;hangge.com&quot;</span><br><span class="line">    observer.onNext(&quot;hangge.com&quot;)</span><br><span class="line">    //对订阅者发出了.completed事件</span><br><span class="line">    observer.onCompleted()</span><br><span class="line">    //因为一个订阅行为会有一个Disposable类型的返回值，所以在结尾一定要returen一个Disposable</span><br><span class="line">    return Disposables.create()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//订阅测试</span><br><span class="line">observable.subscribe &#123;</span><br><span class="line">    print($0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="deferred-方法"><a href="#deferred-方法" class="headerlink" title="deferred() 方法"></a>deferred() 方法</h3><p>该个方法相当于是创建一个 Observable 工厂，通过传入一个 block 来执行延迟 Observable 序列创建的行为，而这个 block 里就是真正的实例化序列对象的地方。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//用于标记是奇数、还是偶数</span><br><span class="line">var isOdd = true</span><br><span class="line"> </span><br><span class="line">//使用deferred()方法延迟Observable序列的初始化，通过传入的block来实现Observable序列的初始化并且返回。</span><br><span class="line">let factory : Observable&lt;Int&gt; = Observable.deferred &#123;</span><br><span class="line">     </span><br><span class="line">    //让每次执行这个block时候都会让奇、偶数进行交替</span><br><span class="line">    isOdd = !isOdd</span><br><span class="line">     </span><br><span class="line">    //根据isOdd参数，决定创建并返回的是奇数Observable、还是偶数Observable</span><br><span class="line">    if isOdd &#123;</span><br><span class="line">        return Observable.of(1, 3, 5 ,7)</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        return Observable.of(2, 4, 6, 8)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//第1次订阅测试</span><br><span class="line">factory.subscribe &#123; event in</span><br><span class="line">    print(&quot;\(isOdd)&quot;, event)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//第2次订阅测试</span><br><span class="line">factory.subscribe &#123; event in</span><br><span class="line">    print(&quot;\(isOdd)&quot;, event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="interval-方法"><a href="#interval-方法" class="headerlink" title="interval() 方法"></a>interval() 方法</h3><p>（1）这个方法创建的 Observable 序列每隔一段设定的时间，会发出一个索引数的元素。而且它会一直发送下去。<br><br>（2）下面方法让其每 1 秒发送一次，并且是在主线程（MainScheduler）发送。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let observable = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance)</span><br><span class="line">observable.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="timer-方法"><a href="#timer-方法" class="headerlink" title="timer() 方法"></a>timer() 方法</h3><p>（1）这个方法有两种用法，一种是创建的 Observable 序列在经过设定的一段时间后，产生唯一的一个元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//5秒种后发出唯一的一个元素0</span><br><span class="line">let observable = Observable&lt;Int&gt;.timer(5, scheduler: MainScheduler.instance)</span><br><span class="line">observable.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（2）另一种是创建的 Observable 序列在经过设定的一段时间后，每隔一段时间产生一个元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//延时5秒种后，每隔1秒钟发出一个元素</span><br><span class="line">let observable = Observable&lt;Int&gt;.timer(5, period: 1, scheduler: MainScheduler.instance)</span><br><span class="line">observable.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="订阅-Observable"><a href="#订阅-Observable" class="headerlink" title="订阅 Observable"></a>订阅 Observable</h1><h3 id="第一种用法："><a href="#第一种用法：" class="headerlink" title="第一种用法："></a>第一种用法：</h3><p>（1）我们使用 subscribe() 订阅了一个 Observable 对象，该方法的 block 的回调参数就是被发出的 event 事件，我们将其直接打印出来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let observable = Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">         </span><br><span class="line">observable.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输入结果可以看出</p><ul><li>初始化 Observable 序列时设置的默认值都按顺序通过 .next 事件发送出来。</li><li>当 Observable 序列的初始数据都发送完毕，它还会自动发一个 .completed 事件出来。<br></li></ul><p>（2）如果想要获取到这个事件里的数据，可以通过 event.element 得到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let observable = Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">         </span><br><span class="line">observable.subscribe &#123; event in</span><br><span class="line">    print(event.element)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="第二种用法："><a href="#第二种用法：" class="headerlink" title="第二种用法："></a>第二种用法：</h3><p>（1）RxSwift 还提供了另一个 subscribe 方法，它可以把 event 进行分类：</p><ul><li>通过不同的 block 回调处理不同类型的 event。（其中 onDisposed 表示订阅行为被 dispose 后的回调，这个我后面会说）</li><li>同时会把 event 携带的数据直接解包出来作为参数，方便我们使用。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let observable = Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">         </span><br><span class="line">observable.subscribe(onNext: &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125;, onError: &#123; error in</span><br><span class="line">    print(error)</span><br><span class="line">&#125;, onCompleted: &#123;</span><br><span class="line">    print(&quot;completed&quot;)</span><br><span class="line">&#125;, onDisposed: &#123;</span><br><span class="line">    print(&quot;disposed&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>2）subscribe() 方法的 onNext、onError、onCompleted 和 onDisposed 这四个回调 block 参数都是有默认值的，即它们都是可选的。所以我们也可以只处理 onNext 而不管其他的情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let observable = Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">         </span><br><span class="line">observable.subscribe(onNext: &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h1 id="监听事件的生命周期"><a href="#监听事件的生命周期" class="headerlink" title="监听事件的生命周期"></a>监听事件的生命周期</h1><h3 id="1、-doOn-介绍"><a href="#1、-doOn-介绍" class="headerlink" title="1、 doOn 介绍"></a>1、 doOn 介绍</h3><p>（1）我们可以使用 doOn 方法来监听事件的生命周期，它会在每一次事件发送前被调用。<br><br>（2）同时它和 subscribe 一样，可以通过不同的 block 回调处理不同类型的 event。比如：</p><ul><li>do(onNext:) 方法就是在 subscribe(onNext:) 前调用</li><li>而 do(onCompleted:) 方法则会在 subscribe(onCompleted:) 前面调用。</li></ul><h3 id="使用样例"><a href="#使用样例" class="headerlink" title="使用样例"></a>使用样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">let observable = Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line"> </span><br><span class="line">observable</span><br><span class="line">    .do(onNext: &#123; element in</span><br><span class="line">        print(&quot;Intercepted Next：&quot;, element)</span><br><span class="line">    &#125;, onError: &#123; error in</span><br><span class="line">        print(&quot;Intercepted Error：&quot;, error)</span><br><span class="line">    &#125;, onCompleted: &#123;</span><br><span class="line">        print(&quot;Intercepted Completed&quot;)</span><br><span class="line">    &#125;, onDispose: &#123;</span><br><span class="line">        print(&quot;Intercepted Disposed&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(onNext: &#123; element in</span><br><span class="line">        print(element)</span><br><span class="line">    &#125;, onError: &#123; error in</span><br><span class="line">        print(error)</span><br><span class="line">    &#125;, onCompleted: &#123;</span><br><span class="line">        print(&quot;completed&quot;)</span><br><span class="line">    &#125;, onDisposed: &#123;</span><br><span class="line">        print(&quot;disposed&quot;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h1 id="Observable-的销毁（Dispose）"><a href="#Observable-的销毁（Dispose）" class="headerlink" title="Observable 的销毁（Dispose）"></a>Observable 的销毁（Dispose）</h1><h3 id="1、Observable-从创建到终结流程"><a href="#1、Observable-从创建到终结流程" class="headerlink" title="1、Observable 从创建到终结流程"></a>1、Observable 从创建到终结流程</h3><p>（1）一个 Observable 序列被创建出来后它不会马上就开始被激活从而发出 Event，而是要等到它被某个人订阅了才会激活它。<br><br>（2）而 Observable 序列激活之后要一直等到它发出了 .error 或者 .completed 的 event 后，它才被终结。</p><h3 id="2、dispose-方法"><a href="#2、dispose-方法" class="headerlink" title="2、dispose() 方法"></a>2、dispose() 方法</h3><p>（1）使用该方法我们可以手动取消一个订阅行为。<br><br>（2）如果我们觉得这个订阅结束了不再需要了，就可以调用 dispose() 方法把这个订阅给销毁掉，防止内存泄漏。<br><br>（2）当一个订阅行为被 dispose 了，那么之后 observable 如果再发出 event，这个已经 dispose 的订阅就收不到消息了。下面是一个简单的使用样例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let observable = Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">         </span><br><span class="line">//使用subscription常量存储这个订阅方法</span><br><span class="line">let subscription = observable.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;</span><br><span class="line">         </span><br><span class="line">//调用这个订阅的dispose()方法</span><br><span class="line">subscription.dispose()</span><br></pre></td></tr></table></figure></p><h3 id="3、DisposeBag"><a href="#3、DisposeBag" class="headerlink" title="3、DisposeBag"></a>3、DisposeBag</h3><p>除了 dispose() 方法之外，我们更经常用到的是一个叫 DisposeBag 的对象来管理多个订阅行为的销毁：<br>我们可以把一个 DisposeBag 对象看成一个垃圾袋，把用过的订阅行为都放进去。<br>而这个 DisposeBag 就会在自己快要 dealloc 的时候，对它里面的所有订阅行为都调用 dispose() 方法。<br>下面是一个简单的使用样例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let disposeBag = DisposeBag()</span><br><span class="line">         </span><br><span class="line">//第1个Observable，及其订阅</span><br><span class="line">let observable1 = Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">observable1.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">//第2个Observable，及其订阅</span><br><span class="line">let observable2 = Observable.of(1, 2, 3)</span><br><span class="line">observable2.subscribe &#123; event in</span><br><span class="line">    print(event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure></p><h1 id="观察者（Observer）介绍"><a href="#观察者（Observer）介绍" class="headerlink" title="观察者（Observer）介绍"></a>观察者（Observer）介绍</h1><p>观察者（Observer）的作用就是监听事件，然后对这个事件做出响应。或者说任何响应事件的行为都是观察者。比如：</p><ul><li>当我们点击按钮，弹出一个提示框。那么这个“弹出一个提示框”就是观察者 Observer<void></void></li><li>当我们请求一个远程的 json 数据后，将其打印出来。那么这个“打印 json 数据”就是观察者 Observer<json></json></li></ul><h1 id="直接在-subscribe、bind-方法中创建观察者"><a href="#直接在-subscribe、bind-方法中创建观察者" class="headerlink" title="直接在 subscribe、bind 方法中创建观察者"></a>直接在 subscribe、bind 方法中创建观察者</h1><h3 id="1-在-subscribe-方法中创建"><a href="#1-在-subscribe-方法中创建" class="headerlink" title="1. 在 subscribe 方法中创建"></a>1. 在 subscribe 方法中创建</h3><p>（1）创建观察者最直接的方法就是在 Observable 的 subscribe 方法后面描述当事件发生时，需要如何做出响应。<br><br>（2）比如下面的样例，观察者就是由后面的 onNext，onError，onCompleted 这些闭包构建出来的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let observable = Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">          </span><br><span class="line">observable.subscribe(onNext: &#123; element in</span><br><span class="line">    print(element)</span><br><span class="line">&#125;, onError: &#123; error in</span><br><span class="line">    print(error)</span><br><span class="line">&#125;, onCompleted: &#123;</span><br><span class="line">    print(&quot;completed&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="2-在-bind-方法中创建"><a href="#2-在-bind-方法中创建" class="headerlink" title="2. 在 bind 方法中创建"></a>2. 在 bind 方法中创建</h3><p>下面代码我们创建一个定时生成索引数的 Observable 序列，并将索引数不断显示在 label 标签上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import RxSwift</span><br><span class="line">import RxCocoa</span><br><span class="line"> </span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">     </span><br><span class="line">    @IBOutlet weak var label: UILabel!</span><br><span class="line">     </span><br><span class="line">    let disposeBag = DisposeBag()</span><br><span class="line">     </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">         </span><br><span class="line">        //Observable序列（每隔1秒钟发出一个索引数）</span><br><span class="line">        let observable = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance)</span><br><span class="line"> </span><br><span class="line">        observable</span><br><span class="line">            .map &#123; &quot;当前索引数：\($0 )&quot;&#125;</span><br><span class="line">            .bind &#123; [weak self](text) in</span><br><span class="line">                //收到发出的索引数后显示到label上</span><br><span class="line">                self?.label.text = text</span><br><span class="line">            &#125;</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="使用-AnyObserver-创建观察者"><a href="#使用-AnyObserver-创建观察者" class="headerlink" title="使用 AnyObserver 创建观察者"></a>使用 AnyObserver 创建观察者</h1><p>AnyObserver 可以用来描叙任意一种观察者。</p><h3 id="1、配合-subscribe-方法使用"><a href="#1、配合-subscribe-方法使用" class="headerlink" title="1、配合 subscribe 方法使用"></a>1、配合 subscribe 方法使用</h3><p>比如上面第一个样例我们可以改成如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//观察者</span><br><span class="line">let observer: AnyObserver&lt;String&gt; = AnyObserver &#123; (event) in</span><br><span class="line">    switch event &#123;</span><br><span class="line">    case .next(let data):</span><br><span class="line">        print(data)</span><br><span class="line">    case .error(let error):</span><br><span class="line">        print(error)</span><br><span class="line">    case .completed:</span><br><span class="line">        print(&quot;completed&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">let observable = Observable.of(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">observable.subscribe(observer)</span><br></pre></td></tr></table></figure></p><h3 id="2、配合-bindTo-方法使用"><a href="#2、配合-bindTo-方法使用" class="headerlink" title="2、配合 bindTo 方法使用"></a>2、配合 bindTo 方法使用</h3><p>也可配合 Observable 的数据绑定方法（bindTo）使用。比如上面的第二个样例我可以改成如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import RxSwift</span><br><span class="line">import RxCocoa</span><br><span class="line"> </span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">     </span><br><span class="line">    @IBOutlet weak var label: UILabel!</span><br><span class="line">     </span><br><span class="line">    let disposeBag = DisposeBag()</span><br><span class="line">     </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">         </span><br><span class="line">        //观察者</span><br><span class="line">        let observer: AnyObserver&lt;String&gt; = AnyObserver &#123; [weak self] (event) in</span><br><span class="line">            switch event &#123;</span><br><span class="line">            case .next(let text):</span><br><span class="line">                //收到发出的索引数后显示到label上</span><br><span class="line">                self?.label.text = text</span><br><span class="line">            default:</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        //Observable序列（每隔1秒钟发出一个索引数）</span><br><span class="line">        let observable = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance)</span><br><span class="line">        observable</span><br><span class="line">            .map &#123; &quot;当前索引数：\($0 )&quot;&#125;</span><br><span class="line">            .bind(to: observer)</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="使用-Binder-创建观察者"><a href="#使用-Binder-创建观察者" class="headerlink" title="使用 Binder 创建观察者"></a>使用 Binder 创建观察者</h1><h3 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h3><p>（1）相较于 AnyObserver 的大而全，Binder 更专注于特定的场景。Binder 主要有以下两个特征：</p><ul><li>不会处理错误事件</li><li>确保绑定都是在给定 Scheduler 上执行（默认 MainScheduler）</li></ul><p>（2）一旦产生错误事件，在调试环境下将执行 fatalError，在发布环境下将打印错误信息。</p><h3 id="使用样例-1"><a href="#使用样例-1" class="headerlink" title="使用样例"></a>使用样例</h3><p>（1）在上面序列数显示样例中，label 标签的文字显示就是一个典型的 UI 观察者。它在响应事件时，只会处理 next 事件，而且更新 UI 的操作需要在主线程上执行。那么这种情况下更好的方案就是使用 Binder。<br><br>（2）上面的样例我们改用 Binder 会简单许多：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import RxSwift</span><br><span class="line">import RxCocoa</span><br><span class="line"> </span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">     </span><br><span class="line">    @IBOutlet weak var label: UILabel!</span><br><span class="line">     </span><br><span class="line">    let disposeBag = DisposeBag()</span><br><span class="line">     </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">                 </span><br><span class="line">        //观察者</span><br><span class="line">        let observer: Binder&lt;String&gt; = Binder(label) &#123; (view, text) in</span><br><span class="line">            //收到发出的索引数后显示到label上</span><br><span class="line">            view.text = text</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        //Observable序列（每隔1秒钟发出一个索引数）</span><br><span class="line">        let observable = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance)</span><br><span class="line">        observable</span><br><span class="line">            .map &#123; &quot;当前索引数：\($0 )&quot;&#125;</span><br><span class="line">            .bind(to: observer)</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="附：Binder-在-RxCocoa-中的应用"><a href="#附：Binder-在-RxCocoa-中的应用" class="headerlink" title="附：Binder 在 RxCocoa 中的应用"></a>附：Binder 在 RxCocoa 中的应用</h3><p>（1）其实 RxCocoa 在对许多 UI 控件进行扩展时，就利用 Binder 将控件属性变成观查者，比如 UIControl+Rx.swift 中的 isEnabled 属性便是一个 observer ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import RxSwift</span><br><span class="line">import UIKit</span><br><span class="line"> </span><br><span class="line">extension Reactive where Base: UIControl &#123;</span><br><span class="line">     </span><br><span class="line">    /// Bindable sink for `enabled` property.</span><br><span class="line">    public var isEnabled: Binder&lt;Bool&gt; &#123;</span><br><span class="line">        return Binder(self.base) &#123; control, value in</span><br><span class="line">            control.isEnabled = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（2）因此我们可以将序列直接绑定到它上面。比如下面样例，button 会在可用、不可用这两种状态间交替变换（每隔一秒）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//Observable序列（每隔1秒钟发出一个索引数）</span><br><span class="line">let observable = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance)</span><br><span class="line">observable</span><br><span class="line">    .map &#123; $0 % 2 == 0 &#125;</span><br><span class="line">    .bind(to: button.rx.isEnabled)</span><br><span class="line">    .disposed(by: disposeBag)</span><br></pre></td></tr></table></figure></p><h1 id="自定义可绑定属性"><a href="#自定义可绑定属性" class="headerlink" title="自定义可绑定属性"></a>自定义可绑定属性</h1><p>有时我们想让 UI 控件创建出来后默认就有一些观察者，而不必每次都为它们单独去创建观察者。比如我们想要让所有的 UIlabel 都有个 fontSize 可绑定属性，它会根据事件值自动改变标签的字体大小。</p><h3 id="方式一：通过对-UI-类进行扩展"><a href="#方式一：通过对-UI-类进行扩展" class="headerlink" title="方式一：通过对 UI 类进行扩展"></a>方式一：通过对 UI 类进行扩展</h3><p>这里我们通过对 UILabel 进行扩展，增加了一个 fontSize 可绑定属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import RxSwift</span><br><span class="line">import RxCocoa</span><br><span class="line"> </span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">     </span><br><span class="line">    @IBOutlet weak var label: UILabel!</span><br><span class="line">     </span><br><span class="line">    let disposeBag = DisposeBag()</span><br><span class="line">     </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">         </span><br><span class="line">        //Observable序列（每隔0.5秒钟发出一个索引数）</span><br><span class="line">        let observable = Observable&lt;Int&gt;.interval(0.5, scheduler: MainScheduler.instance)</span><br><span class="line">        observable</span><br><span class="line">            .map &#123; CGFloat($0) &#125;</span><br><span class="line">            .bind(to: label.fontSize) //根据索引数不断变放大字体</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">extension UILabel &#123;</span><br><span class="line">    public var fontSize: Binder&lt;CGFloat&gt; &#123;</span><br><span class="line">        return Binder(self) &#123; label, fontSize in</span><br><span class="line">            label.font = UIFont.systemFont(ofSize: fontSize)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="方式二：通过对-Reactive-类进行扩展"><a href="#方式二：通过对-Reactive-类进行扩展" class="headerlink" title="方式二：通过对 Reactive 类进行扩展"></a>方式二：通过对 Reactive 类进行扩展</h3><p>既然使用了 RxSwift，那么更规范的写法应该是对 Reactive 进行扩展。这里同样是给 UILabel 增加了一个 fontSize 可绑定属性。<br><br>（注意：这种方式下，我们绑定属性时要写成 label.rx.fontSize）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import RxSwift</span><br><span class="line">import RxCocoa</span><br><span class="line"> </span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">     </span><br><span class="line">    @IBOutlet weak var label: UILabel!</span><br><span class="line">     </span><br><span class="line">    let disposeBag = DisposeBag()</span><br><span class="line">     </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">         </span><br><span class="line">        //Observable序列（每隔0.5秒钟发出一个索引数）</span><br><span class="line">        let observable = Observable&lt;Int&gt;.interval(0.5, scheduler: MainScheduler.instance)</span><br><span class="line">        observable</span><br><span class="line">            .map &#123; CGFloat($0) &#125;</span><br><span class="line">            .bind(to: label.rx.fontSize) //根据索引数不断变放大字体</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">extension Reactive where Base: UILabel &#123;</span><br><span class="line">    public var fontSize: Binder&lt;CGFloat&gt; &#123;</span><br><span class="line">        return Binder(self.base) &#123; label, fontSize in</span><br><span class="line">            label.font = UIFont.systemFont(ofSize: fontSize)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="RxSwift-自带的可绑定属性（UI-观察者）"><a href="#RxSwift-自带的可绑定属性（UI-观察者）" class="headerlink" title="RxSwift 自带的可绑定属性（UI 观察者）"></a>RxSwift 自带的可绑定属性（UI 观察者）</h1><p>（1）其实 RxSwift 已经为我们提供许多常用的可绑定属性。比如 UILabel 就有 text 和 attributedText 这两个可绑定属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import RxSwift</span><br><span class="line">import UIKit</span><br><span class="line"> </span><br><span class="line">extension Reactive where Base: UILabel &#123;</span><br><span class="line">     </span><br><span class="line">    /// Bindable sink for `text` property.</span><br><span class="line">    public var text: Binder&lt;String?&gt; &#123;</span><br><span class="line">        return Binder(self.base) &#123; label, text in</span><br><span class="line">            label.text = text</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    /// Bindable sink for `attributedText` property.</span><br><span class="line">    public var attributedText: Binder&lt;NSAttributedString?&gt; &#123;</span><br><span class="line">        return Binder(self.base) &#123; label, text in</span><br><span class="line">            label.attributedText = text</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（2）那么上文那个定时显示索引数的样例，我们其实不需要自定义 UI 观察者，直接使用 RxSwift 提供的绑定属性即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import RxSwift</span><br><span class="line">import RxCocoa</span><br><span class="line"> </span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">     </span><br><span class="line">    @IBOutlet weak var label: UILabel!</span><br><span class="line">     </span><br><span class="line">    let disposeBag = DisposeBag()</span><br><span class="line">     </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">         </span><br><span class="line">        //Observable序列（每隔1秒钟发出一个索引数）</span><br><span class="line">        let observable = Observable&lt;Int&gt;.interval(1, scheduler: MainScheduler.instance)</span><br><span class="line">        observable</span><br><span class="line">            .map &#123; &quot;当前索引数：\($0 )&quot;&#125;</span><br><span class="line">            .bind(to: label.rx.text) //收到发出的索引数后显示到label上</span><br><span class="line">            .disposed(by: disposeBag)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Subjects-介绍"><a href="#Subjects-介绍" class="headerlink" title="Subjects 介绍"></a>Subjects 介绍</h1><h3 id="Subjects-基本介绍"><a href="#Subjects-基本介绍" class="headerlink" title="Subjects 基本介绍"></a>Subjects 基本介绍</h3><p>（1）Subjects 既是订阅者，也是 Observable：</p><ul><li>说它是订阅者，是因为它能够动态地接收新的值。</li><li>说它又是一个 Observable，是因为当 Subjects 有了新的值之后，就会通过 Event 将新值发出给他的所有订阅者。</li></ul><p>（2）一共有四种 Subjects，分别为：PublishSubject、BehaviorSubject、ReplaySubject、Variable。他们之间既有各自的特点，也有相同之处：</p><ul><li>首先他们都是 Observable，他们的订阅者都能收到他们发出的新的 Event。</li><li>直到 Subject 发出 .complete 或者 .error 的 Event 后，该 Subject 便终结了，同时它也就不会再发出 .next 事件。</li><li>对于那些在 Subject 终结后再订阅他的订阅者，也能收到 subject 发出的一条 .complete 或 .error 的 event，告诉这个新的订阅者它已经终结了。</li><li>他们之间最大的区别只是在于：当一个新的订阅者刚订阅它的时候，能不能收到 Subject 以前发出过的旧 Event，如果能的话又能收到多少个。</li></ul><p>（3）Subject 常用的几个方法：</p><ul><li>onNext(:)：是 on(.next(:)) 的简便写法。该方法相当于 subject 接收到一个 .next 事件。</li><li>onError(:)：是 on(.error(:)) 的简便写法。该方法相当于 subject 接收到一个 .error 事件。</li><li>onCompleted()：是 on(.completed) 的简便写法。该方法相当于 subject 接收到一个 .completed 事件。</li></ul><h3 id="PublishSubject"><a href="#PublishSubject" class="headerlink" title="PublishSubject"></a>PublishSubject</h3><p>（1）基本介绍</p><ul><li>PublishSubject 是最普通的 Subject，它不需要初始值就能创建。</li><li>PublishSubject 的订阅者从他们开始订阅的时间点起，可以收到订阅后 Subject 发出的新 Event，而不会收到他们在订阅前已发出的 Event。<br>（2）时序图</li><li>最上面一条是 BehaviorSubject。<br>-下面两条分别表示两个新的订阅，它们订阅的时间点不同，可以发现 BehaviorSubject 的订阅者一开始就能收到 BehaviorSubjects 之前发出的一个 Event。<br><img src="https://upload-images.jianshu.io/upload_images/3334769-516513ae6b34d5b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="时序图"><br><br>（3）使用样例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">let disposeBag = DisposeBag()</span><br><span class="line"> </span><br><span class="line">//创建一个BehaviorSubject</span><br><span class="line">let subject = BehaviorSubject(value: &quot;111&quot;)</span><br><span class="line"> </span><br><span class="line">//第1次订阅subject</span><br><span class="line">subject.subscribe &#123; event in</span><br><span class="line">    print(&quot;第1次订阅：&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">//发送next事件</span><br><span class="line">subject.onNext(&quot;222&quot;)</span><br><span class="line"> </span><br><span class="line">//发送error事件</span><br><span class="line">subject.onError(NSError(domain: &quot;local&quot;, code: 0, userInfo: nil))</span><br><span class="line"> </span><br><span class="line">//第2次订阅subject</span><br><span class="line">subject.subscribe &#123; event in</span><br><span class="line">    print(&quot;第2次订阅：&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure></li></ul><h3 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h3><p>（1）基本介绍</p><ul><li>ReplaySubject 在创建时候需要设置一个 bufferSize，表示它对于它发送过的 event 的缓存个数。</li><li>比如一个 ReplaySubject 的 bufferSize 设置为 2，它发出了 3 个 .next 的 event，那么它会将后两个（最近的两个）event 给缓存起来。此时如果有一个 subscriber 订阅了这个 ReplaySubject，那么这个 subscriber 就会立即收到前面缓存的两个 .next 的 event。</li><li>如果一个 subscriber 订阅已经结束的 ReplaySubject，除了会收到缓存的 .next 的 event 外，还会收到那个终结的 .error 或者 .complete 的 event。</li></ul><p>（2）时序图</p><ul><li>最上面一条是 ReplaySubject（bufferSize 设为为 2）。</li><li>下面两条分别表示两个新的订阅，它们订阅的时间点不同。可以发现 ReplaySubject 的订阅者一开始就能收到 ReplaySubject 之前发出的两个 Event（如果有的话）。<br><img src="https://upload-images.jianshu.io/upload_images/3334769-4dec2ddcf714e9ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="时序图"><br><br>（3）使用样例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">let disposeBag = DisposeBag()</span><br><span class="line"> </span><br><span class="line">//创建一个bufferSize为2的ReplaySubject</span><br><span class="line">let subject = ReplaySubject&lt;String&gt;.create(bufferSize: 2)</span><br><span class="line"> </span><br><span class="line">//连续发送3个next事件</span><br><span class="line">subject.onNext(&quot;111&quot;)</span><br><span class="line">subject.onNext(&quot;222&quot;)</span><br><span class="line">subject.onNext(&quot;333&quot;)</span><br><span class="line"> </span><br><span class="line">//第1次订阅subject</span><br><span class="line">subject.subscribe &#123; event in</span><br><span class="line">    print(&quot;第1次订阅：&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">//再发送1个next事件</span><br><span class="line">subject.onNext(&quot;444&quot;)</span><br><span class="line"> </span><br><span class="line">//第2次订阅subject</span><br><span class="line">subject.subscribe &#123; event in</span><br><span class="line">    print(&quot;第2次订阅：&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br><span class="line"> </span><br><span class="line">//让subject结束</span><br><span class="line">subject.onCompleted()</span><br><span class="line"> </span><br><span class="line">//第3次订阅subject</span><br><span class="line">subject.subscribe &#123; event in</span><br><span class="line">    print(&quot;第3次订阅：&quot;, event)</span><br><span class="line">&#125;.disposed(by: disposeBag)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h3><p>（注意：由于 Variable 在之后版本中将被废弃，建议使用 Varible 的地方都改用下面介绍的 BehaviorRelay 作为替代。）<br><br>（1）基本介绍</p><ul><li>Variable 其实就是对 BehaviorSubject 的封装，所以它也必须要通过一个默认的初始值进行创建。</li><li>Variable 具有 BehaviorSubject 的功能，能够向它的订阅者发出上一个 event 以及之后新创建的 event。</li><li>不同的是，Variable 还把会把当前发出的值保存为自己的状态。同时它会在销毁时自动发送 .complete 的 event，不需要也不能手动给 Variables 发送 completed 或者 error 事件来结束它。</li><li>简单地说就是 Variable 有一个 value 属性，我们改变这个 value 属性的值就相当于调用一般 Subjects 的 onNext() 方法，而这个最新的 onNext() 的值就被保存在 value 属性里了，直到我们再次修改它。<blockquote><p>注意：<br><br>Variables 本身没有 subscribe() 方法，但是所有 Subjects 都有一个 asObservable() 方法。我们可以使用这个方法返回这个 Variable 的 Observable 类型，拿到这个 Observable 类型我们就能订阅它了。</p></blockquote></li></ul><p>（2）使用样例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import RxSwift</span><br><span class="line">import RxCocoa</span><br><span class="line"> </span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">     </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line"> </span><br><span class="line">        let disposeBag = DisposeBag()</span><br><span class="line">         </span><br><span class="line">        //创建一个初始值为111的Variable</span><br><span class="line">        let variable = Variable(&quot;111&quot;)</span><br><span class="line">         </span><br><span class="line">        //修改value值</span><br><span class="line">        variable.value = &quot;222&quot;</span><br><span class="line">         </span><br><span class="line">        //第1次订阅</span><br><span class="line">        variable.asObservable().subscribe &#123;</span><br><span class="line">            print(&quot;第1次订阅：&quot;, $0)</span><br><span class="line">        &#125;.disposed(by: disposeBag)</span><br><span class="line">         </span><br><span class="line">        //修改value值</span><br><span class="line">        variable.value = &quot;333&quot;</span><br><span class="line">         </span><br><span class="line">        //第2次订阅</span><br><span class="line">        variable.asObservable().subscribe &#123;</span><br><span class="line">            print(&quot;第2次订阅：&quot;, $0)</span><br><span class="line">        &#125;.disposed(by: disposeBag)</span><br><span class="line">         </span><br><span class="line">        //修改value值</span><br><span class="line">        variable.value = &quot;444&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="BehaviorRelay"><a href="#BehaviorRelay" class="headerlink" title="BehaviorRelay"></a>BehaviorRelay</h3><p>（1）基本介绍</p><ul><li>BehaviorRelay 是作为 Variable 的替代者出现的。它的本质其实也是对 BehaviorSubject 的封装，所以它也必须要通过一个默认的初始值进行创建。</li><li>BehaviorRelay 具有 BehaviorSubject 的功能，能够向它的订阅者发出上一个 event 以及之后新创建的 event。</li><li>与 BehaviorSubject 不同的是，不需要也不能手动给 BehaviorReply 发送 completed 或者 error 事件来结束它（BehaviorRelay 会在销毁时也不会自动发送 .complete 的 event）。</li><li>BehaviorRelay 有一个 value 属性，我们通过这个属性可以获取最新值。而通过它的 accept() 方法可以对值进行修改。</li></ul><p>（2）上面的 Variable 样例我们可以改用成 BehaviorRelay，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import RxSwift</span><br><span class="line">import RxCocoa</span><br><span class="line"> </span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">     </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">         </span><br><span class="line">        let disposeBag = DisposeBag()</span><br><span class="line">         </span><br><span class="line">        //创建一个初始值为111的BehaviorRelay</span><br><span class="line">        let subject = BehaviorRelay&lt;String&gt;(value: &quot;111&quot;)</span><br><span class="line">         </span><br><span class="line">        //修改value值</span><br><span class="line">        subject.accept(&quot;222&quot;)</span><br><span class="line">         </span><br><span class="line">        //第1次订阅</span><br><span class="line">        subject.asObservable().subscribe &#123;</span><br><span class="line">            print(&quot;第1次订阅：&quot;, $0)</span><br><span class="line">            &#125;.disposed(by: disposeBag)</span><br><span class="line">         </span><br><span class="line">        //修改value值</span><br><span class="line">        subject.accept(&quot;333&quot;)</span><br><span class="line">         </span><br><span class="line">        //第2次订阅</span><br><span class="line">        subject.asObservable().subscribe &#123;</span><br><span class="line">            print(&quot;第2次订阅：&quot;, $0)</span><br><span class="line">            &#125;.disposed(by: disposeBag)</span><br><span class="line">         </span><br><span class="line">        //修改value值</span><br><span class="line">        subject.accept(&quot;444&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>（3）如果想将新值合并到原值上，可以通过 accept() 方法与 value 属性配合来实现。（这个常用在表格上拉加载功能上，BehaviorRelay 用来保存所有加载到的数据）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">import RxSwift</span><br><span class="line">import RxCocoa</span><br><span class="line"> </span><br><span class="line">class ViewController: UIViewController &#123;</span><br><span class="line">     </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">         </span><br><span class="line">        let disposeBag = DisposeBag()</span><br><span class="line">         </span><br><span class="line">        //创建一个初始值为包含一个元素的数组的BehaviorRelay</span><br><span class="line">        let subject = BehaviorRelay&lt;[String]&gt;(value: [&quot;1&quot;])</span><br><span class="line">         </span><br><span class="line">        //修改value值</span><br><span class="line">        subject.accept(subject.value + [&quot;2&quot;, &quot;3&quot;])</span><br><span class="line">         </span><br><span class="line">        //第1次订阅</span><br><span class="line">        subject.asObservable().subscribe &#123;</span><br><span class="line">            print(&quot;第1次订阅：&quot;, $0)</span><br><span class="line">            &#125;.disposed(by: disposeBag)</span><br><span class="line">         </span><br><span class="line">        //修改value值</span><br><span class="line">        subject.accept(subject.value + [&quot;4&quot;, &quot;5&quot;])</span><br><span class="line">         </span><br><span class="line">        //第2次订阅</span><br><span class="line">        subject.asObservable().subscribe &#123;</span><br><span class="line">            print(&quot;第2次订阅：&quot;, $0)</span><br><span class="line">            &#125;.disposed(by: disposeBag)</span><br><span class="line">         </span><br><span class="line">        //修改value值</span><br><span class="line">        subject.accept(subject.value + [&quot;6&quot;, &quot;7&quot;])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Observable-介绍&quot;&gt;&lt;a href=&quot;#Observable-介绍&quot; class=&quot;headerlink&quot; title=&quot;Observable 介绍&quot;&gt;&lt;/a&gt;Observable 介绍&lt;/h1&gt;&lt;h2 id=&quot;Observable&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CALayer的属性和使用(未完结)</title>
    <link href="https://wudan-ios.github.io/2018/11/23/CALayer%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%BF%E7%94%A8(%E6%9C%AA%E5%AE%8C%E7%BB%93)/"/>
    <id>https://wudan-ios.github.io/2018/11/23/CALayer的属性和使用(未完结)/</id>
    <published>2018-11-23T08:19:32.074Z</published>
    <updated>2018-11-23T08:24:37.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、CALayer的常用属性"><a href="#一、CALayer的常用属性" class="headerlink" title="一、CALayer的常用属性"></a>一、CALayer的常用属性</h2><blockquote><ul><li><p>1、@propertyCGPoint position;<br>图层中心点的位置，类似与UIView的center；用来设置CALayer在父层中的位置；以父层的左上角为原点（0，0）</p></li><li><p>2、 @property CGPoint anchorPoint;<br>称『定位点』、『锚点』，该描述是相对于x、y位置比例而言的默认在图像中心点（0.5、0.5）的位置；决定着CALayer身上的哪个点会再position属性所指的位置，以自己的左上角为原点（0，0）；它的x、y取值范围都是0~1</p></li><li><p>3、 @property(nullable) CGColorRef backgroundColor<br>图层背景颜色</p></li><li><p>4、 @property(nullable) CGColorRef borderColor<br>图层边框颜色</p></li><li><p>5、 @property CGFloat borderWidth<br>图层边框宽度</p></li><li><p>6、 @property CGRect bounds<br>图层大小</p></li><li><p>7、 @property(nullable, strong) id contents<br>图层显示内容，例如可以将图片作为图层内容显示</p></li><li><p>8、 @property CGRect contentsRect<br>图层显示内容的大小和位置</p></li><li><p>9、 @property CGFloat cornerRadius<br>圆角半径</p></li><li><p>10、 @property(getter=isDoubleSided) BOOL doubleSided<br>图层背景是否显示，默认是YES</p></li><li><p>11、 @property CGRect frame<br>图层大小和位置，不支持隐式动画，所以CALyaer中很少使用frame，通常使用bound和position代替</p></li><li><p>12、 @property(getter=isHidden) BOOL hidden<br>是否隐藏</p></li><li><p>13、 @property(nullable, strong) CALayer *mask<br>图层蒙版</p></li><li><p>14、 @property BOOL masksToBounds<br>子图层是否剪切图层边界，默认是NO</p></li><li><p>15、 @property float opacit;<br>图层透明度，类似与UIView的alpha</p></li><li><p>16、 @property(nullable) CGColorRef shadowColor<br>阴影颜色</p></li><li><p>17、 @property CGSize shadowOffset<br>阴影偏移量</p></li><li><p>18、 @property float shadowOpacity<br>阴影透明度，注意默认为0，如果设置阴影必须设置此属性</p></li><li><p>19、 @property(nullable) CGPathRef shadowPath<br>阴影形状</p></li><li><p>20、 @property CGFloat shadowRadius<br>阴影模糊半径</p></li><li><p>21、 @property(nullable, copy) NSArray</p></li></ul></blockquote><h2 id="二、CALayer不常用属性"><a href="#二、CALayer不常用属性" class="headerlink" title="二、CALayer不常用属性"></a>二、CALayer不常用属性</h2><blockquote><ul><li><p>1、 @property CGFloat zPosition<br>图层中心点在z轴中的位置</p></li><li><p>2、 @property CGFloat anchorPointZ<br>图层在z轴中的锚点；</p></li><li><p>3、 - (CGAffineTransform)affineTransform</p></li><li><p>4、- (void)setAffineTransform:(CGAffineTransform)m<br>以上属性为图层形变；该属性值指定一个CGAffineTransform对象，该对象代表对CALayer执行X、Y两个维度（也就是平面）上的旋转、缩放、位移、斜切、镜像等变换矩阵</p></li><li><p>5、 @property(nullable, readonly) CALayer *superlayer<br>图层的父图层</p></li></ul></blockquote><h2 id="三、CALayer图层操作"><a href="#三、CALayer图层操作" class="headerlink" title="三、CALayer图层操作"></a>三、CALayer图层操作</h2><blockquote><ul><li><p>1、 - (void)addSublayer:(CALayer *)layer<br>添加子图层</p></li><li><p>2、 - (void)removeFromSuperlayer<br>将自己从父图层中移除</p></li><li><p>3、 - (void)insertSublayer:(CALayer *)layer atIndex:(unsigned)idx<br>在自己子图层数组中的第idx位置添加图层</p></li><li><p>4、 - (void)insertSublayer:(CALayer )layer below:(nullable CALayer )sibling<br>将图层layer添加在子图层sibling的下面</p></li><li><p>5、 - (void)insertSublayer:(CALayer )layer above:(nullable CALayer )sibling<br>将图层layer添加在子图层sibling的上面</p></li><li><p>6、 - (void)replaceSublayer:(CALayer )layer with:(CALayer )layer2<br>将图层layer替换layer2；</p></li></ul></blockquote><h2 id="四、CALayer动画操作"><a href="#四、CALayer动画操作" class="headerlink" title="四、CALayer动画操作"></a>四、CALayer动画操作</h2><blockquote><ul><li><p>1、 - (void)addAnimation:(CAAnimation )anim forKey:(nullable NSString )key<br>图层添加某一属性的动画</p></li><li><p>2、 - (nullable NSArray&lt; NSString &gt; )animationKeys<br>获取所有动画的属性</p></li><li><p>3、 - (nullable CAAnimation )animationForKey:(NSString )key<br>获取某一属性的动画</p></li><li><p>4、 - (void)removeAnimationForKey:(NSString *)key<br>移除某一属性动画</p></li><li><p>5、 - (void)removeAllAnimations<br>移除所有动画</p></li></ul></blockquote><h2 id="五、CALayer子类其他说明"><a href="#五、CALayer子类其他说明" class="headerlink" title="五、CALayer子类其他说明"></a>五、CALayer子类其他说明</h2><table><thead><tr><th>子类名称</th><th>用途</th></tr></thead><tbody><tr><td>CAEmitterLayer</td><td>发射器层，用来控制粒子效果</td></tr><tr><td>CAGradientLayer</td><td>梯度层，颜色渐变</td></tr><tr><td>CAEAGLayer</td><td>用OpenGL ES绘制的层</td></tr><tr><td>CAReplicationLayer</td><td>用来自动复制sublayer</td></tr><tr><td>CAShapeLayer</td><td>绘制立体的贝塞尔曲线</td></tr><tr><td>CAScrollLayer</td><td>用来管理可滑动的区域</td></tr><tr><td>CATextLayer</td><td>可以绘制AttributeString</td></tr><tr><td>CATiledLayer</td><td>用来管理一副可以被分割的大图</td></tr><tr><td>CATransformLayer</td><td>用来渲染3D layer的层次结构</td></tr></tbody></table><h3 id="1-CAShapeLayer"><a href="#1-CAShapeLayer" class="headerlink" title="1. CAShapeLayer"></a>1. CAShapeLayer</h3><p>CAShapeLayer属于QuartzCore框架，继承自CALayer。CAShapeLayer是在坐标系内绘制贝塞尔曲线的，通过绘制贝塞尔曲线，设置shape(形状)的path(路径)，从而绘制各种各样的图形以及不规则图形。因此，使用CAShapeLayer需要与UIBezierPath一起使用。<br>UIBezierPath类允许你在自定义的 View 中绘制和渲染由直线和曲线组成的路径.。你可以在初始化的时候直接为你的UIBezierPath指定一个几何图形。<br>通俗点就是UIBezierPath用来指定绘制图形路径，而CAShapeLayer就是根据路径来绘图的。</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><blockquote><ul><li><p>1、@property(nullable) CGPathRef path;  呈现的形状的路径</p></li><li><p>2、@property(nullable) CGColorRef fillColor;填充路径的颜色  </p></li><li><p>3、@property(copy) CAShapeLayerFillRule fillRule;   当在填充颜色的时候则就需要这种填充规则，值有两种，非零和奇偶数，但默认是非零值。</p></li><li><p>4、@property(nullable) CGColorRef strokeColor;设置描边色，默认无色。</p></li><li><p>5、@property CGFloat strokeStart; 绘制边线轮廓路径的子区域。该值必须在[0,1]范围，0代表路径的开始，1代表路径的结束。 默认为0</p></li><li><p>6、@property CGFloat strokeEnd; 默认为1</p></li><li><p>7、@property CGFloat lineWidth; 线的宽度 默认为1</p></li><li><p>8、@property CGFloat miterLimit;最大斜接长度。斜接长度指的是在两条线交汇处和外交之间的距离。只有lineJoin属性为kCALineJoinMiter时miterLimit才有效。边角的角度越小，斜接长度就会越大。为了避免斜接长度过长，我们可以使用miterLimit属性。如果斜接长度超过miterLimit的值，边角会以lineJoin的“bevel”即kCALineJoinBevel类型来显示。</p></li><li><p>9、@property(copy) CAShapeLayerLineCap lineCap; 线端点类型，值有三个类型，分别为kCALineCapButt 、kCALineCapRound 、kCALineCapSquare，默认值为Butt；</p></li><li><p>10、@property(copy) CAShapeLayerLineJoin lineJoin;lineJoin为线连接类型，其值也有三个类型，分别为kCALineJoinMiter、kCALineJoinRound、kCALineJoinBevel，默认值是Miter。</p></li><li><p>11、@property CGFloat lineDashPhase;为线型模版的起始位置；lineDashPattern为线性模版，这是一个NSNumber的数组，索引从1开始记，奇数位数值表示实线长度，偶数位数值表示空白长度。<br>注：fillColor与strokeColor都是在有UIBezierPath参数配置的情况下才能发生作用</p></li><li><p>12、@property(nullable, copy) NSArray<nsnumber *=""> *lineDashPattern;</nsnumber></p></li></ul></blockquote><h3 id="2-CAReplicationLayer"><a href="#2-CAReplicationLayer" class="headerlink" title="2.CAReplicationLayer"></a>2.CAReplicationLayer</h3><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><blockquote><ul><li><p>1、@property NSInteger instanceCount;  复制subLayer个数，默认为1</p></li><li><p>2、@property BOOL preservesDepth; 是否将3D例子系统平面化到一个图层（默认值）或者可以在3D空间中混合其他的图层</p></li><li><p>3、@property CFTimeInterval instanceDelay; 设置复制子层的延迟动画时长</p></li><li><p>4、@property CATransform3D instanceTransform; 设置复制子层的相对位置</p></li><li><p>5、@property(nullable) CGColorRef instanceColor; 子层颜色，会和原生子层背景色冲突，因此二者选其一设置</p></li><li><p>6、@property float instanceRedOffset;<br>设置每个复制图层相对上一个复制图层的红色偏移量</p></li><li>7、@property float instanceRedOffset;<br>设置每个复制图层相对上一个复制图层的绿色偏移量</li><li><p>8、@property float instanceBlueOffset;设置每个复制图层相对上一个复制图层的蓝色偏移量</p></li><li><p>9、@property float instanceAlphaOffset;设置每个复制图层相对上一个复制图层的透明度偏移量</p></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、CALayer的常用属性&quot;&gt;&lt;a href=&quot;#一、CALayer的常用属性&quot; class=&quot;headerlink&quot; title=&quot;一、CALayer的常用属性&quot;&gt;&lt;/a&gt;一、CALayer的常用属性&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CAAniamtion的属性和使用</title>
    <link href="https://wudan-ios.github.io/2018/11/23/CAAniamtion%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://wudan-ios.github.io/2018/11/23/CAAniamtion的属性和使用/</id>
    <published>2018-11-23T08:19:24.819Z</published>
    <updated>2018-11-23T08:19:25.852Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CAAnimation"><a href="#CAAnimation" class="headerlink" title="CAAnimation"></a>CAAnimation</h2><p>CAAnimation是所有动画对象的父类，负责控制动画的持续时间和速度，是个抽象类，不能直接使用，应该使用它具体的子类。</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><blockquote><ul><li><p>duration：动画的持续时间</p></li><li><p>repeatCount：动画的重复次数</p></li><li><p>repeatDuration：动画的重复时间</p></li><li><p>removedOnCompletion：默认为YES，代表动画执行完毕后就从图层上移除，图形会恢复到动画执行前的状态。如果想让图层保持显示动画执行后的状态，那就设置为NO，不过还要设置fillMode为kCAFillModeForwards</p></li><li><p>fillMode：决定当前对象在非active时间段的行为。比如动画开始之前,动画结束之后</p></li><li><p>beginTime：可以用来设置动画延迟执行时间，若想延迟2s，就设置为CACurrentMediaTime()+2，CACurrentMediaTime()为图层的当前时间</p></li><li><p>timingFunction：速度控制函数，控制动画运行的节奏</p></li><li><p>delegate：动画代理</p></li></ul></blockquote><h2 id="子类"><a href="#子类" class="headerlink" title="子类"></a>子类</h2><h3 id="1-CAPropertyAnimation"><a href="#1-CAPropertyAnimation" class="headerlink" title="1.CAPropertyAnimation"></a>1.CAPropertyAnimation</h3><p>是CAAnimation的子类，也是个抽象类，要想创建动画对象，应该使用它的两个子类：CABasicAnimation和CAKeyframeAnimation。</p><blockquote><ul><li>keyPath 通过指定CALayer的一个属性名称为keyPath(NSString类型)，并且对CALayer的这个属性的值进行修改，达到相应的动画效果。比如，指定@”position”为keyPath，就修改CALayer的position属性的值，以达到平移的动画效果。</li></ul></blockquote><h3 id="2-CABasicAnimation"><a href="#2-CABasicAnimation" class="headerlink" title="2.CABasicAnimation"></a>2.CABasicAnimation</h3><blockquote><ul><li><p>fromValue：keyPath相应属性的初始值。</p></li><li><p>toValue：keyPath相应属性的结束值。</p></li><li><p>随着动画的进行，在长度为duration的持续时间内，keyPath相应属性的值从fromValue渐渐地变为toValue。</p></li><li>如果fillMode=kCAFillModeForwards和removedOnComletion=NO，那么在动画执行完毕后，图层会保持显示动画执行后的状态。但在实质上，图层的属性值还是动画执行前的初始值，并没有真正被改变。比如，CALayer的position初始值为(0,0)，CABasicAnimation的fromValue为(10,10)，toValue为(100,100)，虽然动画执行完毕后图层保持在(100,100)这个位置，实质上图层的position还是为(0,0)。</li></ul></blockquote><h3 id="3-CAKeyframeAnimation"><a href="#3-CAKeyframeAnimation" class="headerlink" title="3.CAKeyframeAnimation"></a>3.CAKeyframeAnimation</h3><p>CApropertyAnimation的子类，跟CABasicAnimation的区别是：CABasicAnimation只能从一个数值(fromValue)变到另一个数值(toValue)，而CAKeyframeAnimation会使用一个NSArray保存这些数值。</p><blockquote><ul><li><p>values：就是上述的NSArray对象。里面的元素称为”关键帧”(keyframe)。动画对象会在指定的时间(duration)内，依次显示values数组中的每一个关键帧。</p></li><li><p>path：可以设置一个CGPathRef\CGMutablePathRef,让层跟着路径移动。path只对CALayer的anchorPoint和position起作用。如果你设置了path，那么values将被忽略。</p></li><li><p>keyTimes：可以为对应的关键帧指定对应的时间点,其取值范围为0到1.0,keyTimes中的每一个时间值都对应values中的每一帧.当keyTimes没有设置的时候,各个关键帧的时间是平分的。</p></li><li><p>CABasicAnimation可看做是最多只有2个关键帧的CAKeyframeAnimation。</p></li></ul></blockquote><h3 id="4-CAAnimationGroup"><a href="#4-CAAnimationGroup" class="headerlink" title="4.CAAnimationGroup"></a>4.CAAnimationGroup</h3><p>CAAnimation的子类，可以保存一组动画对象，将CAAnimationGroup对象加入层后，组中所有动画对象可以同时并发运行。</p><blockquote><ul><li><p>animations：用来保存一组动画对象的NSArray。</p></li><li><p>默认情况下，一组动画对象是同时运行的，也可以通过设置动画对象的beginTime属性来更改动画的开始时间。</p></li></ul></blockquote><h3 id="5-CATransition"><a href="#5-CATransition" class="headerlink" title="5.CATransition"></a>5.CATransition</h3><p>CAAnimation的子类，用于做转场动画，能够为层提供移出屏幕和移入屏幕的动画效果。iOS比Mac OS X的转场动画效果少一点。UINavigationController就是通过CATransition实现了将控制器的视图推入屏幕的动画效果。</p><blockquote><ul><li><p>type：动画过渡类型。</p></li><li><p>subtype：动画过渡方向。</p></li><li><p>startProgress：动画起点(在整体动画的百分比)。</p></li><li><p>endProgress：动画终点(在整体动画的百分比)。</p></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CAAnimation&quot;&gt;&lt;a href=&quot;#CAAnimation&quot; class=&quot;headerlink&quot; title=&quot;CAAnimation&quot;&gt;&lt;/a&gt;CAAnimation&lt;/h2&gt;&lt;p&gt;CAAnimation是所有动画对象的父类，负责控制动画的持续时间和
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS自定义控件：提醒条</title>
    <link href="https://wudan-ios.github.io/2018/11/22/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%EF%BC%9A%E6%8F%90%E9%86%92%E6%9D%A1/"/>
    <id>https://wudan-ios.github.io/2018/11/22/iOS自定义控件：提醒条/</id>
    <published>2018-11-22T05:58:04.423Z</published>
    <updated>2018-11-22T05:58:04.619Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-ccc89345e72081d5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用"></p><p>简单的提醒条，代码比较简单，使用容易，代码中目前提供了三种显示的颜色，默认显示文本内容为一行文字，默认高度为20，可以根据自己需求自定义样式。代码同时支持Objective-C和Swift，使用方式有点点差别，详情看代码。</p><h4 id="接口文件"><a href="#接口文件" class="headerlink" title="接口文件"></a>接口文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">typedef NS_ENUM(NSInteger, RemindBarStyle) &#123;</span><br><span class="line">    RemindBarStyleInfo, // 提醒 ❇️</span><br><span class="line">    RemindBarStyleWarn, // 警告 ⚠️</span><br><span class="line">    RemindBarStyleError // 错误 ❌</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">typedef NS_ENUM(NSInteger, RemindBarPosition) &#123;</span><br><span class="line">    RemindBarPositionStatusBar,     // 状态栏下面</span><br><span class="line">    RemindBarPositionNavigationBar, // 导航栏下面</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@interface LZRemindBar : UIView</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 配置显示样式</span><br><span class="line"></span><br><span class="line"> @param style 样式</span><br><span class="line"> @param position 位置</span><br><span class="line"> @param text 内容</span><br><span class="line"> @return return value description</span><br><span class="line"> */</span><br><span class="line">+ (LZRemindBar *)configurationWithStyle:(RemindBarStyle)style showPosition:(RemindBarPosition)position contentText:(NSString *)text;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 显示 并设置显示时间</span><br><span class="line"></span><br><span class="line"> @param interval 显示时间</span><br><span class="line"> */</span><br><span class="line">- (void)showBarAfterTimeInterval:(NSTimeInterval)interval;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure><h4 id="实现文件"><a href="#实现文件" class="headerlink" title="实现文件"></a>实现文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;LZRemindBar.h&quot;</span><br><span class="line"></span><br><span class="line">#define bar_IsPhoneX  UIApplication.sharedApplication.statusBarFrame.size.height != 20</span><br><span class="line">#define bar_topInterval  bar_IsPhoneX ? UIApplication.sharedApplication.statusBarFrame.size.height : 0</span><br><span class="line"></span><br><span class="line">@interface LZRemindBar ()</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) UILabel           *contentLabel; //*! 文字Label</span><br><span class="line">@property (nonatomic, assign) RemindBarPosition position;      //*! 显示位置</span><br><span class="line">@property (nonatomic, assign) BOOL              isShowing;     //*! 是否正在显示</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation LZRemindBar</span><br><span class="line"></span><br><span class="line">+ (instancetype)remind &#123;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    static LZRemindBar *remind;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        remind = [[LZRemindBar alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return remind;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (LZRemindBar *)configurationWithStyle:(RemindBarStyle)style showPosition:(RemindBarPosition)position contentText:(NSString *)text &#123;</span><br><span class="line">    </span><br><span class="line">    if ([LZRemindBar remind].isShowing) &#123;</span><br><span class="line">        return [LZRemindBar remind];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [LZRemindBar remind].contentLabel = (&#123;</span><br><span class="line">        UILabel *label = [[UILabel alloc] init];</span><br><span class="line">        label.backgroundColor = UIColor.clearColor;</span><br><span class="line">        label.numberOfLines = 1;</span><br><span class="line">        label.textAlignment = NSTextAlignmentCenter;</span><br><span class="line">        label.font = [UIFont systemFontOfSize:13];</span><br><span class="line">        label.textColor = UIColor.whiteColor;</span><br><span class="line">        [[LZRemindBar remind] addSubview:label];</span><br><span class="line">        label.translatesAutoresizingMaskIntoConstraints = false;</span><br><span class="line">        [[label.leadingAnchor constraintEqualToAnchor:[LZRemindBar remind].leadingAnchor] setActive:true];</span><br><span class="line">        [[label.trailingAnchor constraintEqualToAnchor:[LZRemindBar remind].trailingAnchor] setActive:true];</span><br><span class="line">        [[label.topAnchor constraintEqualToAnchor:[LZRemindBar remind].topAnchor] setActive:true];</span><br><span class="line">        [[label.bottomAnchor constraintEqualToAnchor:[LZRemindBar remind].bottomAnchor] setActive:true];</span><br><span class="line">        label.text = text;</span><br><span class="line">        label;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    [LZRemindBar remind].isShowing = true;</span><br><span class="line">    [LZRemindBar remind].position  = position;</span><br><span class="line">    </span><br><span class="line">    switch (style) &#123;</span><br><span class="line">        case RemindBarStyleInfo:</span><br><span class="line">            [LZRemindBar remind].backgroundColor = [UIColor colorWithRed:0 green:166.0/255 blue:124.0/255 alpha:1];</span><br><span class="line">            break;</span><br><span class="line">        case RemindBarStyleWarn:</span><br><span class="line">            [LZRemindBar remind].backgroundColor = UIColor.orangeColor;</span><br><span class="line">            break;</span><br><span class="line">        case RemindBarStyleError:</span><br><span class="line">            [LZRemindBar remind].backgroundColor = UIColor.redColor;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (position == RemindBarPositionStatusBar) &#123;</span><br><span class="line">        [[LZRemindBar remind] setupShowStatusBarBottomWithStutus:true];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [[LZRemindBar remind] setupShowNavigationBarBottomWithStutus:true];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return [LZRemindBar remind];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setupShowStatusBarBottomWithStutus:(BOOL)show &#123;</span><br><span class="line">    if (show) &#123;</span><br><span class="line">        UIApplication.sharedApplication.delegate.window.windowLevel = bar_IsPhoneX ? UIWindowLevelNormal : UIWindowLevelAlert;</span><br><span class="line">        self.frame = CGRectMake(0, bar_topInterval, UIScreen.mainScreen.bounds.size.width, 0);</span><br><span class="line">        [UIView animateWithDuration:0.5 animations:^&#123;</span><br><span class="line">            self.frame = CGRectMake(0, bar_topInterval, UIScreen.mainScreen.bounds.size.width, 20);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [UIView animateWithDuration:0.5 animations:^&#123;</span><br><span class="line">            self.frame = CGRectMake(0, bar_topInterval, UIScreen.mainScreen.bounds.size.width, 0);</span><br><span class="line">        &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">            UIApplication.sharedApplication.delegate.window.windowLevel = UIWindowLevelNormal;</span><br><span class="line">            [self dismissBar];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setupShowNavigationBarBottomWithStutus:(BOOL)show &#123;</span><br><span class="line">    if (show) &#123;</span><br><span class="line">        self.frame = CGRectMake(0, UIApplication.sharedApplication.statusBarFrame.size.height + 44, UIScreen.mainScreen.bounds.size.width, 0);</span><br><span class="line">        [UIView animateWithDuration:0.5 animations:^&#123;</span><br><span class="line">            self.frame = CGRectMake(0, UIApplication.sharedApplication.statusBarFrame.size.height + 44, UIScreen.mainScreen.bounds.size.width, 20);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [UIView animateWithDuration:0.5 animations:^&#123;</span><br><span class="line">            self.frame = CGRectMake(0, UIApplication.sharedApplication.statusBarFrame.size.height + 44, UIScreen.mainScreen.bounds.size.width, 0);</span><br><span class="line">        &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">            [self dismissBar];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)showBarAfterTimeInterval:(NSTimeInterval)interval &#123;</span><br><span class="line">    [UIApplication.sharedApplication.delegate.window addSubview:self];</span><br><span class="line">    </span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(interval * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        if (self.position == RemindBarPositionStatusBar) &#123;</span><br><span class="line">            [self setupShowStatusBarBottomWithStutus:false];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            [self setupShowNavigationBarBottomWithStutus:false];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)dismissBar &#123;</span><br><span class="line">    self.isShowing = false;</span><br><span class="line">    [self.contentLabel removeFromSuperview];</span><br><span class="line">    [self removeFromSuperview];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//  参数RemindBarStyle： 显示样式</span><br><span class="line">//  参数RemindBarPosition: 显示位置 </span><br><span class="line">//  参数contentText: 显示文字内容 </span><br><span class="line">//  interval：显示时间</span><br><span class="line"></span><br><span class="line">// Objc</span><br><span class="line">[[LZRemindBar configurationWithStyle:RemindBarStyleInfo showPosition:RemindBarPositionStatusBar contentText:@&quot;这是一个提示&quot;] showBarAfterTimeInterval:1.2];</span><br><span class="line">// Swift</span><br><span class="line">LZRemindBar.configuration(with: .info, show: .statusBar, contentText: &quot;提示文字&quot;).show(afterTimeInterval: 1.2)</span><br></pre></td></tr></table></figure><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://upload-images.jianshu.io/upload_images/3334769-0b94020c5e06325c.gif?imageMogr2/auto-orient/strip" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/3334769-ccc89345e72081d5.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS自定义控件：自定义Alter弹窗</title>
    <link href="https://wudan-ios.github.io/2018/11/21/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89Alter%E5%BC%B9%E7%AA%97/"/>
    <id>https://wudan-ios.github.io/2018/11/21/iOS自定义控件：自定义Alter弹窗/</id>
    <published>2018-11-21T08:19:48.223Z</published>
    <updated>2018-11-21T08:19:49.002Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-b779b2b4e3c10261.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼图"><br>在下小白一个，准备写写和自己开发息息相关的控件，希望大家批评指正。这是第一个常用的底部弹窗，使用了最简单的分装方式。</p><h3 id="1、头文件里面声明了一个代理和初始化方法。"><a href="#1、头文件里面声明了一个代理和初始化方法。" class="headerlink" title="1、头文件里面声明了一个代理和初始化方法。"></a>1、头文件里面声明了一个代理和初始化方法。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@class LZAlterView;</span><br><span class="line"></span><br><span class="line">@protocol LZAlterViewDelegate &lt;NSObject&gt;</span><br><span class="line"></span><br><span class="line">- (void)alterView:(LZAlterView *)alterView didSelectedAtIndex:(NSInteger)index;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface LZAlterView : UIView</span><br><span class="line"></span><br><span class="line">+ (instancetype)alter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 显示样式一</span><br><span class="line"></span><br><span class="line"> @param mainTitle 主标题</span><br><span class="line"> @param subTitle 副标题</span><br><span class="line"> @param actionTitleArray 事件按钮数组</span><br><span class="line"> @param cancelTitle 取消按钮</span><br><span class="line"> @return return value description</span><br><span class="line"> */</span><br><span class="line">- (LZAlterView *)configureWithMainTitle:(NSString *)mainTitle subTitle:(NSString *)subTitle actionTitleArray:(NSArray&lt;NSString *&gt; *)actionTitleArray cancelActionTitle:(NSString *)cancelTitle;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 显示样式二</span><br><span class="line"></span><br><span class="line"> @param mainTitle 主标题</span><br><span class="line"> @param subTitle 副标题</span><br><span class="line"> @param actionTitleArray 事件按钮组数</span><br><span class="line"> @return return value description</span><br><span class="line"> */</span><br><span class="line">- (LZAlterView *)configureWithMainTitle:(NSString *)mainTitle subTitle:(NSString *)subTitle actionTitleArray:(NSArray&lt;NSString *&gt; *)actionTitleArray;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 显示样式三</span><br><span class="line"></span><br><span class="line"> @param actionTitleArray 事件按钮数组</span><br><span class="line"> @param cancelTitle 取消按钮</span><br><span class="line"> @return return value description</span><br><span class="line"> */</span><br><span class="line">- (LZAlterView *)configureWithActionTitleArray:(NSArray&lt;NSString *&gt; *)actionTitleArray cancelActionTitle:(NSString *)cancelTitle;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 显示样式四</span><br><span class="line"></span><br><span class="line"> @param actionTitleArray 事件按钮数组</span><br><span class="line"> @return return value description</span><br><span class="line"> */</span><br><span class="line">- (LZAlterView *)configureWithActionTitleArray:(NSArray&lt;NSString *&gt; *)actionTitleArray;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 设置代理</span><br><span class="line"></span><br><span class="line"> @param delegate 代理</span><br><span class="line"> @return return value description</span><br><span class="line"> */</span><br><span class="line">- (LZAlterView *)setupDelegate:(id&lt;LZAlterViewDelegate&gt;)delegate;</span><br><span class="line"></span><br><span class="line">- (void)showAlter;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure><h3 id="2、实现文件里面进行页面的绘制、数据处理和事件处理。"><a href="#2、实现文件里面进行页面的绘制、数据处理和事件处理。" class="headerlink" title="2、实现文件里面进行页面的绘制、数据处理和事件处理。"></a>2、实现文件里面进行页面的绘制、数据处理和事件处理。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;LZAlterView.h&quot;</span><br><span class="line"></span><br><span class="line">#define alter_ScreenWidth       UIScreen.mainScreen.bounds.size.width</span><br><span class="line">#define alter_ScreenHeight      UIScreen.mainScreen.bounds.size.height</span><br><span class="line"></span><br><span class="line">#define alter_actionHeight      45 * alter_ScreenWidth/375.0</span><br><span class="line">#define alter_cancelSpece       5 * alter_ScreenWidth/375.0</span><br><span class="line">#define alter_mainTitleHeight   alter_actionHeight + alter_cancelSpece</span><br><span class="line">#define alter_FontSize(s)       [UIFont systemFontOfSize:s * alter_ScreenWidth/375.0]</span><br><span class="line"></span><br><span class="line">@interface LZAlterView ()</span><br><span class="line"></span><br><span class="line">@property (nonatomic) CGRect                         conterViewRect;</span><br><span class="line">@property (nonatomic, strong) UIView                *contanerView;</span><br><span class="line">@property (nonatomic, weak) id &lt;LZAlterViewDelegate&gt; delegate;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation LZAlterView</span><br><span class="line"></span><br><span class="line">+ (instancetype)alter &#123;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    static LZAlterView *alter;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        alter = [[LZAlterView alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return alter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (instancetype)init &#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapGestureRecognizer:)];</span><br><span class="line">        [self addGestureRecognizer:tap];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Configuration method</span><br><span class="line">/** 代理  */</span><br><span class="line">- (LZAlterView *)setupDelegate:(id&lt;LZAlterViewDelegate&gt;)delegate &#123;</span><br><span class="line">    self.delegate = delegate;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Set title, subtitle, events and cancel */</span><br><span class="line">- (LZAlterView *)configureWithMainTitle:(NSString *)mainTitle subTitle:(NSString *)subTitle actionTitleArray:(NSArray&lt;NSString *&gt; *)actionTitleArray cancelActionTitle:(NSString *)cancelTitle &#123;</span><br><span class="line">    CGFloat width           = alter_actionHeight * (actionTitleArray.count + 1) + alter_cancelSpece + alter_mainTitleHeight;</span><br><span class="line">    self.contanerView.frame = CGRectMake(0, [self safeScreenHeight] - width, alter_ScreenWidth, width);</span><br><span class="line">    [self addSubview:self.contanerView];</span><br><span class="line"></span><br><span class="line">    UILabel *titleLabel     = [self setupMainTitle:mainTitle subTitle:subTitle];</span><br><span class="line">    titleLabel.frame        = CGRectMake(0, 0, alter_ScreenWidth, alter_mainTitleHeight);</span><br><span class="line">    [self.contanerView addSubview:titleLabel];</span><br><span class="line"></span><br><span class="line">    UIButton *cancelButton  = [self cancelButtonWithTitle:cancelTitle];</span><br><span class="line">    cancelButton.frame      = CGRectMake(0, self.contanerView.frame.size.height - alter_actionHeight, alter_ScreenWidth, alter_actionHeight);</span><br><span class="line">    [self.contanerView addSubview:cancelButton];</span><br><span class="line">    </span><br><span class="line">    for (NSString *name in actionTitleArray) &#123;</span><br><span class="line">        UIButton *button = [self setupActionWithTitle:name];</span><br><span class="line">        NSInteger index  = [actionTitleArray indexOfObject:name];</span><br><span class="line">        button.tag       = 1000 + index;</span><br><span class="line">        button.frame     = CGRectMake(0, titleLabel.frame.size.height + 0.5 + alter_actionHeight * index, alter_ScreenWidth, alter_actionHeight - 0.5);</span><br><span class="line">        [self.contanerView addSubview:button];</span><br><span class="line">    &#125;</span><br><span class="line">    self.conterViewRect = self.contanerView.frame;</span><br><span class="line">    </span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Set title, subtitle and events */</span><br><span class="line">- (LZAlterView *)configureWithMainTitle:(NSString *)mainTitle subTitle:(NSString *)subTitle actionTitleArray:(NSArray&lt;NSString *&gt; *)actionTitleArray &#123;</span><br><span class="line">    CGFloat width           = alter_actionHeight * actionTitleArray.count + alter_mainTitleHeight;</span><br><span class="line">    self.contanerView.frame = CGRectMake(0, [self safeScreenHeight] - width, alter_ScreenWidth, width);</span><br><span class="line">    [self addSubview:self.contanerView];</span><br><span class="line"></span><br><span class="line">    UILabel *titleLabel     = [self setupMainTitle:mainTitle subTitle:subTitle];</span><br><span class="line">    titleLabel.frame        = CGRectMake(0, 0, alter_ScreenWidth, alter_mainTitleHeight);</span><br><span class="line">    [self.contanerView addSubview:titleLabel];</span><br><span class="line">    </span><br><span class="line">    for (NSString *name in actionTitleArray) &#123;</span><br><span class="line">        UIButton *button = [self setupActionWithTitle:name];</span><br><span class="line">        NSInteger index  = [actionTitleArray indexOfObject:name];</span><br><span class="line">        button.tag       = 1000 + index;</span><br><span class="line">        button.frame     = CGRectMake(0, titleLabel.frame.size.height + 0.5 + alter_actionHeight * index, alter_ScreenWidth, alter_actionHeight - 0.5);</span><br><span class="line">        [self.contanerView addSubview:button];</span><br><span class="line">    &#125;</span><br><span class="line">    self.conterViewRect = self.contanerView.frame;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Set events and cancel */</span><br><span class="line">- (LZAlterView *)configureWithActionTitleArray:(NSArray&lt;NSString *&gt; *)actionTitleArray cancelActionTitle:(NSString *)cancelTitle &#123;</span><br><span class="line">    CGFloat width           = alter_actionHeight * (actionTitleArray.count + 1) + alter_cancelSpece;</span><br><span class="line">    self.contanerView.frame = CGRectMake(0, [self safeScreenHeight] - width, alter_ScreenWidth, width);</span><br><span class="line">    [self addSubview:self.contanerView];</span><br><span class="line">    </span><br><span class="line">    UIButton *cancelButton  = [self cancelButtonWithTitle:cancelTitle];</span><br><span class="line">    cancelButton.frame      = CGRectMake(0, self.contanerView.frame.size.height - alter_actionHeight, alter_ScreenWidth, alter_actionHeight);</span><br><span class="line">    [self.contanerView addSubview:cancelButton];</span><br><span class="line">    </span><br><span class="line">    for (NSString *name in actionTitleArray) &#123;</span><br><span class="line">        UIButton *button = [self setupActionWithTitle:name];</span><br><span class="line">        NSInteger index  = [actionTitleArray indexOfObject:name];</span><br><span class="line">        button.tag       = 1000 + index;</span><br><span class="line">        button.frame     = CGRectMake(0, alter_actionHeight * index, alter_ScreenWidth, alter_actionHeight-0.5);</span><br><span class="line">        [self.contanerView addSubview:button];</span><br><span class="line">    &#125;</span><br><span class="line">    self.conterViewRect = self.contanerView.frame;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Set events */</span><br><span class="line">- (LZAlterView *)configureWithActionTitleArray:(NSArray&lt;NSString *&gt; *)actionTitleArray &#123;</span><br><span class="line">    CGFloat width           = alter_actionHeight * actionTitleArray.count;</span><br><span class="line">    self.contanerView.frame = CGRectMake(0, [self safeScreenHeight] - width, alter_ScreenWidth, width);</span><br><span class="line">    [self addSubview:self.contanerView];</span><br><span class="line"></span><br><span class="line">    for (NSString *name in actionTitleArray) &#123;</span><br><span class="line">        UIButton *button = [self setupActionWithTitle:name];</span><br><span class="line">        NSInteger index  = [actionTitleArray indexOfObject:name];</span><br><span class="line">        button.tag       = 1000 + index;</span><br><span class="line">        button.frame     = CGRectMake(0, alter_actionHeight * index, alter_ScreenWidth, alter_actionHeight-0.5);</span><br><span class="line">        [self.contanerView addSubview:button];</span><br><span class="line">    &#125;</span><br><span class="line">    self.conterViewRect = self.contanerView.frame;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Event button style */</span><br><span class="line">- (UIButton *)setupActionWithTitle:(NSString *)title &#123;</span><br><span class="line">    UIButton *button       = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">    [button setTitle:title forState:UIControlStateNormal];</span><br><span class="line">    [button setTitleColor:UIColor.blackColor forState:UIControlStateNormal];</span><br><span class="line">    button.backgroundColor = [UIColor colorWithRed:0.9 green:0.9 blue:0.9 alpha:1];</span><br><span class="line">    button.titleLabel.font = alter_FontSize(15);</span><br><span class="line">    [button addTarget:self action:@selector(buttonTouched:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    return button;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Cancel button style */</span><br><span class="line">- (UIButton *)cancelButtonWithTitle:(NSString *)title &#123;</span><br><span class="line">    UIButton *button       = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">    [button setTitle:title forState:UIControlStateNormal];</span><br><span class="line">    [button setTitleColor:[UIColor colorWithRed:0.9 green:0 blue:0 alpha:1] forState:UIControlStateNormal];</span><br><span class="line">    button.backgroundColor = [UIColor colorWithRed:0.9 green:0.9 blue:0.9 alpha:1];</span><br><span class="line">    button.titleLabel.font = alter_FontSize(15);</span><br><span class="line">    [button addTarget:self action:@selector(hidenAlter) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line"></span><br><span class="line">    return button;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Title style */</span><br><span class="line">- (UILabel *)setupMainTitle:(NSString *)title subTitle:(NSString *)subTitle &#123;</span><br><span class="line">    NSString *titleString;</span><br><span class="line">    </span><br><span class="line">    if (subTitle.length == 0) &#123;</span><br><span class="line">        titleString = [NSString stringWithFormat:@&quot;%@&quot;,title];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        titleString = [NSString stringWithFormat:@&quot;%@\n%@&quot;,title,subTitle];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UILabel *label                         = [[UILabel alloc] init];</span><br><span class="line">    label.backgroundColor                  = [UIColor colorWithRed:0.9 green:0.9 blue:0.9 alpha:1];</span><br><span class="line">    label.textColor                        = UIColor.blackColor;</span><br><span class="line">    label.font                             = alter_FontSize(15);</span><br><span class="line">    NSMutableAttributedString *muAttribute = [[NSMutableAttributedString alloc] initWithString:titleString];</span><br><span class="line"></span><br><span class="line">    [muAttribute addAttribute:NSFontAttributeName value:alter_FontSize(12) range:NSMakeRange(titleString.length - subTitle.length, subTitle.length)];</span><br><span class="line">    [muAttribute addAttribute:NSForegroundColorAttributeName value:UIColor.grayColor range:NSMakeRange(titleString.length - subTitle.length, subTitle.length)];</span><br><span class="line"></span><br><span class="line">    label.textAlignment                    = NSTextAlignmentCenter;</span><br><span class="line">    label.numberOfLines                    = 2;</span><br><span class="line">    label.attributedText                   = muAttribute;</span><br><span class="line">    return label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Button click events and delegate</span><br><span class="line"></span><br><span class="line">- (void)buttonTouched:(UIButton *)sender &#123;</span><br><span class="line">    [self hidenAlter];</span><br><span class="line">    if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(alterView:didSelectedAtIndex:)]) &#123;</span><br><span class="line">        [self.delegate alterView:self didSelectedAtIndex:sender.tag - 1000];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** iOS 11 safeArea bottom space */</span><br><span class="line">- (CGFloat)safeScreenHeight &#123;</span><br><span class="line">    CGFloat safeAreaInsetsBottom = 0;</span><br><span class="line">    if (@available(iOS 11.0, *)) &#123;</span><br><span class="line">        safeAreaInsetsBottom = UIApplication.sharedApplication.delegate.window.safeAreaInsets.bottom;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        safeAreaInsetsBottom = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return alter_ScreenHeight - safeAreaInsetsBottom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Show alter And hiden alter</span><br><span class="line">/** Show alter from bottom */</span><br><span class="line">- (void)showAlter &#123;</span><br><span class="line">    [UIApplication.sharedApplication.delegate.window addSubview:self];</span><br><span class="line">    self.backgroundColor = [UIColor colorWithWhite:0 alpha:0.3];</span><br><span class="line">    self.frame           = CGRectMake(0, 0, alter_ScreenWidth, alter_ScreenHeight);</span><br><span class="line">    self.alpha           = 0;</span><br><span class="line">    self.contanerView.frame = CGRectMake(0, UIScreen.mainScreen.bounds.size.height, UIScreen.mainScreen.bounds.size.height, 0);</span><br><span class="line">    </span><br><span class="line">    [UIView animateWithDuration:0.4 animations:^&#123;</span><br><span class="line">        self.alpha              = 1;</span><br><span class="line">        self.contanerView.frame = self.conterViewRect;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Hiden alter and remove subViews from superview */</span><br><span class="line">- (void)hidenAlter &#123;</span><br><span class="line">    [UIView animateWithDuration:0.4 animations:^&#123;</span><br><span class="line">        self.alpha              = 0;</span><br><span class="line">        self.contanerView.frame = CGRectMake(0, UIScreen.mainScreen.bounds.size.height, UIScreen.mainScreen.bounds.size.height, 0);</span><br><span class="line">    &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">        for (UIView *view in self.contanerView.subviews) &#123;</span><br><span class="line">            [view removeFromSuperview];</span><br><span class="line">        &#125;</span><br><span class="line">        [self removeFromSuperview];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Getter</span><br><span class="line"></span><br><span class="line">- (UIView *)contanerView &#123;</span><br><span class="line">    if (!_contanerView) &#123;</span><br><span class="line">        _contanerView                 = [[UIView alloc] init];</span><br><span class="line">        _contanerView.backgroundColor = [UIColor colorWithRed:0.9 green:0.9 blue:0.9 alpha:0.5];</span><br><span class="line">    &#125;</span><br><span class="line">    return _contanerView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - TapGestureRecognizer event</span><br><span class="line"></span><br><span class="line">- (void)tapGestureRecognizer:(id)sender &#123;</span><br><span class="line">    [self hidenAlter];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="3、使用方法，遵循LZAlterViewDelegate"><a href="#3、使用方法，遵循LZAlterViewDelegate" class="headerlink" title="3、使用方法，遵循LZAlterViewDelegate"></a>3、使用方法，遵循LZAlterViewDelegate</h3><h4 id="样式一"><a href="#样式一" class="headerlink" title="样式一"></a>样式一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//  Objc</span><br><span class="line">[[[[LZAlterView alter] configureWithMainTitle:@&quot;选择图片&quot;</span><br><span class="line">                                                 subTitle:@&quot;1&quot;</span><br><span class="line">                                         actionTitleArray:@[@&quot;打开相册&quot;, @&quot;打开相机&quot;]</span><br><span class="line">                                        cancelActionTitle:@&quot;取消&quot;] setupDelegate:self] showAlter];</span><br><span class="line">//  Swift</span><br><span class="line">LZAlterView.alter().configure(withMainTitle: &quot;选择图片&quot;, subTitle: &quot;副标题&quot;, actionTitleArray: [&quot;相机&quot;, &quot;相册&quot;], cancelActionTitle: &quot;取消&quot;).setupDelegate(self).showAlter()</span><br></pre></td></tr></table></figure><h4 id="样式二"><a href="#样式二" class="headerlink" title="样式二"></a>样式二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//  Objc</span><br><span class="line"> [[[[LZAlterView alter] configureWithMainTitle:@&quot;选择图片&quot;</span><br><span class="line">                                                 subTitle:@&quot;2&quot;</span><br><span class="line">                                         actionTitleArray:@[@&quot;打开相册&quot;, @&quot;打开相机&quot;]] setupDelegate:self] showAlter];</span><br><span class="line">//  Swift</span><br><span class="line">LZAlterView.alter().configure(withMainTitle: &quot;选择图片&quot;, subTitle: &quot;需要用户权限&quot;, actionTitleArray: [&quot;相机&quot;, &quot;相册&quot;]).setupDelegate(self).showAlter()</span><br></pre></td></tr></table></figure><h4 id="样式三"><a href="#样式三" class="headerlink" title="样式三"></a>样式三</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//  Objc</span><br><span class="line">[[[[LZAlterView alter] configureWithActionTitleArray:@[@&quot;打开相册&quot;, @&quot;打开相机&quot;]</span><br><span class="line">                                               cancelActionTitle:@&quot;取消&quot;] setupDelegate:self] showAlter];</span><br><span class="line">//  Swift</span><br><span class="line">LZAlterView.alter().configure(withActionTitleArray: [&quot;相机&quot;, &quot;相册&quot;], cancelActionTitle: &quot;取消&quot;).setupDelegate(self).showAlter()</span><br></pre></td></tr></table></figure><h4 id="样式四"><a href="#样式四" class="headerlink" title="样式四"></a>样式四</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//  Objc</span><br><span class="line">[[[[LZAlterView alter] configureWithActionTitleArray:@[@&quot;打开相册&quot;, @&quot;打开相机&quot;, @&quot;拍照视频&quot;]] setupDelegate:self] showAlter];</span><br><span class="line">//  Swift</span><br><span class="line">LZAlterView.alter().configure(withActionTitleArray: [&quot;相机&quot;, &quot;相册&quot;]).setupDelegate(self).showAlter()</span><br></pre></td></tr></table></figure><h3 id="4、代理方法"><a href="#4、代理方法" class="headerlink" title="4、代理方法"></a>4、代理方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Objc</span><br><span class="line">- (void)alterView:(LZAlterView *)alterView didSelectedAtIndex:(NSInteger)index &#123;</span><br><span class="line">    NSLog(@&quot;点击第%ld按钮&quot;, index);</span><br><span class="line">&#125;</span><br><span class="line">// Swift</span><br><span class="line">extension ViewController: LZAlterViewDelegate &#123;</span><br><span class="line">    func alterView(_ alterView: LZAlterView, didSelectedAt index: Int) &#123;</span><br><span class="line">        print(&quot;点击第\(index)按钮&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、效果图"><a href="#5、效果图" class="headerlink" title="5、效果图"></a>5、效果图</h3><p><img src="https://upload-images.jianshu.io/upload_images/3334769-88dcc0223c16e44b.gif?imageMogr2/auto-orient/strip" alt="效果图.gif"></p><p>结尾：有问题希望大家指正！😄😄😄</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/3334769-b779b2b4e3c10261.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS自定义控件：自定义分类下拉</title>
    <link href="https://wudan-ios.github.io/2018/11/19/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E7%B1%BB%E4%B8%8B%E6%8B%89/"/>
    <id>https://wudan-ios.github.io/2018/11/19/iOS自定义控件：自定义分类下拉/</id>
    <published>2018-11-19T11:22:39.388Z</published>
    <updated>2018-11-19T11:22:40.136Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-3e146d3a49636e88.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="宝儿姐镇楼"></p><p>最近自由时间有点多，就开始撸控件。这个是我们常用的一个下拉分类控件，看了很多别人写的，都是用TableView或者CollectionView整合在一起的感觉自定义性没有那么强，所以就尝试用把TableView和CollectionView替换成UIViewController。其他废话不多说了。</p><h4 id="1、-接口文件"><a href="#1、-接口文件" class="headerlink" title="1、 接口文件"></a>1、 接口文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">UIKIT_EXTERN NSString *lzDropViewNotification;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@class LZDropView;</span><br><span class="line">@protocol LZDropViewDataSource &lt;NSObject&gt;</span><br><span class="line"></span><br><span class="line">@required</span><br><span class="line"></span><br><span class="line">/** Height corresponding to controller display */</span><br><span class="line">- (NSArray&lt;NSNumber *&gt; *)setupCategoryControllerHeightInDropView:(LZDropView *)dropView;</span><br><span class="line">/** Title corresponding controller array */</span><br><span class="line">- (NSArray&lt;UIViewController *&gt; *)setupCategoryControllerInDropView:(LZDropView *)dropView;</span><br><span class="line">/** Default display of Title Array */</span><br><span class="line">- (NSArray&lt;NSString *&gt; *)setupCategoryTitleNameInDropView:(LZDropView *)dropView;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@protocol LZDropViewDelegate &lt;NSObject&gt;</span><br><span class="line"></span><br><span class="line">/** Click the column and select the information. */</span><br><span class="line">- (void)dropView:(LZDropView *)dropView didSelectAtColumn:(NSInteger)column info:(NSString *)info;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface LZDropView : UIView</span><br><span class="line">/** Simple page configuration */</span><br><span class="line">@property (nonatomic, weak) id &lt;LZDropViewDataSource&gt; dataSorce;</span><br><span class="line">/** Click proxy event&lt;##&gt; */</span><br><span class="line">@property (nonatomic, weak) id &lt;LZDropViewDelegate&gt; delegate;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure><h4 id="2、-实现文件"><a href="#2、-实现文件" class="headerlink" title="2、 实现文件"></a>2、 实现文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;LZDropView.h&quot;</span><br><span class="line"></span><br><span class="line">NSString *lzDropViewNotification = @&quot;nitification&quot;;</span><br><span class="line"></span><br><span class="line">@interface LZDropView ()</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) NSArray&lt;UIViewController *&gt; *controllerArray;</span><br><span class="line">@property (nonatomic, strong) NSArray&lt;NSString *&gt; *titleArray;</span><br><span class="line">@property (nonatomic, strong) UIButton *containerView;</span><br><span class="line">@property (nonatomic, strong) NSArray&lt;NSNumber *&gt; *controllerHeightArray;</span><br><span class="line">@property (nonatomic, strong) NSMutableArray&lt;UIButton *&gt; *buttonArray;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation LZDropView</span><br><span class="line"></span><br><span class="line">#pragma mark - Release memory</span><br><span class="line"></span><br><span class="line">- (void)dealloc &#123;</span><br><span class="line">    [[NSNotificationCenter defaultCenter] removeObserver:self];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Initialization</span><br><span class="line"></span><br><span class="line">- (instancetype)init &#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(notificationAction:) name:lzDropViewNotification object:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Draw the page</span><br><span class="line"></span><br><span class="line">- (void)setupTitleButton:(NSArray&lt;NSString *&gt; *)array &#123;</span><br><span class="line">    CGFloat width = UIScreen.mainScreen.bounds.size.width / array.count;</span><br><span class="line">    self.buttonArray = [NSMutableArray array];</span><br><span class="line">    for (NSString *name in array) &#123;</span><br><span class="line">        NSInteger index = [array indexOfObject:name];</span><br><span class="line">        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">        button.titleLabel.font = [UIFont systemFontOfSize:15];</span><br><span class="line">        [button setTitle:[NSString stringWithFormat:@&quot;%@ ▼&quot;, name] forState:UIControlStateNormal];</span><br><span class="line">        [button setTitle:[NSString stringWithFormat:@&quot;%@ ▲&quot;, name] forState:UIControlStateSelected];</span><br><span class="line">        [button setTitleColor:UIColor.grayColor forState:UIControlStateNormal];</span><br><span class="line">        [button setTitleColor:UIColor.orangeColor forState:UIControlStateSelected];</span><br><span class="line">        button.frame = CGRectMake(width * index, 0, width, 45);</span><br><span class="line">        button.tag = index + 1000;</span><br><span class="line">        [button addTarget:self action:@selector(buttonTouched:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">        [self addSubview:button];</span><br><span class="line">        [self.buttonArray addObject:button];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Button click event</span><br><span class="line"></span><br><span class="line">- (void)buttonTouched:(UIButton *)sender &#123;</span><br><span class="line">    if (sender.selected) &#123;</span><br><span class="line">        [self closeControllerView];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [self openControllerViewWithButton:sender];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)backButtonTouched:(UIButton *)sender &#123;</span><br><span class="line">    [self closeControllerView];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Notification event</span><br><span class="line"></span><br><span class="line">- (void)notificationAction:(NSNotification *)notification &#123;    </span><br><span class="line">    if (![self.controllerArray containsObject:notification.object]) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSInteger index = [self.controllerArray indexOfObject:notification.object];</span><br><span class="line">    UIButton *button = self.buttonArray[index];</span><br><span class="line">    [button setTitle:[NSString stringWithFormat:@&quot;%@ ▼&quot;, notification.userInfo.allValues.firstObject] forState:UIControlStateNormal];</span><br><span class="line">    </span><br><span class="line">    if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(dropView:didSelectAtColumn:info:)]) &#123;</span><br><span class="line">        [self.delegate dropView:self didSelectAtColumn:index info:notification.userInfo.allValues.firstObject];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [self closeControllerView];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Close all controllers.</span><br><span class="line"></span><br><span class="line">- (void)closeControllerView &#123;</span><br><span class="line">    </span><br><span class="line">    [UIView animateWithDuration:0.8 animations:^&#123;</span><br><span class="line">        self.containerView.alpha = 0;</span><br><span class="line">        self.containerView.frame = CGRectMake(0, CGRectGetMaxY(self.frame), UIScreen.mainScreen.bounds.size.width, 0);</span><br><span class="line">    &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">        [self.containerView removeFromSuperview];</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    for (UIButton *button in self.buttonArray) &#123;</span><br><span class="line">        button.selected = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Open the corresponding controller.</span><br><span class="line"></span><br><span class="line">- (void)openControllerViewWithButton:(UIButton *)sender &#123;</span><br><span class="line">    for (UIButton *button in self.buttonArray) &#123;</span><br><span class="line">        button.selected = false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    self.containerView.alpha = 1;</span><br><span class="line">    </span><br><span class="line">    for (UIView *view in self.containerView.subviews) &#123;</span><br><span class="line">        [view removeFromSuperview];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    UIViewController *vc = self.controllerArray[sender.tag - 1000];</span><br><span class="line">    double vcHeight = [self.controllerHeightArray[sender.tag - 1000] doubleValue];</span><br><span class="line">    </span><br><span class="line">    self.containerView.frame = CGRectMake(0, CGRectGetMaxY(self.frame), self.frame.size.width, 0);</span><br><span class="line">    vc.view.frame = CGRectMake(0, 0, UIScreen.mainScreen.bounds.size.width, 0);</span><br><span class="line">    [self.superview addSubview:self.containerView];</span><br><span class="line">    [self.containerView addSubview:vc.view];</span><br><span class="line">    </span><br><span class="line">    [UIView animateWithDuration:0.6 animations:^&#123;</span><br><span class="line">        self.containerView.frame = CGRectMake(0, CGRectGetMaxY(self.frame), self.frame.size.width, UIScreen.mainScreen.bounds.size.height);</span><br><span class="line">        vc.view.frame = CGRectMake(0, 0, UIScreen.mainScreen.bounds.size.width, vcHeight);</span><br><span class="line">    &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;];</span><br><span class="line">    sender.selected = true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Getter</span><br><span class="line"></span><br><span class="line">- (UIView *)containerView &#123;</span><br><span class="line">    if (!_containerView) &#123;</span><br><span class="line">        _containerView = [[UIButton alloc] init];</span><br><span class="line">        _containerView.backgroundColor = [UIColor colorWithWhite:0 alpha:0.1];</span><br><span class="line">        [_containerView addTarget:self action:@selector(backButtonTouched:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    &#125;</span><br><span class="line">    return _containerView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Setter</span><br><span class="line"></span><br><span class="line">- (void)setDataSorce:(id&lt;LZDropViewDataSource&gt;)dataSorce &#123;</span><br><span class="line">    _dataSorce = dataSorce;</span><br><span class="line">    </span><br><span class="line">    if (self.dataSorce &amp;&amp; [self.dataSorce respondsToSelector:@selector(setupCategoryControllerInDropView:)])&#123;</span><br><span class="line">        self.controllerArray = [self.dataSorce setupCategoryControllerInDropView:self];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (self.dataSorce &amp;&amp; [self.dataSorce respondsToSelector:@selector(setupCategoryTitleNameInDropView:)])&#123;</span><br><span class="line">        self.titleArray = [self.dataSorce setupCategoryTitleNameInDropView:self];</span><br><span class="line">        [self setupTitleButton:self.titleArray];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (self.dataSorce &amp;&amp; [self.dataSorce respondsToSelector:@selector(setupCategoryControllerHeightInDropView:)]) &#123;</span><br><span class="line">        self.controllerHeightArray = [self.dataSorce setupCategoryControllerHeightInDropView:self];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (self.controllerArray.count != self.titleArray.count ||</span><br><span class="line">        self.controllerArray.count != self.controllerHeightArray.count) &#123;</span><br><span class="line">        @throw [NSException exceptionWithName:NSStringFromClass([self class]) reason:@&quot;The number of corresponding arrays is inconsistent.&quot; userInfo:nil];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p> 1.遵循协议<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;LZDropViewDataSource, LZDropViewDelegate&gt;</span><br></pre></td></tr></table></figure></p><p>2.初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LZDropView *view     = [[LZDropView alloc] init];</span><br><span class="line">    view.dataSorce       = self;</span><br><span class="line">    view.delegate        = self;</span><br><span class="line">    view.backgroundColor = UIColor.whiteColor;</span><br><span class="line">    view.frame           = CGRectMake(0, 100, UIScreen.mainScreen.bounds.size.width, 45);</span><br><span class="line">    [self.view addSubview:view];</span><br></pre></td></tr></table></figure></p><ol start="3"><li><p>实现代理和数据源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - LZDropViewDataSource</span><br><span class="line"></span><br><span class="line">- (NSArray&lt;UIViewController *&gt; *)setupCategoryControllerInDropView:(LZDropView *)dropView &#123;</span><br><span class="line">    return @[[[TableViewController alloc] init],</span><br><span class="line">             [[TableViewController alloc] init],</span><br><span class="line">             [[TableViewController alloc] init],</span><br><span class="line">             [[TableViewController alloc] init]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSArray&lt;NSString *&gt; *)setupCategoryTitleNameInDropView:(LZDropView *)dropView &#123;</span><br><span class="line">    return @[@&quot;全部&quot;,</span><br><span class="line">             @&quot;附近&quot;,</span><br><span class="line">             @&quot;只能排序&quot;,</span><br><span class="line">             @&quot;筛选&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSArray&lt;NSNumber *&gt; *)setupCategoryControllerHeightInDropView:(LZDropView *)dropView &#123;</span><br><span class="line">    return @[[NSNumber numberWithFloat:300],</span><br><span class="line">             [NSNumber numberWithFloat:400],</span><br><span class="line">             [NSNumber numberWithFloat:410],</span><br><span class="line">             [NSNumber numberWithFloat:420]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - LZDropViewDelegate</span><br><span class="line"></span><br><span class="line">- (void)dropView:(LZDropView *)dropView didSelectAtColumn:(NSInteger)column info:(NSString *)info &#123;</span><br><span class="line">    NSLog(@&quot;%ld---%@&quot;, column, info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>点击controller中的数据显示在按钮的标题中，这因为跨界面显示，我暂时没有想到好的办法，所以使用强大的通知传值。</p></li><li>记录选中状态，应该是控制器里面的操作，这里就没有实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] postNotificationName:lzDropViewNotification object:self userInfo:@&#123;@&quot;key&quot;:[NSString stringWithFormat:@&quot;第%ldcell&quot;, indexPath.row]&#125;];</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3334769-9256553756983ba2.gif?imageMogr2/auto-orient/strip" alt="效果图"></p><p>如果有什么不好如果建议的地方，请批评指正！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/3334769-3e146d3a49636e88.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>系统SDK介绍-02</title>
    <link href="https://wudan-ios.github.io/2018/11/08/%E7%B3%BB%E7%BB%9FSDK%E5%B0%81%E8%A3%85-02/"/>
    <id>https://wudan-ios.github.io/2018/11/08/系统SDK封装-02/</id>
    <published>2018-11-08T08:45:40.682Z</published>
    <updated>2018-11-08T08:58:33.323Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-4c46b61075c6b345.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专业"></p><h3 id="系统SDK介绍"><a href="#系统SDK介绍" class="headerlink" title="系统SDK介绍"></a>系统SDK介绍</h3><ol><li>打开相册选择图片</li><li>打开相册选择视频</li><li>打开相机拍摄图片</li><li>打开相机拍摄视频</li></ol><h3 id="配置权限："><a href="#配置权限：" class="headerlink" title="配置权限："></a>配置权限：</h3><h5 id="在info-plist文件中添加需要的权限"><a href="#在info-plist文件中添加需要的权限" class="headerlink" title="在info.plist文件中添加需要的权限"></a>在info.plist文件中添加需要的权限</h5><blockquote><ul><li>相机权限：Privacy - Camera Usage Description 允许此权限才能使用相机功，这样才能录制视频，并且想要保存图片。</li><li>相册权限：Privacy - Photo Library Usage Description 允许此权限才能使用系统相册。</li><li>麦克风权限：Privacy - Microphone Usage Description 获取麦克风权限不然会崩，只有允许此权限才能录音。</li></ul></blockquote><h3 id="判断是否权限"><a href="#判断是否权限" class="headerlink" title="判断是否权限"></a>判断是否权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - 权限判断</span><br><span class="line">- (BOOL)authorizationCamera &#123;</span><br><span class="line">    NSString *mediaType = AVMediaTypeVideo;</span><br><span class="line">    AVAuthorizationStatus authStatus = [AVCaptureDevice authorizationStatusForMediaType:mediaType];</span><br><span class="line">    if(authStatus == AVAuthorizationStatusRestricted || authStatus == AVAuthorizationStatusDenied)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef NS_ENUM(NSInteger, LZSystemPhotoSelectorType) &#123;</span><br><span class="line">    LZSystemPhotoSelectorTypeVideo, // 选择视频</span><br><span class="line">    LZSystemPhotoSelectorTypePhoto, // 选择图片</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">typedef NS_ENUM(NSInteger, LZSystemOpenDeviceType) &#123;</span><br><span class="line">    LZSystemOpenDeviceTypeCamera, // 打开相机</span><br><span class="line">    LZSystemOpenDeviceTypeVideo,  // 打开摄像机</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="接口文件"><a href="#接口文件" class="headerlink" title="接口文件"></a>接口文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">typedef NS_ENUM(NSInteger, LZSystemPhotoSelectorType) &#123;</span><br><span class="line">    LZSystemPhotoSelectorTypeVideo, // 选择视频</span><br><span class="line">    LZSystemPhotoSelectorTypePhoto, // 选择图片</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typedef NS_ENUM(NSInteger, LZSystemOpenDeviceType) &#123;</span><br><span class="line">    LZSystemOpenDeviceTypeCamera, // 打开相机</span><br><span class="line">    LZSystemOpenDeviceTypeVideo,  // 打开摄像机</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@interface LZSystemPhotoSelector : NSObject</span><br><span class="line"></span><br><span class="line">+ (instancetype)selector;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 选择图片或视频</span><br><span class="line"></span><br><span class="line"> @param type 类型</span><br><span class="line"> @param allowsEditing 是否允许编辑</span><br><span class="line"> @param resultFile 选择结果，图片是UIImage 视频是NSUrl</span><br><span class="line"> */</span><br><span class="line">- (void)lz_openAblumWithType:(LZSystemPhotoSelectorType)type allowsEditing:(BOOL)allowsEditing resultFile:(void(^)(id info))resultFile;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 打开相机或摄像机</span><br><span class="line"></span><br><span class="line"> @param type 类型</span><br><span class="line"> @param allowsEditing 是否拍摄完成进行编辑</span><br><span class="line"> @param resultFile 选择结果，图片是UIImage 视频是NSUrl</span><br><span class="line"> */</span><br><span class="line">- (void)lz_openDeviceWithType:(LZSystemOpenDeviceType)type allowsEditing:(BOOL)allowsEditing resultFile:(void(^)(id info))resultFile;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure><h3 id="实现文件"><a href="#实现文件" class="headerlink" title="实现文件"></a>实现文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;LZSystemPhotoSelector.h&quot;</span><br><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line">#import &lt;AVFoundation/AVFoundation.h&gt;</span><br><span class="line">#import &lt;AssetsLibrary/AssetsLibrary.h&gt;</span><br><span class="line">#import &lt;MobileCoreServices/MobileCoreServices.h&gt;</span><br><span class="line"></span><br><span class="line">#define kRootViewController UIApplication.sharedApplication.delegate.window.rootViewController</span><br><span class="line"></span><br><span class="line">@interface LZSystemPhotoSelector () &lt;UIImagePickerControllerDelegate, UINavigationControllerDelegate&gt;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy) void (^resultFile)(id info);</span><br><span class="line">@property (nonatomic, assign) BOOL allowsEditing;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation LZSystemPhotoSelector</span><br><span class="line"></span><br><span class="line">+ (instancetype)selector &#123;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    static LZSystemPhotoSelector *selector;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        selector = [[LZSystemPhotoSelector alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return selector;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 选择图片或视频</span><br><span class="line">- (void)lz_openAblumWithType:(LZSystemPhotoSelectorType)type allowsEditing:(BOOL)allowsEditing resultFile:(void(^)(id info))resultFile &#123;</span><br><span class="line">    </span><br><span class="line">    if (![UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypePhotoLibrary]) &#123;</span><br><span class="line">        resultFile(@&quot;该设备暂时不支持&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    self.allowsEditing = allowsEditing;</span><br><span class="line">    self.resultFile = resultFile;</span><br><span class="line">    </span><br><span class="line">    UIImagePickerController *controller = [[UIImagePickerController alloc] init];</span><br><span class="line">    controller.delegate = self;</span><br><span class="line">    controller.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;</span><br><span class="line">    if (type == LZSystemPhotoSelectorTypePhoto) &#123;</span><br><span class="line">        controller.mediaTypes = [NSArray arrayWithObjects:@&quot;public.image&quot;, nil];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        controller.mediaTypes = [NSArray arrayWithObjects:@&quot;public.movie&quot;, nil];</span><br><span class="line">    &#125;</span><br><span class="line">    controller.allowsEditing = allowsEditing;</span><br><span class="line">    [kRootViewController presentViewController:controller animated:true completion:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 打开相机或摄像机</span><br><span class="line">- (void)lz_openDeviceWithType:(LZSystemOpenDeviceType)type allowsEditing:(BOOL)allowsEditing resultFile:(void (^)(id _Nonnull))resultFile &#123;</span><br><span class="line">    </span><br><span class="line">    if (![UIImagePickerController isSourceTypeAvailable:UIImagePickerControllerSourceTypeCamera]) &#123;</span><br><span class="line">        resultFile(@&quot;该设备暂时不支持&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (![self authorizationCamera]) &#123;</span><br><span class="line">        resultFile(@&quot;暂无相机权限&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    self.allowsEditing = allowsEditing;</span><br><span class="line">    self.resultFile = resultFile;</span><br><span class="line">    </span><br><span class="line">    UIImagePickerController *controller = [[UIImagePickerController alloc] init];</span><br><span class="line">    controller.delegate = self;</span><br><span class="line">    controller.sourceType = UIImagePickerControllerSourceTypeCamera;</span><br><span class="line"></span><br><span class="line">    if (type == LZSystemOpenDeviceTypeCamera) &#123;</span><br><span class="line">        controller.mediaTypes = [NSArray arrayWithObjects:@&quot;public.image&quot;, nil];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        controller.mediaTypes = [NSArray arrayWithObjects:@&quot;public.movie&quot;, nil];</span><br><span class="line">    &#125;</span><br><span class="line">    controller.allowsEditing = allowsEditing;</span><br><span class="line">    [kRootViewController presentViewController:controller animated:true completion:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - UIImagePickerControllerDelegate</span><br><span class="line">- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary&lt;NSString *,id&gt; *)info &#123;</span><br><span class="line"></span><br><span class="line">    NSString *mediaType = [info objectForKey:UIImagePickerControllerMediaType];</span><br><span class="line"></span><br><span class="line">    if ([mediaType isEqualToString:(NSString *)kUTTypeImage]) &#123;</span><br><span class="line">        if (self.allowsEditing) &#123;</span><br><span class="line">            UIImage *editorImage = info[UIImagePickerControllerEditedImage];</span><br><span class="line">            self.resultFile(editorImage);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            UIImage *editorImage = info[UIImagePickerControllerOriginalImage];</span><br><span class="line">            self.resultFile(editorImage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        NSURL *url = info[UIImagePickerControllerMediaURL];</span><br><span class="line">        self.resultFile(url);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [picker dismissViewControllerAnimated:true completion:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker &#123;</span><br><span class="line">    [picker dismissViewControllerAnimated:true completion:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 权限判断</span><br><span class="line">- (BOOL)authorizationCamera &#123;</span><br><span class="line">    NSString *mediaType = AVMediaTypeVideo;</span><br><span class="line">    AVAuthorizationStatus authStatus = [AVCaptureDevice authorizationStatusForMediaType:mediaType];</span><br><span class="line">    if(authStatus == AVAuthorizationStatusRestricted || authStatus == AVAuthorizationStatusDenied)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/3334769-4c46b61075c6b345.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>系统SDK介绍-01</title>
    <link href="https://wudan-ios.github.io/2018/11/08/%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8-01/"/>
    <id>https://wudan-ios.github.io/2018/11/08/系统基础应用-01/</id>
    <published>2018-11-08T00:29:33.637Z</published>
    <updated>2018-11-08T00:30:36.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="系统SDK介绍"><a href="#系统SDK介绍" class="headerlink" title="系统SDK介绍"></a>系统SDK介绍</h3><ol><li>访问联系人，并选择信息</li><li>拨号</li><li>发送短信</li><li>发送邮件</li><li>本地通知</li></ol><h4 id="接口文件"><a href="#接口文件" class="headerlink" title="接口文件"></a>接口文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &lt;ContactsUI/ContactsUI.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@interface LZSystemSDKManager : NSObject</span><br><span class="line"></span><br><span class="line">+ (instancetype)manager;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 选择联系人  先添加权限</span><br><span class="line"></span><br><span class="line"> @param result 选择的信息</span><br><span class="line"> */</span><br><span class="line">- (void)lz_selecteContactResulet:(void(^)(CNContact *obj))result API_AVAILABLE(ios(9.0));</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 发送邮件</span><br><span class="line"></span><br><span class="line"> @param toRecipients 收件人群组</span><br><span class="line"> @param ccRecipients 抄送人群组</span><br><span class="line"> @param bccRecipients 密送人群组</span><br><span class="line"> @param theme 主题</span><br><span class="line"> @param emailContent 正文内容</span><br><span class="line"> @param isHTML 是否是HTML格式</span><br><span class="line"> @param result 发送结果</span><br><span class="line"> */</span><br><span class="line">- (void)lz_postEmialWithToRecipients:(NSArray&lt;NSString *&gt; *)toRecipients</span><br><span class="line">                        ccRecipients:(NSArray&lt;NSString *&gt; *)ccRecipients</span><br><span class="line">                       bccRecipients:(NSArray&lt;NSString *&gt; *)bccRecipients</span><br><span class="line">                               theme:(NSString *)theme</span><br><span class="line">                        emailContent:(NSString *)emailContent</span><br><span class="line">                              isHTML:(BOOL)isHTML</span><br><span class="line">                               reslt:(void(^)(NSInteger))result;</span><br><span class="line">/**</span><br><span class="line"> 发送短信</span><br><span class="line"></span><br><span class="line"> @param toRecipients 收件人群组</span><br><span class="line"> @param content 内容</span><br><span class="line"> @param result 发送结果</span><br><span class="line"> */</span><br><span class="line">- (void)lz_sendMessageWithToRecipients:(NSArray&lt;NSString *&gt; *)toRecipients</span><br><span class="line">                               content:(NSString *)content</span><br><span class="line">                               reslt:(void(^)(NSInteger))result;</span><br><span class="line">/**</span><br><span class="line"> 拨号</span><br><span class="line"></span><br><span class="line"> @param phoneNum 号码</span><br><span class="line"> */</span><br><span class="line">- (void)lz_dailPhone:(NSString *)phoneNum;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 开启定位服务</span><br><span class="line"></span><br><span class="line"> @param localResult 定位获取信息</span><br><span class="line"> */</span><br><span class="line">- (void)lz_openLocationService:(void(^)(id info))localResult;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> IOS 10的通知   推送消息 支持的音频  图片 &lt;= 10M  视频 &lt;= 50M </span><br><span class="line"> </span><br><span class="line"> @param body 消息内容</span><br><span class="line"> @param promptTone 提示音</span><br><span class="line"> @param soundName 音频</span><br><span class="line"> @param imageName 图片</span><br><span class="line"> @param movieName 视频</span><br><span class="line"> @param identifier 消息标识</span><br><span class="line"> */</span><br><span class="line">-(void)lz_pushNotification_IOS_10_Title:(NSString *)title</span><br><span class="line">                               subtitle:(NSString *)subtitle</span><br><span class="line">                                   body:(NSString *)body</span><br><span class="line">                             promptTone:(NSString *)promptTone</span><br><span class="line">                              soundName:(NSString *)soundName</span><br><span class="line">                              imageName:(NSString *)imageName</span><br><span class="line">                              movieName:(NSString *)movieName</span><br><span class="line">                           timeInterval:(NSTimeInterval)TimeInterval</span><br><span class="line">                                repeats:(BOOL)repeats</span><br><span class="line">                             Identifier:(NSString *)identifier API_AVAILABLE(ios(10.0));</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> IOS 10前的通知</span><br><span class="line"></span><br><span class="line"> @param timeInterval 延迟时间</span><br><span class="line"> @param repeatInterval 重复提醒次数</span><br><span class="line"> @param alertBody 内容</span><br><span class="line"> @param alertTitle 标题</span><br><span class="line"> @param alertAction 滑动文字</span><br><span class="line"> @param alertLaunchImage alertLaunchImage</span><br><span class="line"> @param soundName 声音 为空则为系统声音</span><br><span class="line"> @param userInfo 字典参数</span><br><span class="line"> */</span><br><span class="line">- (void)lz_pushNotifationWithTimeInterval:(NSTimeInterval)timeInterval</span><br><span class="line">                           repeatInterval:(NSInteger)repeatInterval</span><br><span class="line">                                alertBody:(NSString *)alertBody</span><br><span class="line">                               alertTitle:(NSString *)alertTitle</span><br><span class="line">                              alertAction:(NSString *)alertAction</span><br><span class="line">                         alertLaunchImage:(NSString *)alertLaunchImage</span><br><span class="line">                                soundName:(NSString *)soundName</span><br><span class="line">                                 userInfo:(NSDictionary *)userInfo;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure><h4 id="实现文件"><a href="#实现文件" class="headerlink" title="实现文件"></a>实现文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;LZSystemSDKManager.h&quot;</span><br><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line">#import &lt;MessageUI/MessageUI.h&gt;</span><br><span class="line">#import &lt;CoreLocation/CoreLocation.h&gt;</span><br><span class="line">#import &lt;UserNotifications/UserNotifications.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define kRootViewController  UIApplication.sharedApplication.delegate.window.rootViewController</span><br><span class="line"></span><br><span class="line">@interface LZSystemSDKManager () &lt;  CNContactPickerDelegate,</span><br><span class="line">                                    MFMailComposeViewControllerDelegate,</span><br><span class="line">                                    MFMessageComposeViewControllerDelegate,</span><br><span class="line">                                    CLLocationManagerDelegate&gt;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, copy) void (^selectContactResult)(CNContact *obj) API_AVAILABLE(ios(9.0));</span><br><span class="line">@property (nonatomic, copy) void (^postEmailResult)(NSInteger obj);</span><br><span class="line">@property (nonatomic, copy) void (^sendMessageResult)(NSInteger obj);</span><br><span class="line">@property (nonatomic, copy) void (^locakResult)(id info);</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation LZSystemSDKManager</span><br><span class="line"></span><br><span class="line">+ (instancetype)manager &#123;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    static LZSystemSDKManager *manager;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        manager = [[LZSystemSDKManager alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return manager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 选择联系人信息</span><br><span class="line">- (void)lz_selecteContactResulet:(void(^)(CNContact *obj))result API_AVAILABLE(ios(9.0)) &#123;</span><br><span class="line">    self.selectContactResult = result;</span><br><span class="line"></span><br><span class="line">    CNAuthorizationStatus status = [CNContactStore authorizationStatusForEntityType:CNEntityTypeContacts];</span><br><span class="line">    if (status == CNAuthorizationStatusNotDetermined) &#123;</span><br><span class="line">        CNContactStore *store = [[CNContactStore alloc] init];</span><br><span class="line">        [store requestAccessForEntityType:CNEntityTypeContacts completionHandler:^(BOOL granted, NSError * _Nullable error) &#123;</span><br><span class="line">            if (error) &#123;</span><br><span class="line">                [self showHUDTitle:@&quot;未获取访问权限&quot; info:@&quot;请前往设置中打开访问权限&quot;];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                CNContactPickerViewController * picker = [CNContactPickerViewController new];</span><br><span class="line">                picker.delegate = self;</span><br><span class="line">                picker.displayedPropertyKeys = @[CNContactPhoneNumbersKey];</span><br><span class="line">                [kRootViewController presentViewController: picker  animated:YES completion:nil];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (status == CNAuthorizationStatusAuthorized) &#123;</span><br><span class="line">        CNContactPickerViewController * picker = [CNContactPickerViewController new];</span><br><span class="line">        picker.delegate = self;</span><br><span class="line">        picker.displayedPropertyKeys = @[CNContactPhoneNumbersKey];</span><br><span class="line">        [kRootViewController presentViewController: picker  animated:YES completion:nil];</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        [self showHUDTitle:@&quot;未获取访问权限&quot; info:@&quot;请前往设置中打开访问权限&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - CNContactPickerDelegate</span><br><span class="line">-  (void)contactPicker:(CNContactPickerViewController *)picker didSelectContactProperty:(CNContactProperty *)contactProperty API_AVAILABLE(ios(9.0)) &#123;</span><br><span class="line">    CNContact *contact = contactProperty.contact;</span><br><span class="line">    self.selectContactResult(contact);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 发送邮件</span><br><span class="line">- (void)lz_postEmialWithToRecipients:(NSArray&lt;NSString *&gt; *)toRecipients</span><br><span class="line">                        ccRecipients:(NSArray&lt;NSString *&gt; *)ccRecipients</span><br><span class="line">                       bccRecipients:(NSArray&lt;NSString *&gt; *)bccRecipients</span><br><span class="line">                               theme:(NSString *)theme</span><br><span class="line">                        emailContent:(NSString *)emailContent</span><br><span class="line">                              isHTML:(BOOL)isHTML</span><br><span class="line">                               reslt:(nonnull void (^)(NSInteger))result &#123;</span><br><span class="line">    </span><br><span class="line">    self.postEmailResult = result;</span><br><span class="line">    MFMailComposeViewController *mailCompose = [[MFMailComposeViewController alloc] init];</span><br><span class="line">    mailCompose.mailComposeDelegate = self;</span><br><span class="line">    [mailCompose setToRecipients:toRecipients];</span><br><span class="line">    [mailCompose setCcRecipients:ccRecipients];</span><br><span class="line">    [mailCompose setBccRecipients:bccRecipients];</span><br><span class="line">    [mailCompose setSubject:theme];</span><br><span class="line">    [mailCompose setMessageBody:emailContent isHTML:isHTML];</span><br><span class="line">    [kRootViewController presentViewController:mailCompose animated:YES completion:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - MFMailComposeViewControllerDelegate的代理方法：</span><br><span class="line">-(void)mailComposeController:(MFMailComposeViewController *)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError *)error &#123;</span><br><span class="line">    [controller dismissViewControllerAnimated:YES completion:nil];</span><br><span class="line">     self.postEmailResult(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pragma mark - 发送短信</span><br><span class="line">- (void)lz_sendMessageWithToRecipients:(NSArray&lt;NSString *&gt; *)toRecipients content:(NSString *)content reslt:(nonnull void (^)(NSInteger))result &#123;</span><br><span class="line">    self.sendMessageResult = result;</span><br><span class="line">        MFMessageComposeViewController *messageVC = [[MFMessageComposeViewController alloc] init];</span><br><span class="line">    messageVC.recipients = toRecipients;</span><br><span class="line">    messageVC.body = content;</span><br><span class="line">    messageVC.messageComposeDelegate = self;</span><br><span class="line">    [kRootViewController presentViewController:messageVC animated:YES completion:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - MFMessageComposeViewControllerDelegate</span><br><span class="line">- (void)messageComposeViewController:(MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result &#123;</span><br><span class="line">    [controller dismissViewControllerAnimated:true completion:nil];</span><br><span class="line">    self.sendMessageResult(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 拨号</span><br><span class="line">- (void)lz_dailPhone:(NSString *)phoneNum &#123;</span><br><span class="line">    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:[NSString stringWithFormat:@&quot;tel:%@&quot;,phoneNum]]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 定位服务</span><br><span class="line">- (void)lz_openLocationService:(void(^)(id info))localResult &#123;</span><br><span class="line">    self.locakResult = localResult;</span><br><span class="line">    CLLocationManager *localManager = [[CLLocationManager alloc] init];</span><br><span class="line">    localManager.delegate = self;</span><br><span class="line">    localManager.desiredAccuracy = kCLLocationAccuracyBest;</span><br><span class="line">    localManager.distanceFilter = kCLLocationAccuracyNearestTenMeters;</span><br><span class="line">    [localManager requestWhenInUseAuthorization];</span><br><span class="line">    </span><br><span class="line">    if ([CLLocationManager locationServicesEnabled] ||</span><br><span class="line">        [CLLocationManager authorizationStatus] == kCLAuthorizationStatusAuthorizedWhenInUse ||</span><br><span class="line">        [CLLocationManager authorizationStatus] == kCLAuthorizationStatusAuthorizedAlways) &#123;</span><br><span class="line">        </span><br><span class="line">        [localManager startUpdatingLocation];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [self showHUDTitle:@&quot;未获取定位权限&quot; info:@&quot;请前往设置中打开定位权限&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark CLLocationManagerDelegate</span><br><span class="line">- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations &#123;</span><br><span class="line">    </span><br><span class="line">    CLLocation *currLocation = [locations lastObject];</span><br><span class="line">    CLLocation *infLocation = [[CLLocation alloc] initWithLatitude:currLocation.coordinate.latitude longitude:currLocation.coordinate.longitude];</span><br><span class="line">    </span><br><span class="line">    CLGeocoder *geocoder=[[CLGeocoder alloc]init];</span><br><span class="line">    </span><br><span class="line">    [geocoder reverseGeocodeLocation:infLocation completionHandler:^(NSArray&lt;CLPlacemark *&gt; * _Nullable placemarks, NSError * _Nullable error) &#123;</span><br><span class="line">        if (error !=nil || placemarks.count == 0) &#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;,error);</span><br><span class="line">            self.locakResult(nil);</span><br><span class="line">            return ;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        NSDictionary *infoDic = @&#123;@&quot;country&quot;:placemarks.firstObject.country,</span><br><span class="line">                                  @&quot;administrativeArea&quot;:placemarks.firstObject.administrativeArea,</span><br><span class="line">                                  @&quot;locality&quot;:placemarks.firstObject.locality,</span><br><span class="line">                                  @&quot;subLocality&quot;:placemarks.firstObject.subLocality,</span><br><span class="line">                                  @&quot;thoroughfare&quot;:placemarks.firstObject.thoroughfare,</span><br><span class="line">                                  @&quot;name&quot;:placemarks.firstObject.name</span><br><span class="line">                                  &#125;;</span><br><span class="line">        self.locakResult(infoDic);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error &#123;</span><br><span class="line">    [self showHUDTitle:@&quot;未获取定位权限&quot; info:@&quot;请前往设置中打开定位权限&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 提示框</span><br><span class="line">- (void)showHUDTitle:(NSString *)title info:(NSString *)info &#123;</span><br><span class="line">    </span><br><span class="line">    UIAlertController *alterController = [UIAlertController alertControllerWithTitle:title message:info</span><br><span class="line">                                                                      preferredStyle:UIAlertControllerStyleAlert];</span><br><span class="line">    UIAlertAction *cancal = [UIAlertAction actionWithTitle:@&quot;取消&quot; style:UIAlertActionStyleCancel handler:nil];</span><br><span class="line">    UIAlertAction *sure = [UIAlertAction actionWithTitle:@&quot;确定&quot; style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class="line">        NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];</span><br><span class="line">        if ([[UIApplication sharedApplication] canOpenURL:url]) &#123;</span><br><span class="line">            if (@available(iOS 10.0, *)) &#123;</span><br><span class="line">                [[UIApplication sharedApplication] openURL:url options:@&#123;&#125; completionHandler:nil];</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    [alterController addAction:cancal];</span><br><span class="line">    [alterController addAction:sure];</span><br><span class="line">    </span><br><span class="line">    [kRootViewController presentViewController:alterController animated:true completion:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - IOS 10前的通知</span><br><span class="line">- (void)lz_pushNotifationWithTimeInterval:(NSTimeInterval)timeInterval</span><br><span class="line">                           repeatInterval:(NSInteger)repeatInterval</span><br><span class="line">                                alertBody:(NSString *)alertBody</span><br><span class="line">                               alertTitle:(NSString *)alertTitle</span><br><span class="line">                              alertAction:(NSString *)alertAction</span><br><span class="line">                         alertLaunchImage:(NSString *)alertLaunchImage</span><br><span class="line">                                soundName:(NSString *)soundName</span><br><span class="line">                                 userInfo:(NSDictionary *)userInfo &#123;</span><br><span class="line">    // 定义本地通知对象</span><br><span class="line">    UILocalNotification *notification = [[UILocalNotification alloc] init];</span><br><span class="line">    // 设置调用时间</span><br><span class="line">    notification.timeZone = [NSTimeZone localTimeZone];</span><br><span class="line">    //通知触发的时间，10s以后</span><br><span class="line">    notification.fireDate = [NSDate dateWithTimeIntervalSinceNow:timeInterval];</span><br><span class="line">    // 通知重复次数</span><br><span class="line">    notification.repeatInterval = repeatInterval;</span><br><span class="line">    // 当前日历，使用前最好设置时区等信息以便能够自动同步时间</span><br><span class="line">    notification.repeatCalendar = [NSCalendar currentCalendar];</span><br><span class="line">    </span><br><span class="line">    //设置通知属性</span><br><span class="line">    // 通知主体</span><br><span class="line">    notification.alertBody = alertBody;</span><br><span class="line">    if (@available(iOS 8.2, *)) &#123;</span><br><span class="line">        notification.alertTitle = alertTitle;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // Fallback on earlier versions</span><br><span class="line">    &#125;</span><br><span class="line">    // 应用程序图标右上角显示的消息数</span><br><span class="line">    notification.applicationIconBadgeNumber += 1;</span><br><span class="line">    // 待机界面的滑动动作提示</span><br><span class="line">    notification.alertAction = alertAction;</span><br><span class="line">    // 通过点击通知打开应用时的启动图片,这里使用程序启动图片</span><br><span class="line">    notification.alertLaunchImage = alertLaunchImage;</span><br><span class="line">    // 收到通知时播放的声音，默认消息声音</span><br><span class="line">    notification.soundName = soundName.length == 0 ? UILocalNotificationDefaultSoundName : soundName;</span><br><span class="line">    </span><br><span class="line">    //设置用户信息</span><br><span class="line">    notification.userInfo = userInfo;</span><br><span class="line">    </span><br><span class="line">    //调用通知</span><br><span class="line">    [[UIApplication sharedApplication] scheduleLocalNotification:notification];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - IOS 10的通知</span><br><span class="line">-(void)lz_pushNotification_IOS_10_Title:(NSString *)title</span><br><span class="line">                               subtitle:(NSString *)subtitle</span><br><span class="line">                                   body:(NSString *)body</span><br><span class="line">                             promptTone:(NSString *)promptTone</span><br><span class="line">                              soundName:(NSString *)soundName</span><br><span class="line">                              imageName:(NSString *)imageName</span><br><span class="line">                              movieName:(NSString *)movieName</span><br><span class="line">                           timeInterval:(NSTimeInterval)TimeInterval</span><br><span class="line">                                repeats:(BOOL)repeats</span><br><span class="line">                             Identifier:(NSString *)identifier API_AVAILABLE(ios(10.0)) &#123;</span><br><span class="line">    </span><br><span class="line">    //获取通知中心用来激活新建的通知</span><br><span class="line">    UNUserNotificationCenter * center  = [UNUserNotificationCenter currentNotificationCenter];</span><br><span class="line">    UNMutableNotificationContent * content = [[UNMutableNotificationContent alloc] init];</span><br><span class="line">    content.title = title;</span><br><span class="line">    content.subtitle = subtitle;</span><br><span class="line">    content.body = body;</span><br><span class="line">    </span><br><span class="line">    //通知的提示音</span><br><span class="line">    if ([promptTone containsString:@&quot;.&quot;]) &#123;</span><br><span class="line">        UNNotificationSound *sound = [UNNotificationSound soundNamed:promptTone];</span><br><span class="line">        content.sound = sound;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    __block UNNotificationAttachment *imageAtt;</span><br><span class="line">    __block UNNotificationAttachment *movieAtt;</span><br><span class="line">    __block UNNotificationAttachment *soundAtt;</span><br><span class="line">    </span><br><span class="line">    if ([imageName containsString:@&quot;.&quot;]) &#123;</span><br><span class="line">        [self addNotificationAttachmentContent:content attachmentName:imageName options:nil withCompletion:^(NSError *error, UNNotificationAttachment *notificationAtt) &#123;</span><br><span class="line">            imageAtt = [notificationAtt copy];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([soundName containsString:@&quot;.&quot;]) &#123;</span><br><span class="line">        [self addNotificationAttachmentContent:content attachmentName:soundName options:nil withCompletion:^(NSError *error, UNNotificationAttachment *notificationAtt) &#123;</span><br><span class="line">            soundAtt = [notificationAtt copy];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([movieName containsString:@&quot;.&quot;]) &#123;</span><br><span class="line">        // 在这里截取视频的第10s为视频的缩略图 ：UNNotificationAttachmentOptionsThumbnailTimeKey</span><br><span class="line">        [self addNotificationAttachmentContent:content attachmentName:movieName options:@&#123;@&quot;UNNotificationAttachmentOptionsThumbnailTimeKey&quot;:@10&#125; withCompletion:^(NSError *error, UNNotificationAttachment *notificationAtt) &#123;</span><br><span class="line">            movieAtt = [notificationAtt copy];</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSMutableArray * array = [NSMutableArray array];</span><br><span class="line">    </span><br><span class="line">    if (imageAtt) &#123;</span><br><span class="line">        [array addObject:imageAtt];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (soundAtt) &#123;</span><br><span class="line">        [array addObject:soundAtt];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (movieAtt) &#123;</span><br><span class="line">        [array addObject:movieAtt];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    content.attachments = array;</span><br><span class="line">    </span><br><span class="line">    //添加通知下拉动作按钮</span><br><span class="line">    NSMutableArray * actionMutableArray = [NSMutableArray array];</span><br><span class="line">    UNNotificationAction * actionA = [UNNotificationAction actionWithIdentifier:@&quot;identifierNeedUnlock&quot; title:@&quot;进入应用&quot; options:UNNotificationActionOptionAuthenticationRequired];</span><br><span class="line">    UNNotificationAction * actionB = [UNNotificationAction actionWithIdentifier:@&quot;identifierRed&quot; title:@&quot;忽略&quot; options:UNNotificationActionOptionDestructive];</span><br><span class="line">    [actionMutableArray addObjectsFromArray:@[actionA,actionB]];</span><br><span class="line">    </span><br><span class="line">    if (actionMutableArray.count &gt; 1) &#123;</span><br><span class="line">        UNNotificationCategory * category = [UNNotificationCategory categoryWithIdentifier:@&quot;categoryNoOperationAction&quot; actions:actionMutableArray intentIdentifiers:@[] options:UNNotificationCategoryOptionCustomDismissAction];</span><br><span class="line">        [center setNotificationCategories:[NSSet setWithObjects:category, nil]];</span><br><span class="line">        content.categoryIdentifier = @&quot;categoryNoOperationAction&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // UNTimeIntervalNotificationTrigger   延时推送</span><br><span class="line">    // UNCalendarNotificationTrigger       定时推送</span><br><span class="line">    // UNLocationNotificationTrigger       位置变化推送</span><br><span class="line">    BOOL repeat = (TimeInterval &gt; 60 &amp;&amp; repeats) ? true : false;</span><br><span class="line">    UNTimeIntervalNotificationTrigger * tirgger = [UNTimeIntervalNotificationTrigger triggerWithTimeInterval:TimeInterval repeats:repeat];</span><br><span class="line">    </span><br><span class="line">    //建立通知请求</span><br><span class="line">    UNNotificationRequest * request = [UNNotificationRequest requestWithIdentifier:identifier content:content trigger:tirgger];</span><br><span class="line">    </span><br><span class="line">    //将建立的通知请求添加到通知中心</span><br><span class="line">    [center addNotificationRequest:request withCompletionHandler:^(NSError * _Nullable error) &#123;</span><br><span class="line">        NSLog(@&quot;%@本地推送 :( 报错 %@&quot;,identifier, error);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 增加通知附件</span><br><span class="line"> </span><br><span class="line"> @param content 通知内容</span><br><span class="line"> @param attachmentName 附件名称</span><br><span class="line"> @param options 相关选项</span><br><span class="line"> @param completion 结果回调</span><br><span class="line"> */</span><br><span class="line">-(void)addNotificationAttachmentContent:(UNMutableNotificationContent *)content attachmentName:(NSString *)attachmentName  options:(NSDictionary *)options withCompletion:(void(^)(NSError * error , UNNotificationAttachment * notificationAtt))completion  API_AVAILABLE(ios(10.0)) &#123;</span><br><span class="line">    </span><br><span class="line">    NSArray * arr = [attachmentName componentsSeparatedByString:@&quot;.&quot;];</span><br><span class="line">    </span><br><span class="line">    NSError * error;</span><br><span class="line">    </span><br><span class="line">    NSString * path = [[NSBundle mainBundle]pathForResource:arr[0] ofType:arr[1]];</span><br><span class="line">    </span><br><span class="line">    UNNotificationAttachment * attachment = [UNNotificationAttachment attachmentWithIdentifier:[NSString stringWithFormat:@&quot;notificationAtt_%@&quot;,arr[1]] URL:[NSURL fileURLWithPath:path] options:options error:&amp;error];</span><br><span class="line">    </span><br><span class="line">    if (error) &#123;</span><br><span class="line">        NSLog(@&quot;attachment error %@&quot;, error);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    completion(error,attachment);</span><br><span class="line">    content.launchImageName = attachmentName;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;系统SDK介绍&quot;&gt;&lt;a href=&quot;#系统SDK介绍&quot; class=&quot;headerlink&quot; title=&quot;系统SDK介绍&quot;&gt;&lt;/a&gt;系统SDK介绍&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;访问联系人，并选择信息&lt;/li&gt;
&lt;li&gt;拨号&lt;/li&gt;
&lt;li&gt;发送短信&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS系统封装：QQ侧边菜单</title>
    <link href="https://wudan-ios.github.io/2018/09/30/iOS%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85%EF%BC%9AQQ%E4%BE%A7%E8%BE%B9%E8%8F%9C%E5%8D%95/"/>
    <id>https://wudan-ios.github.io/2018/09/30/iOS系统封装：QQ侧边菜单/</id>
    <published>2018-09-30T02:12:00.000Z</published>
    <updated>2018-11-05T11:11:31.043Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@interface LZSliderContainerViewController : UIViewController</span><br><span class="line">// 是否允许侧滑手势</span><br><span class="line">@property (nonatomic, assign) BOOL allowOpenSliderView;</span><br><span class="line"></span><br><span class="line">// 单例</span><br><span class="line">+ (instancetype)mamager;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 初始化方法</span><br><span class="line"></span><br><span class="line"> @param mainController 主页面控制器</span><br><span class="line"> @param sliderController 菜单页面控制器</span><br><span class="line"> @param space 空隙</span><br><span class="line"> @return UIViewController</span><br><span class="line"> */</span><br><span class="line">- (UIViewController *)lz_setupMainController:(UIViewController *)mainController sliderController:(UIViewController *)sliderController space:(CGFloat)space;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 打开侧边菜单</span><br><span class="line"> */</span><br><span class="line">- (void)lz_openSlderView;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 关闭侧边菜单</span><br><span class="line"> */</span><br><span class="line">- (void)lz_closeSliderView;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;LZSliderContainerViewController.h&quot;</span><br><span class="line"></span><br><span class="line">@interface UIView (Frame)</span><br><span class="line"></span><br><span class="line">@property (nonatomic) CGFloat left;</span><br><span class="line">@property (nonatomic) CGFloat right;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation UIView (Frame)</span><br><span class="line"></span><br><span class="line">- (CGFloat)left &#123;</span><br><span class="line">    return self.frame.origin.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setLeft:(CGFloat)x &#123;</span><br><span class="line">    CGRect frame = self.frame;</span><br><span class="line">    frame.origin.x = x;</span><br><span class="line">    self.frame = frame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (CGFloat)right &#123;</span><br><span class="line">    return self.frame.origin.x + self.frame.size.width;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setRight:(CGFloat)right &#123;</span><br><span class="line">    CGRect frame = self.frame;</span><br><span class="line">    frame.origin.x = right - frame.size.width;</span><br><span class="line">    self.frame = frame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface LZSliderContainerViewController ()</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) UIViewController *mainController;</span><br><span class="line">@property (nonatomic, strong) UIViewController *sliderController;</span><br><span class="line">@property (nonatomic, assign) CGFloat spece;</span><br><span class="line">@property (nonatomic, assign) CGFloat panStartX;</span><br><span class="line">@property (nonatomic, strong) UIView *coverView;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation LZSliderContainerViewController</span><br><span class="line">#pragma mark - 单例方法</span><br><span class="line">+ (instancetype)mamager &#123;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    static LZSliderContainerViewController *vc;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        vc = [[LZSliderContainerViewController alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return vc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 初始化方法</span><br><span class="line">- (UIViewController *)lz_setupMainController:(UIViewController *)mainController sliderController:(UIViewController *)sliderController space:(CGFloat)space &#123;</span><br><span class="line">    [self lz_addChildControllerWithMainController:mainController sliderController:sliderController];</span><br><span class="line">    [self lz_setupCoverView];</span><br><span class="line">    _spece = space;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 配置遮罩层</span><br><span class="line">- (void)lz_setupCoverView &#123;</span><br><span class="line">    self.coverView = [[UIView alloc] init];</span><br><span class="line">    self.coverView.frame = UIScreen.mainScreen.bounds;</span><br><span class="line">    self.coverView.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0];</span><br><span class="line">    self.coverView.hidden = true;</span><br><span class="line">    [self.coverView addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(lz_closeSliderView)]];</span><br><span class="line">    [self.view addSubview:self.coverView];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 添加VC</span><br><span class="line">- (void)lz_addChildControllerWithMainController:(UIViewController *)mainController sliderController:(UIViewController *)sliderController &#123;</span><br><span class="line">    [self addChildViewController:mainController];</span><br><span class="line">    [mainController didMoveToParentViewController:self];</span><br><span class="line">    mainController.view.frame = UIScreen.mainScreen.bounds;</span><br><span class="line">    [self.view addSubview:mainController.view];</span><br><span class="line">    </span><br><span class="line">    [self addChildViewController:sliderController];</span><br><span class="line">    [sliderController didMoveToParentViewController:self];</span><br><span class="line">    sliderController.view.frame = CGRectMake(-UIScreen.mainScreen.bounds.size.width, 0, UIScreen.mainScreen.bounds.size.width, UIScreen.mainScreen.bounds.size.height);</span><br><span class="line">    [self.view addSubview:sliderController.view];</span><br><span class="line">    </span><br><span class="line">    self.mainController = mainController;</span><br><span class="line">    self.sliderController = sliderController;</span><br><span class="line">    </span><br><span class="line">    [self lz_setupGusture];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 添加平移手势</span><br><span class="line">- (void)lz_setupGusture &#123;</span><br><span class="line">    UIPanGestureRecognizer *panGusture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(lz_panGestureRecognizer:)];</span><br><span class="line">    [self.view addGestureRecognizer:panGusture];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pragma mark - UIPanGestureRecognizer Action</span><br><span class="line">- (void)lz_panGestureRecognizer:(UIPanGestureRecognizer *)sender &#123;</span><br><span class="line">    UIView *rootView = self.mainController.view;</span><br><span class="line">    UIView *menuView = self.sliderController.view;</span><br><span class="line">    </span><br><span class="line">    if (sender.state == UIGestureRecognizerStateBegan) &#123;</span><br><span class="line">        CGFloat startPointX = [sender translationInView:self.view].x;</span><br><span class="line">        self.panStartX = startPointX;</span><br><span class="line">        self.coverView.hidden = false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (self.panStartX &gt;= 40 &amp;&amp; rootView.frame.origin.x == 0) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    CGFloat translationX = [sender translationInView:rootView].x;</span><br><span class="line">    CGFloat rootViewX = rootView.frame.origin.x;</span><br><span class="line">    </span><br><span class="line">    rootViewX = [self lz_minmumWithValueA:(rootViewX + translationX) valueB:(UIScreen.mainScreen.bounds.size.width - self.spece)];</span><br><span class="line">    rootViewX = [self lz_maxmumWithValueA:rootViewX valueB:0];</span><br><span class="line">    </span><br><span class="line">    rootView.left = rootViewX;</span><br><span class="line">    menuView.right = rootView.left;</span><br><span class="line">    self.coverView.frame = rootView.frame;</span><br><span class="line">    </span><br><span class="line">    CGFloat aphal = 0.5 * rootView.frame.origin.x / (UIScreen.mainScreen.bounds.size.width - self.spece);</span><br><span class="line">    self.coverView.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:aphal];</span><br><span class="line">    </span><br><span class="line">    [sender setTranslation:CGPointZero inView:rootView];</span><br><span class="line">    </span><br><span class="line">    if (sender.state == UIGestureRecognizerStateEnded || sender.state == UIGestureRecognizerStateCancelled) &#123;</span><br><span class="line">        if (rootViewX &gt;= (UIScreen.mainScreen.bounds.size.width - self.spece)/2) &#123;</span><br><span class="line">            [self lz_openSlderView];</span><br><span class="line">        &#125; else&#123;</span><br><span class="line">            [self lz_closeSliderView];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 打开侧边菜单</span><br><span class="line">- (void)lz_openSlderView &#123;</span><br><span class="line">    [self lz_setupGusture];</span><br><span class="line">    </span><br><span class="line">    UIView *rootView = self.mainController.view;</span><br><span class="line">    UIView *menuView = self.sliderController.view;</span><br><span class="line">    </span><br><span class="line">    self.coverView.hidden = false;</span><br><span class="line">    </span><br><span class="line">    [UIView animateWithDuration:0.4 animations:^&#123;</span><br><span class="line">        rootView.left = UIScreen.mainScreen.bounds.size.width - self.spece;</span><br><span class="line">        menuView.right = rootView.left;</span><br><span class="line">        self.coverView.frame = rootView.frame;</span><br><span class="line">        self.coverView.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0.5];</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 关闭侧边菜单</span><br><span class="line">- (void)lz_closeSliderView &#123;</span><br><span class="line">    UIView *rootView = self.mainController.view;</span><br><span class="line">    UIView *menuView = self.sliderController.view;</span><br><span class="line">    </span><br><span class="line">    [UIView animateWithDuration:0.4 animations:^&#123;</span><br><span class="line">        self.coverView.backgroundColor = [[UIColor blackColor] colorWithAlphaComponent:0];</span><br><span class="line">        rootView.left = 0;</span><br><span class="line">        menuView.right = rootView.left;</span><br><span class="line">        self.coverView.frame = rootView.frame;</span><br><span class="line">    &#125; completion:^(BOOL finished) &#123;</span><br><span class="line">        if (finished) &#123;</span><br><span class="line">            self.coverView.hidden = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 比较大小取最小值</span><br><span class="line">- (CGFloat)lz_minmumWithValueA:(CGFloat)a valueB:(CGFloat)b &#123;</span><br><span class="line">    return a &gt; b ? b : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 比较大小取最大值</span><br><span class="line">- (CGFloat)lz_maxmumWithValueA:(CGFloat)a valueB:(CGFloat)b &#123;</span><br><span class="line">    return a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Setter</span><br><span class="line">- (void)setAllowOpenSliderView:(BOOL)allowOpenSliderView &#123;</span><br><span class="line">    _allowOpenSliderView = allowOpenSliderView;</span><br><span class="line">    if (allowOpenSliderView) &#123;</span><br><span class="line">        [self lz_setupGusture];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (UIGestureRecognizer *pan in self.view.gestureRecognizers) &#123;</span><br><span class="line">            [self.view removeGestureRecognizer:pan];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>AppDelegate中设置为根控制器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.window.rootViewController = [[LZSliderContainerViewController mamager] lz_setupMainController:tab sliderController:sldier space:200];</span><br></pre></td></tr></table></figure></p><p>// 单独打开或关闭<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 打开页面</span><br><span class="line">[[LZSliderContainerViewController mamager] lz_openSlderView];</span><br><span class="line">// 关闭页面</span><br><span class="line">[[LZSliderContainerViewController mamager] lz_closeSliderView];</span><br></pre></td></tr></table></figure></p><p>默认所有页面都是打开的，如果需要关闭<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewWillAppear:(BOOL)animated&#123;</span><br><span class="line">    [super viewWillAppear:animated];</span><br><span class="line">    [LZSliderContainerViewController mamager].allowOpenSliderView = NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidDisappear:(BOOL)animated &#123;</span><br><span class="line">    [super viewDidDisappear:animated];</span><br><span class="line">    [LZSliderContainerViewController mamager].allowOpenSliderView = true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果图<br><img src="http://i2.bvimg.com/667578/85fad1a82178134d.gif" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据存储：FMDB-模型进行存取</title>
    <link href="https://wudan-ios.github.io/2018/09/05/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%EF%BC%9AFMDB-%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E5%AD%98%E5%8F%96/"/>
    <id>https://wudan-ios.github.io/2018/09/05/数据存储：FMDB-模型进行存取/</id>
    <published>2018-09-05T02:12:00.000Z</published>
    <updated>2018-09-20T02:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-db9208d961eb67c2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼图"></p><p>写这个Blog的目的是为了记录的学习经历，代码写的不是很好，希望读者理解。<br>日常对数据库的操作，需要设计字段，感觉太繁琐了，想找个简化的方法，就想通过这样进行实现，这也就是一种思考方式。实际实现还是看需求。具体看代码：<br>1、导入FMDB<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import FMDB</span><br></pre></td></tr></table></figure></p><p>2、使用单利模式和必要属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static let defaultManger = WDDataBaseManager()</span><br><span class="line">typealias successBlock = () -&gt;Void</span><br><span class="line">typealias failBlock = () -&gt;Void</span><br><span class="line">private var tableName:String?</span><br></pre></td></tr></table></figure></p><p>3、懒加载创建数据库（名称我随便取得）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lazy var fmdb:FMDatabase = &#123;</span><br><span class="line">        let path = NSHomeDirectory().appending(&quot;/Documents/testDB.db&quot;)</span><br><span class="line">        let db = FMDatabase(path: path)</span><br><span class="line">        return db</span><br><span class="line">    &#125;()</span><br></pre></td></tr></table></figure></p><p>4、创建表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func creatTable(tableName:String) -&gt; Void &#123;</span><br><span class="line">        fmdb.open()</span><br><span class="line">        self.tableName = tableName</span><br><span class="line">        let creatSql = &quot;create table if not exists \(tableName) (id integer primary key autoincrement,model BLOB)&quot;</span><br><span class="line">        let result = fmdb.executeUpdate(creatSql, withArgumentsIn:[])</span><br><span class="line">        if result&#123;</span><br><span class="line">            print(&quot;创建表成功&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>5、删除表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func dropTable() -&gt; Void &#123;</span><br><span class="line">       let sql = &quot;drop table if exists &quot; + tableName!</span><br><span class="line">       let result = fmdb.executeUpdate(sql, withArgumentsIn:[])</span><br><span class="line">       if result&#123;</span><br><span class="line">           print(&quot;删除表成功&quot;)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>6、插入数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func insert(model:NSObject, successBlock: successBlock, failBlock: failBlock) -&gt; Void &#123;</span><br><span class="line">        let modelData = try! NSKeyedArchiver.archivedData(withRootObject: model, requiringSecureCoding: false)</span><br><span class="line">        let insertSql = &quot;insert into &quot; + tableName! + &quot; (model) values(?)&quot;</span><br><span class="line">        do &#123;</span><br><span class="line">            try fmdb.executeUpdate(insertSql, values: [modelData])</span><br><span class="line">            successBlock()</span><br><span class="line">        &#125; catch &#123;</span><br><span class="line">            print(fmdb.lastError())</span><br><span class="line">            failBlock()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>7、更新表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func update(model:NSObject,uid:Int32, successBlock: successBlock, failBlock: failBlock) -&gt; Void &#123;</span><br><span class="line">        let modelData = try! NSKeyedArchiver.archivedData(withRootObject: model, requiringSecureCoding: false)</span><br><span class="line">        let updateSql = &quot;update &quot; + tableName! + &quot; set model = ? where id = ?&quot;</span><br><span class="line">        do &#123;</span><br><span class="line">            try fmdb.executeUpdate(updateSql, values: [modelData, uid])</span><br><span class="line">            successBlock()</span><br><span class="line">        &#125; catch &#123;</span><br><span class="line">            print(fmdb.lastError())</span><br><span class="line">            failBlock()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>8、查询数据（这是查询所有数据，其他按需求设计）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">func selectAll() -&gt; [NSObject] &#123;</span><br><span class="line">        var tmpArr = [NSObject]()</span><br><span class="line">        let selectSql = &quot;select * from &quot; + tableName!</span><br><span class="line">        do &#123;</span><br><span class="line">            let rs = try fmdb.executeQuery(selectSql, values:nil)</span><br><span class="line">            while rs.next() &#123;</span><br><span class="line">                var model = NSObject()</span><br><span class="line">                let modelData  = rs.data(forColumn:&quot;model&quot;)</span><br><span class="line">                let id = rs.int(forColumn: &quot;id&quot;)</span><br><span class="line">                model = try! NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(modelData!) as! NSObject</span><br><span class="line">                model.wd_fmdb_id = id</span><br><span class="line">                tmpArr.append(model)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch &#123;</span><br><span class="line">            print(fmdb.lastError())</span><br><span class="line">        &#125;</span><br><span class="line">        return tmpArr</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>9、删除数据（这是根据Id删除的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func delete(uid:Int32, successBlock: successBlock, failBlock: failBlock) -&gt; Void &#123;</span><br><span class="line">        let deleteSql = &quot;delete from &quot; + tableName! + &quot; where id = ?&quot;</span><br><span class="line">        do &#123;</span><br><span class="line">            try fmdb.executeUpdate(deleteSql, values: [uid])</span><br><span class="line">            successBlock()</span><br><span class="line">        &#125; catch &#123;</span><br><span class="line">            print(fmdb.lastError())</span><br><span class="line">            failBlock()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>10、新增分类添加默认Id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private var wd_id_key: String = &quot;key&quot;</span><br><span class="line"></span><br><span class="line">extension NSObject &#123;</span><br><span class="line">    open var wd_fmdb_id:Int32? &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            return (objc_getAssociatedObject(self, &amp;wd_id_key) as? Int32)</span><br><span class="line">        &#125; set(newValue) &#123;</span><br><span class="line">            objc_setAssociatedObject(self, &amp;wd_id_key, newValue, objc_AssociationPolicy.OBJC_ASSOCIATION_ASSIGN)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>11、使用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//1. 在Appdelegate中打开数据库</span><br><span class="line">func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool &#123;</span><br><span class="line">        DataBaseManager.defaultManger.creatTable()</span><br><span class="line">        return true</span><br><span class="line"> &#125;</span><br><span class="line">//2、添加数据</span><br><span class="line">WDDataBaseManager.defaultManger.insert(model: model, successBlock: &#123;</span><br><span class="line">                print(&quot;成功&quot;)</span><br><span class="line">            &#125;, failBlock: &#123;</span><br><span class="line">                 print(&quot;失败&quot;)</span><br><span class="line">            &#125;)</span><br><span class="line">//3、修改数据</span><br><span class="line">WDDataBaseManager.defaultManger.update(model: model, uid: self.model!.wd_fmdb_id!, successBlock: &#123;</span><br><span class="line">               print(&quot;成功&quot;)</span><br><span class="line">            &#125;, failBlock: &#123;</span><br><span class="line">                print(&quot;失败&quot;)</span><br><span class="line">            &#125;)</span><br><span class="line">//4、删除数据</span><br><span class="line">WDDataBaseManager.defaultManger.delete(uid: model.wd_fmdb_id!, successBlock: &#123;</span><br><span class="line">                print(&quot;成功&quot;)</span><br><span class="line">            &#125;, failBlock: &#123;</span><br><span class="line">                print(&quot;失败&quot;)</span><br><span class="line">            &#125;)</span><br><span class="line">// 5、查询数据</span><br><span class="line">WDDataBaseManager.defaultManger.selectAll()</span><br></pre></td></tr></table></figure></p><ul><li>遵循NSCoding 重写三个方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">class Model: NSObject , NSCoding&#123;</span><br><span class="line"></span><br><span class="line">    public var name:String?</span><br><span class="line">    public var phone:String?</span><br><span class="line">    public var addres:String?</span><br><span class="line">    </span><br><span class="line">    override init() &#123;</span><br><span class="line">        super.init()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func encode(with aCoder: NSCoder) &#123;</span><br><span class="line">        aCoder.encode(name, forKey: &quot;name&quot;)</span><br><span class="line">        aCoder.encode(phone, forKey: &quot;phone&quot;)</span><br><span class="line">        aCoder.encode(addres, forKey: &quot;addres&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    required init?(coder aDecoder: NSCoder) &#123;</span><br><span class="line">        super.init()</span><br><span class="line">        self.name = aDecoder.decodeObject(forKey: &quot;name&quot;) as? String</span><br><span class="line">        self.addres = aDecoder.decodeObject(forKey: &quot;addres&quot;) as? String</span><br><span class="line">        self.phone = aDecoder.decodeObject(forKey: &quot;phone&quot;) as? String</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>12、效果图</p><p><img src="https://upload-images.jianshu.io/upload_images/3334769-309b5904357f7e30.gif?imageMogr2/auto-orient/strip" alt="效果图"></p><p>13、Demo地址:<a href="https://github.com/wudan-ios/FMDB-Model.git" target="_blank" rel="noopener">https://github.com/wudan-ios/FMDB-Model.git</a></p><hr><p>补充Objective-C版本<br>1、接口文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@interface NSObject (addId)</span><br><span class="line"></span><br><span class="line">@property (nonatomic) NSInteger wd_fmdb_id;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">typedef void(^successBlock)(void);</span><br><span class="line">typedef void(^failBlock)(void);</span><br><span class="line"></span><br><span class="line">@interface WDDataBaseManager : NSObject</span><br><span class="line"></span><br><span class="line">+ (instancetype)manager;</span><br><span class="line">/** 创建表 */</span><br><span class="line">- (void)createTableWithName:(NSString *)name;</span><br><span class="line">/** 删除表 */</span><br><span class="line">- (void)dropTable;</span><br><span class="line">/** 添加数据 */</span><br><span class="line">- (void)insertDataWithModel:(NSObject *)model successBlock:(successBlock)aSuccessBlock failBlock:(failBlock)aFailBlock;</span><br><span class="line">/** 更新数据 */</span><br><span class="line">- (void)updateDataWithModel:(NSObject *)model uid:(NSInteger)aUid successBlock:(successBlock)aSuccessBlock failBlock:(failBlock)aFailBlock;</span><br><span class="line">/** 删除数据 */</span><br><span class="line">- (void)deleteDataWithUid:(NSInteger)uid successBlock:(successBlock)aSuccessBlock failBlock:(failBlock)aFailBlock;</span><br><span class="line">/** 查询全部数据 */</span><br><span class="line">- (NSArray&lt;NSObject *&gt; *)queryAllData;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure></p><p>2、实现文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;WDDataBaseManager.h&quot;</span><br><span class="line">#import &lt;FMDB.h&gt;</span><br><span class="line">#import &lt;objc/runtime.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static char *wd_id_key = &quot;key&quot;;</span><br><span class="line">@implementation NSObject (addId)</span><br><span class="line"></span><br><span class="line">- (NSInteger)wd_fmdb_id &#123;</span><br><span class="line">    NSNumber *numberValue = objc_getAssociatedObject(self, wd_id_key);</span><br><span class="line">    return numberValue.integerValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)setWd_fmdb_id:(NSInteger)wd_fmdb_id &#123;</span><br><span class="line">    objc_setAssociatedObject(self, wd_id_key, @(wd_fmdb_id), OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface WDDataBaseManager ()</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) FMDatabase *fmdb;</span><br><span class="line">@property (nonatomic, copy) NSString *tableName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation WDDataBaseManager</span><br><span class="line"></span><br><span class="line">+ (instancetype)manager &#123;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    static WDDataBaseManager *manager = nil;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        manager = [[WDDataBaseManager alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return manager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)createTableWithName:(NSString *)name &#123;</span><br><span class="line">    [self.fmdb open];</span><br><span class="line">    self.tableName = name;</span><br><span class="line">    NSString *sql = [NSString stringWithFormat:@&quot;create table if not exists %@ (id integer primary key autoincrement,model BLOB)&quot;, name];</span><br><span class="line">    BOOL result = [self.fmdb executeUpdate:sql];</span><br><span class="line">    if (result) &#123;</span><br><span class="line">        NSLog(@&quot;表创建成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)dropTable &#123;</span><br><span class="line">    NSString *sql = [NSString stringWithFormat:@&quot;drop table if exists %@&quot;, self.tableName];</span><br><span class="line">    BOOL result = [self.fmdb executeUpdate:sql];</span><br><span class="line">    if (result) &#123;</span><br><span class="line">        NSLog(@&quot;表删除成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)insertDataWithModel:(NSObject *)model successBlock:(successBlock)aSuccessBlock failBlock:(failBlock)aFailBlock &#123;</span><br><span class="line">    NSData *modelData = [NSKeyedArchiver archivedDataWithRootObject:model];</span><br><span class="line">    NSString *sql = [NSString stringWithFormat:@&quot;insert into %@ (model) values(?)&quot;, self.tableName];</span><br><span class="line">    BOOL result = [self.fmdb executeUpdate:sql withArgumentsInArray:@[modelData]];</span><br><span class="line">    if (result) &#123;</span><br><span class="line">        aSuccessBlock();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        aFailBlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)updateDataWithModel:(NSObject *)model uid:(NSInteger)aUid successBlock:(successBlock)aSuccessBlock failBlock:(failBlock)aFailBlock &#123;</span><br><span class="line">    NSData *modelData = [NSKeyedArchiver archivedDataWithRootObject:model];</span><br><span class="line">    NSString *sql = [NSString stringWithFormat:@&quot;update %@ set model = ? where id = ?&quot;, self.tableName];</span><br><span class="line">    BOOL result = [self.fmdb executeUpdate:sql withArgumentsInArray:@[modelData, @(aUid)]];</span><br><span class="line">    if (result) &#123;</span><br><span class="line">        aSuccessBlock();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        aFailBlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)deleteDataWithUid:(NSInteger)uid successBlock:(successBlock)aSuccessBlock failBlock:(failBlock)aFailBlock &#123;</span><br><span class="line">    NSString *sql = [NSString stringWithFormat:@&quot;delete from %@ where id = ?&quot;, self.tableName];</span><br><span class="line">    BOOL result = [self.fmdb executeUpdate:sql withArgumentsInArray:@[@(uid)]];</span><br><span class="line">    if (result) &#123;</span><br><span class="line">        aSuccessBlock();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        aFailBlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSArray&lt;NSObject *&gt; *)queryAllData &#123;</span><br><span class="line">    NSMutableArray *array = [NSMutableArray array];</span><br><span class="line">    NSString *sql = [NSString stringWithFormat:@&quot;select * from %@&quot;,self.tableName];</span><br><span class="line">    @try &#123;</span><br><span class="line">        FMResultSet *rs = [self.fmdb executeQuery:sql];</span><br><span class="line">        while (rs.next) &#123;</span><br><span class="line">            NSObject *model = [[NSObject alloc] init];</span><br><span class="line">            NSData *modelData = [rs dataForColumn:@&quot;model&quot;];</span><br><span class="line">            int uid = [rs intForColumn:@&quot;id&quot;];</span><br><span class="line">            </span><br><span class="line">            model = [NSKeyedUnarchiver unarchiveObjectWithData:modelData];</span><br><span class="line">            model.wd_fmdb_id = uid;</span><br><span class="line">            [array addObject:model];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; @catch (NSException *exception) &#123;</span><br><span class="line">        NSLog(@&quot;%@&quot;, self.fmdb.lastError);</span><br><span class="line">    &#125; @finally &#123;</span><br><span class="line">        NSLog(@&quot;查询数据&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   return array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (FMDatabase *)fmdb &#123;</span><br><span class="line">    if (!_fmdb) &#123;</span><br><span class="line">        NSString *path = [NSHomeDirectory() stringByAppendingString:@&quot;/Documents/testDB.db&quot;];</span><br><span class="line">        _fmdb = [[FMDatabase alloc] initWithPath:path];</span><br><span class="line">    &#125;</span><br><span class="line">    return _fmdb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>3、使用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 1、打开数据库，并创建表</span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line">    </span><br><span class="line">    [[WDDataBaseManager manager] createTableWithName:@&quot;test&quot;];</span><br><span class="line">    </span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line">// 2、添加数据</span><br><span class="line"> [[WDDataBaseManager manager] insertDataWithModel:model successBlock:^&#123;</span><br><span class="line">        // TODO:</span><br><span class="line">    &#125; failBlock:^&#123;</span><br><span class="line">        // TODO:</span><br><span class="line">    &#125;];</span><br><span class="line">// 3、查询数据</span><br><span class="line">[[WDDataBaseManager manager] queryAllData]</span><br><span class="line">// 4、修改数据</span><br><span class="line">[[WDDataBaseManager manager] updateDataWithModel:model uid:self.model.wd_fmdb_id successBlock:^&#123;</span><br><span class="line">        // TODO:</span><br><span class="line">    &#125; failBlock:^&#123;</span><br><span class="line">         // TODO:</span><br><span class="line">    &#125;];</span><br><span class="line">// 5、删除数据</span><br><span class="line">[[WDDataBaseManager manager] deleteDataWithUid:model.wd_fmdb_id successBlock:^&#123;</span><br><span class="line">            // TODO:</span><br><span class="line">        &#125; failBlock:^&#123;</span><br><span class="line">            // TODO:</span><br><span class="line">        &#125;];</span><br><span class="line">// 6、删除表</span><br><span class="line">[[WDDataBaseManager manager] dropTable];</span><br></pre></td></tr></table></figure></p><ul><li>插入表中的Model需要遵循<nscoding>(实例代码)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (void)encodeWithCoder:(nonnull NSCoder *)aCoder &#123;</span><br><span class="line">    [aCoder encodeObject:self.name forKey:@&quot;name&quot;];</span><br><span class="line">    [aCoder encodeObject:self.phone forKey:@&quot;phone&quot;];</span><br><span class="line">    [aCoder encodeObject:self.address forKey:@&quot;address&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (nullable instancetype)initWithCoder:(nonnull NSCoder *)aDecoder &#123;</span><br><span class="line">    if (self == [super init]) &#123;</span><br><span class="line">        self.name = [aDecoder decodeObjectForKey:@&quot;name&quot;] ;</span><br><span class="line">        self.phone = [aDecoder decodeObjectForKey:@&quot;phone&quot;];</span><br><span class="line">        self.address = [aDecoder decodeObjectForKey:@&quot;address&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></nscoding></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/3334769-db9208d961eb67c2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据存储：CoreData</title>
    <link href="https://wudan-ios.github.io/2018/09/01/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%EF%BC%9ACoreData/"/>
    <id>https://wudan-ios.github.io/2018/09/01/数据存储：CoreData/</id>
    <published>2018-09-01T02:10:00.000Z</published>
    <updated>2018-09-01T02:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-62cac50f2bdb1d85.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼图"></p><h3 id="CoreData的简单使用介绍（已User表为例）"><a href="#CoreData的简单使用介绍（已User表为例）" class="headerlink" title="CoreData的简单使用介绍（已User表为例）"></a>CoreData的简单使用介绍（已User表为例）</h3><h4 id="重点类"><a href="#重点类" class="headerlink" title="重点类"></a>重点类</h4><ul><li>NSManagedObject<blockquote><p> 通过Core Data从数据库中取出的对象,默认情况下都是NSManagedObject对象.<br><br> NSManagedObject的工作模式有点类似于NSDictionary对象,通过键-值对来存取所有的实体属性.<br><br> setValue:forkey:存储属性值(属性名为key);<br><br> valueForKey:获取属性值(属性名为key).<br> 每个NSManagedObject都知道自己属于哪个NSManagedObjectContext</p></blockquote></li></ul><hr><ul><li>NSManagedObjectContext：管理对象上下文<blockquote><p>负责数据和应用库之间的交互(CRUD，即增删改查、保存等接口都在这个对象中).<br><br> 所有的NSManagedObject都存在于NSManagedObjectContext中，所以对象和context是相关联的<br><br> 每个 context 和其他 context 都是完全独立的<br><br> 每个NSManagedObjectContext都知道自己管理着哪些NSManagedObject</p></blockquote></li></ul><hr><ul><li>NSManagedObjectModel：模型对象<blockquote><p>Core Data的模型文件</p></blockquote></li></ul><hr><ul><li>NSPersistentStoreCoordinator：存储调度器<blockquote><p>添加持久化存储库，CoreData的存储类型（比如SQLite数据库就是其中一种）<br><br> 中间审查者，用来将对象图管理部分和持久化部分捆绑在一起，负责相互之间的交流（中介一样）</p></blockquote></li></ul><hr><ul><li>NSEntityDescription：<blockquote><p>用来描述实体：相当于数据库表中一组数据描述</p></blockquote></li></ul><h4 id="User中字段"><a href="#User中字段" class="headerlink" title="User中字段"></a>User中字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic) int16_t age;</span><br><span class="line">@property (nonatomic) int64_t id;</span><br><span class="line">@property (nullable, nonatomic, copy) NSString *name;</span><br><span class="line">@property (nonatomic) BOOL sex;</span><br></pre></td></tr></table></figure><h4 id="系统库"><a href="#系统库" class="headerlink" title="系统库"></a>系统库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;CoreData/CoreData.h&gt;</span><br></pre></td></tr></table></figure><h4 id="打开数据库"><a href="#打开数据库" class="headerlink" title="打开数据库"></a>打开数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 创建数据库</span><br><span class="line">    // 1. 实例化数据模型(将所有定义的模型都加载进来)</span><br><span class="line">    // merge——合并</span><br><span class="line">    self.managedObjectModel = [NSManagedObjectModel mergedModelFromBundles:nil];</span><br><span class="line">    </span><br><span class="line">    // 2. 实例化持久化存储调度，要建立起桥梁，需要模型</span><br><span class="line">    self.persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:self.managedObjectModel];</span><br><span class="line">    </span><br><span class="line">    // 3. 添加一个持久化的数据库到存储调度</span><br><span class="line">    // 3.1 建立数据库保存在沙盒的URL</span><br><span class="line">    NSString *path = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES).lastObject;</span><br><span class="line">    NSString *filePath = [[path stringByAppendingString:@&quot;/&quot;] stringByAppendingString:@&quot;wudan.sqlite&quot;];</span><br><span class="line">    NSURL *pathUrl = [NSURL fileURLWithPath:filePath];</span><br><span class="line">    </span><br><span class="line">    // 3.2 打开或者新建数据库文件</span><br><span class="line">    // 如果文件不存在，则新建之后打开</span><br><span class="line">    // 否者直接打开数据库</span><br><span class="line">    NSError *error;</span><br><span class="line">    @try &#123;</span><br><span class="line">        [self.persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:pathUrl options:nil error:&amp;error];</span><br><span class="line">        self.context = [[NSManagedObjectContext alloc] init];</span><br><span class="line">        self.context.persistentStoreCoordinator = self.persistentStoreCoordinator;</span><br><span class="line">    &#125; @catch (NSException *exception) &#123;</span><br><span class="line">        NSLog(@&quot;Error:%@&quot;,error);</span><br><span class="line">    &#125; @finally &#123;</span><br><span class="line">        NSLog(@&quot;打开数据库&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><ul><li><h5 id="全部查询"><a href="#全部查询" class="headerlink" title="全部查询"></a>全部查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (void)queryAllResult:(void(^)(NSArray *dataArray))result &#123;</span><br><span class="line">    NSMutableArray *array = [NSMutableArray array];</span><br><span class="line">    </span><br><span class="line">    NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;id &gt; 0&quot;];</span><br><span class="line">    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;User&quot;];</span><br><span class="line">    request.predicate = predicate;</span><br><span class="line">    NSError *error;</span><br><span class="line">    </span><br><span class="line">    NSArray *re = [self.context executeFetchRequest:request error:&amp;error];</span><br><span class="line">    if (re.count != 0) &#123;</span><br><span class="line">        for (User *user in re) &#123;</span><br><span class="line">            [array addObject:user];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result(array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (void)queryUserInfoWithPageNo:(NSInteger)pageNo pageSize:(NSInteger)pageSize result:(void(^)(NSArray *dataArray))result &#123;</span><br><span class="line">    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;User&quot;];</span><br><span class="line">    NSSortDescriptor *scoreSort = [NSSortDescriptor sortDescriptorWithKey:@&quot;id&quot; ascending:true];</span><br><span class="line">    request.sortDescriptors = @[scoreSort];</span><br><span class="line">    request.fetchOffset = (pageNo - 1) * pageSize;</span><br><span class="line">    request.fetchLimit = pageSize;</span><br><span class="line">    </span><br><span class="line">    NSError *error = nil;</span><br><span class="line">    NSArray *re = [self.context executeFetchRequest:request error:&amp;error];</span><br><span class="line">    NSMutableArray *array = [NSMutableArray array];</span><br><span class="line">    </span><br><span class="line">    if (re.count != 0) &#123;</span><br><span class="line">        for (User *user in re) &#123;</span><br><span class="line">            [array addObject:user];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result(array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (void)queryUserInfoByObject:(id)object value:(id)value result:(void(^)(NSArray *dataArray))result  &#123;</span><br><span class="line">    NSMutableArray *array = [NSMutableArray array];</span><br><span class="line">    </span><br><span class="line">    NSPredicate *predicate = [NSPredicate predicateWithFormat:[NSString stringWithFormat:@&quot;%@ = &apos;%@&apos;&quot;, object, value]];</span><br><span class="line">    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;User&quot;];</span><br><span class="line">    request.predicate = predicate;</span><br><span class="line">    NSError *error;</span><br><span class="line">    </span><br><span class="line">    NSArray *re = [self.context executeFetchRequest:request error:&amp;error];</span><br><span class="line">    if (re.count != 0) &#123;</span><br><span class="line">        for (User *user in re) &#123;</span><br><span class="line">            [array addObject:user];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result(array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">- (void)addUserInfo:(NSInteger)userId name:(NSString *)name sex:(BOOL)sex age:(NSInteger)age success:(void(^)(void))success fail:(void(^)(void))fail &#123;</span><br><span class="line">    </span><br><span class="line">    __block NSArray *array;</span><br><span class="line">     [self queryUserInfoByObject:@&quot;id&quot; value:@(userId) result:^(NSArray * _Nonnull dataArray) &#123;</span><br><span class="line">         array = dataArray;</span><br><span class="line">     &#125;];</span><br><span class="line">    </span><br><span class="line">    if (array.count == 0) &#123;</span><br><span class="line">        </span><br><span class="line">        User *user = [NSEntityDescription insertNewObjectForEntityForName:@&quot;User&quot; inManagedObjectContext:self.context];</span><br><span class="line">        user.name = name;</span><br><span class="line">        user.id = userId;</span><br><span class="line">        user.sex = sex;</span><br><span class="line">        user.age = age;</span><br><span class="line">        </span><br><span class="line">        NSError *error;</span><br><span class="line"></span><br><span class="line">        @try &#123;</span><br><span class="line">            [self.context save:&amp;error];</span><br><span class="line">            success();</span><br><span class="line">        &#125; @catch (NSException *exception) &#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;, error);</span><br><span class="line">            fail();</span><br><span class="line">        &#125; @finally &#123;</span><br><span class="line">            NSLog(@&quot;新增&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        fail();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- (void)updateUserInfo:(NSInteger)userId infoDic:(NSDictionary *)dic success:(void(^)(void))success fail:(void(^)(void))fail &#123;</span><br><span class="line">    NSPredicate *predicate = [NSPredicate predicateWithFormat:[NSString stringWithFormat:@&quot;id = %ld&quot;, userId]];</span><br><span class="line">    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;User&quot;];</span><br><span class="line">    request.predicate = predicate;</span><br><span class="line">    NSError *error;</span><br><span class="line">    </span><br><span class="line">    if (dic.count &gt; 0) &#123;</span><br><span class="line">        NSArray *re = [self.context executeFetchRequest:request error:&amp;error];</span><br><span class="line">        if (re.count &gt; 0) &#123;</span><br><span class="line">            for (User *user in re) &#123;</span><br><span class="line">                [dic enumerateKeysAndObjectsUsingBlock:^(id  _Nonnull key, id  _Nonnull obj, BOOL * _Nonnull stop) &#123;</span><br><span class="line">                    [user setValue:obj forKey:key];</span><br><span class="line">                &#125;];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        @try &#123;</span><br><span class="line">            [self.context save:&amp;error];</span><br><span class="line">            success();</span><br><span class="line">        &#125; @catch (NSException *exception) &#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;, error);</span><br><span class="line">            fail();</span><br><span class="line">        &#125; @finally &#123;</span><br><span class="line">            NSLog(@&quot;更新&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">- (void)deleteUserInfo:(NSInteger)userId success:(void(^)(void))success fail:(void(^)(void))fail &#123;</span><br><span class="line">    NSPredicate *predicate = [NSPredicate predicateWithFormat:[NSString stringWithFormat:@&quot;id = %ld&quot;, userId]];</span><br><span class="line">    NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@&quot;User&quot;];</span><br><span class="line">    request.predicate = predicate;</span><br><span class="line">    NSError *error;</span><br><span class="line">    </span><br><span class="line">    NSArray *re = [self.context executeFetchRequest:request error:&amp;error];</span><br><span class="line">    if (re.count &gt; 0) &#123;</span><br><span class="line">        @try &#123;</span><br><span class="line">            [self.context deleteObject:re.firstObject];</span><br><span class="line">            [self.context save:nil];</span><br><span class="line">            success();</span><br><span class="line">        &#125; @catch (NSException *exception) &#123;</span><br><span class="line">            NSLog(@&quot;%@&quot;, error);</span><br><span class="line">            fail();</span><br><span class="line">        &#125; @finally &#123;</span><br><span class="line">            NSLog(@&quot;删除数据&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        NSLog(@&quot;数据库中暂无该数据&quot;);</span><br><span class="line">        fail();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/3334769-62cac50f2bdb1d85.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS自定义控件：分段选择器-Swift</title>
    <link href="https://wudan-ios.github.io/2018/08/29/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%EF%BC%9A%E5%88%86%E6%AE%B5%E9%80%89%E6%8B%A9%E5%99%A8-Swift/"/>
    <id>https://wudan-ios.github.io/2018/08/29/iOS自定义控件：分段选择器-Swift/</id>
    <published>2018-08-29T02:12:00.000Z</published>
    <updated>2018-09-30T02:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-3932cbca22e906ac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用"><br>废话不多说，直接上代码</p><h5 id="1、数据源方法"><a href="#1、数据源方法" class="headerlink" title="1、数据源方法"></a>1、数据源方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// MARK: ============ SegmentSelectorManagerDataSource ============</span><br><span class="line">@objc protocol  SegmentSelectorManagerDataSource:NSObjectProtocol &#123;</span><br><span class="line">    </span><br><span class="line">    /// 主要配置 -&gt; 必须要实现</span><br><span class="line">    func nameOfSliderItems(segemntControl:SegmentSelectorManager) -&gt; Array&lt;String&gt;</span><br><span class="line">    func childViewControllers(segemntControl:SegmentSelectorManager) -&gt; Array&lt;UIViewController&gt;</span><br><span class="line">    </span><br><span class="line">    /// 字体颜色配置 -&gt; 有默认</span><br><span class="line">    @objc optional func colorOfSlider(segemntControl:SegmentSelectorManager) -&gt; UIColor</span><br><span class="line">    @objc optional func colorOfTopView(segemntControl:SegmentSelectorManager) -&gt; UIColor</span><br><span class="line">    </span><br><span class="line">    /// 背景颜色配置 -&gt; 有默认</span><br><span class="line">    @objc optional func colorOfSliderItemsTitle(segemntControl:SegmentSelectorManager) -&gt; UIColor</span><br><span class="line">    @objc optional func colorOfHighlightedSliderItemsTitle(segemntControl:SegmentSelectorManager) -&gt; UIColor</span><br><span class="line">    </span><br><span class="line">    /// 高度配置 -&gt; 有默认</span><br><span class="line">    @objc optional func heightOfTopView(segemntControl:SegmentSelectorManager) -&gt; CGFloat</span><br><span class="line">    @objc optional func heightOfSlider(segemntControl:SegmentSelectorManager) -&gt; CGFloat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、代理方法"><a href="#2、代理方法" class="headerlink" title="2、代理方法"></a>2、代理方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// MARK: ============ SegmentSelectorManagerDelegate ============</span><br><span class="line">protocol SegmentSelectorManagerDelegate &#123;</span><br><span class="line">    func slideView(sliderView:SegmentSelectorManager, didSelectItemAtIndex:Int) -&gt; Void</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、页面实现"><a href="#3、页面实现" class="headerlink" title="3、页面实现"></a>3、页面实现</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">override init(frame: CGRect) &#123;</span><br><span class="line">        super.init(frame: frame)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    required init?(coder aDecoder: NSCoder) &#123;</span><br><span class="line">        fatalError(&quot;init(coder:) has not been implemented&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /// 数据源</span><br><span class="line">    public weak var dataSource:SegmentSelectorManagerDataSource? &#123;</span><br><span class="line">        didSet &#123;</span><br><span class="line">            // 名称数组</span><br><span class="line">            namesOfSlideItems = dataSource?.nameOfSliderItems(segemntControl: self)</span><br><span class="line">            // 控制器数组</span><br><span class="line">            childControllersArray = dataSource?.childViewControllers(segemntControl: self)</span><br><span class="line">            </span><br><span class="line">            if let ds = dataSource &#123;</span><br><span class="line"></span><br><span class="line">                if (ds.responds(to: #selector(ds.colorOfHighlightedSliderItemsTitle(segemntControl:)))) &#123;</span><br><span class="line">                    //按钮字体颜色默认</span><br><span class="line">                    colorOfSlideItemsTitle = ds.colorOfSliderItemsTitle!(segemntControl: self)</span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">                if (ds.responds(to: #selector(ds.colorOfHighlightedSliderItemsTitle(segemntControl:)))) &#123;</span><br><span class="line">                    // 按钮字体颜色选中</span><br><span class="line">                    colorOfHighlightedSlideItemsTitle = ds.colorOfHighlightedSliderItemsTitle!(segemntControl: self)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                if (ds.responds(to: #selector(ds.colorOfSlider(segemntControl:)))) &#123;</span><br><span class="line">                    // 指示器颜色</span><br><span class="line">                    colorOfSlider = ds.colorOfSlider!(segemntControl: self)</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                if ds.responds(to: #selector(ds.heightOfTopView(segemntControl:))) &#123;</span><br><span class="line">                    // 顶部视图高度</span><br><span class="line">                    heightOfTopView = (ds.heightOfTopView!(segemntControl: self))</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                if ds.responds(to: #selector(ds.heightOfTopView(segemntControl:))) &#123;</span><br><span class="line">                    // 指示器高度</span><br><span class="line">                    heightOfSlider = (ds.heightOfSlider!(segemntControl: self))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 代理</span><br><span class="line">    public var delegate:SegmentSelectorManagerDelegate?</span><br><span class="line">    </span><br><span class="line">    var namesOfSlideItems: Array&lt;String&gt;? = []                           // 名称数组</span><br><span class="line">    var colorOfSlider: UIColor? =  UIColor.orange                        // 指示器颜色</span><br><span class="line">    var colorOfSlideView: UIColor? = UIColor.white                       // 顶部视图颜色</span><br><span class="line">    var colorOfSlideItemsTitle: UIColor? = UIColor.gray                  // 默认字体颜色</span><br><span class="line">    var colorOfHighlightedSlideItemsTitle: UIColor? = UIColor.orange     // 选中字体颜色</span><br><span class="line">    var heightOfTopView:CGFloat = 45                                     // 顶部视图高度</span><br><span class="line">    var heightOfSlider:CGFloat = 2                                       // 指示器高度</span><br><span class="line">    let SliderThanSliderView_WidthRatio:CGFloat = 1                      // 按钮和指示器宽度比</span><br><span class="line">    var buttonsArray:Array&lt;UIButton&gt;? = []                               // 所有按钮的数组</span><br><span class="line">    var childControllersArray:Array&lt;UIViewController&gt;? = []              // 控制器数组</span><br><span class="line">    </span><br><span class="line">    let SCREEN_WIDTH = UIScreen.main.bounds.size.width</span><br><span class="line">    let SCREEN_HEIGHT = UIScreen.main.bounds.height</span><br><span class="line">    </span><br><span class="line">    /// 顶部View</span><br><span class="line">    lazy var slideBar:UIView = &#123;</span><br><span class="line">        let view = UIView.init()</span><br><span class="line">        view.backgroundColor = colorOfSlideView</span><br><span class="line">        addSubview(view)</span><br><span class="line">        view.translatesAutoresizingMaskIntoConstraints = false</span><br><span class="line">        view.leadingAnchor.constraint(equalTo: leadingAnchor).isActive = true</span><br><span class="line">        view.trailingAnchor.constraint(equalTo: trailingAnchor).isActive = true</span><br><span class="line">        view.topAnchor.constraint(equalTo: topAnchor).isActive = true</span><br><span class="line">        view.heightAnchor.constraint(equalToConstant: self.heightOfTopView).isActive = true</span><br><span class="line">        return view</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    // 底部指示器</span><br><span class="line">    var slider:UIView?</span><br><span class="line">    </span><br><span class="line">    /// 控制器ScrollView</span><br><span class="line">    lazy var contentScrollView:UIScrollView = &#123;</span><br><span class="line">        let sc = UIScrollView.init()</span><br><span class="line">        sc.isDirectionalLockEnabled = true</span><br><span class="line">        sc.backgroundColor = UIColor.white</span><br><span class="line">        sc.isPagingEnabled = true</span><br><span class="line">        sc.showsHorizontalScrollIndicator = false</span><br><span class="line">        sc.delegate = self</span><br><span class="line">        sc.bounces = false</span><br><span class="line">        addSubview(sc)</span><br><span class="line">        sc.translatesAutoresizingMaskIntoConstraints = false</span><br><span class="line">        sc.leadingAnchor.constraint(equalTo: leadingAnchor).isActive = true</span><br><span class="line">        sc.trailingAnchor.constraint(equalTo: trailingAnchor).isActive = true</span><br><span class="line">        sc.topAnchor.constraint(equalTo: self.slideBar.bottomAnchor).isActive = true</span><br><span class="line">        sc.bottomAnchor.constraint(equalTo: bottomAnchor).isActive = true</span><br><span class="line">        return sc</span><br><span class="line">    &#125;()</span><br></pre></td></tr></table></figure><p>#####4、绘制页面UI<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">    // 获取当前页面的控制器</span><br><span class="line">    public func viewController()-&gt;UIViewController? &#123;</span><br><span class="line">        var nextResponder: UIResponder? = self</span><br><span class="line">        repeat &#123;</span><br><span class="line">            nextResponder = nextResponder?.next</span><br><span class="line">            if let viewController = nextResponder as? UIViewController &#123;</span><br><span class="line">                return viewController</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; while nextResponder != nil</span><br><span class="line">        </span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">override func layoutSubviews() &#123;</span><br><span class="line">        super.layoutSubviews()</span><br><span class="line">        addSlider()</span><br><span class="line">        addButton()</span><br><span class="line">        addContentScrollView()</span><br><span class="line">    &#125;</span><br><span class="line">/// 添加按钮到顶部视图</span><br><span class="line">    func addButton() &#123;</span><br><span class="line">        </span><br><span class="line">        let numberOfItems:Int = (namesOfSlideItems?.count)!</span><br><span class="line">        let slideItemWidth = SCREEN_WIDTH / CGFloat(numberOfItems)</span><br><span class="line">        let sliderWidth = slideItemWidth * SliderThanSliderView_WidthRatio</span><br><span class="line">        let position_x = (slideItemWidth - sliderWidth) / 2.0</span><br><span class="line">        </span><br><span class="line">        for index in 0..&lt;numberOfItems &#123;</span><br><span class="line">            let b = UIButton.init(type: .custom)</span><br><span class="line">            b.tag = index</span><br><span class="line">            b.setTitle(namesOfSlideItems![index], for: .normal)</span><br><span class="line">            b.setTitleColor(colorOfSlideItemsTitle, for: .normal)</span><br><span class="line">            b.titleLabel?.textAlignment = .center</span><br><span class="line">            b.addTarget(self, action: #selector(buttonTouched(button:)), for: .touchUpInside)</span><br><span class="line">            buttonsArray?.append(b)</span><br><span class="line">            b.frame = CGRect(x: position_x + slideItemWidth * CGFloat(index),</span><br><span class="line">                             y: 5,</span><br><span class="line">                             width: sliderWidth,</span><br><span class="line">                             height: heightOfTopView-5)</span><br><span class="line">            slideBar.addSubview(b)</span><br><span class="line">            </span><br><span class="line">            if index == 0 &#123;</span><br><span class="line">                b.setTitleColor(colorOfHighlightedSlideItemsTitle!, for: .normal)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 添加底部指示器到顶部视图</span><br><span class="line">    func addSlider() &#123;</span><br><span class="line">        let slideItemWidth =  SCREEN_WIDTH / CGFloat((namesOfSlideItems?.count)!)</span><br><span class="line">        let sliderWidth = slideItemWidth * SliderThanSliderView_WidthRatio</span><br><span class="line">        let position_x = (slideItemWidth - sliderWidth) / 2.0</span><br><span class="line">        slideBar.addSubview(sliderView(frame: CGRect(x: position_x,</span><br><span class="line">                                                     y: heightOfTopView - heightOfSlider,</span><br><span class="line">                                                     width: sliderWidth,</span><br><span class="line">                                                     height: heightOfSlider)))</span><br><span class="line">        slideBar.backgroundColor = colorOfSlideView</span><br><span class="line">        slider?.backgroundColor = colorOfSlider</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     // 添加ScrollView</span><br><span class="line">    func addContentScrollView() &#123;</span><br><span class="line">        contentScrollView.contentSize = CGSize(width: SCREEN_WIDTH * CGFloat((namesOfSlideItems?.count)!), height: 0)</span><br><span class="line"></span><br><span class="line">        for (index) in (childControllersArray?.enumerated())! &#123;</span><br><span class="line">            index.element.view.frame = CGRect(x: CGFloat(index.offset) * SCREEN_WIDTH,</span><br><span class="line">                                              y: 0,</span><br><span class="line">                                              width: contentScrollView.frame.width,</span><br><span class="line">                                              height: contentScrollView.frame.height)</span><br><span class="line">            contentScrollView.addSubview(index.element.view)</span><br><span class="line">            viewController()?.addChild(index.element)</span><br><span class="line">            index.element.didMove(toParent: viewController())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // vc滚动动画</span><br><span class="line">    func animateSlider(tag:Int) -&gt; Void &#123;</span><br><span class="line">        contentScrollView.setContentOffset(CGPoint(x: SCREEN_WIDTH * CGFloat(tag), y: 0), animated: true)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 指示器滚动动画</span><br><span class="line">    func animateSliderToPosition(offset:CGPoint) -&gt; Void &#123;</span><br><span class="line">        </span><br><span class="line">        let slideItemWidth =  SCREEN_WIDTH / CGFloat((namesOfSlideItems?.count)!)</span><br><span class="line">        let sliderWidth =  slideItemWidth * SliderThanSliderView_WidthRatio</span><br><span class="line">        let position_x =  (slideItemWidth - sliderWidth) / 2.0</span><br><span class="line">        </span><br><span class="line">        let newFrame = CGRect(x: (offset.x / SCREEN_WIDTH) * slideItemWidth + position_x,</span><br><span class="line">                              y: (slider?.frame.origin.y)!,</span><br><span class="line">                              width: (slider?.frame.width)!,</span><br><span class="line">                              height: (slider?.frame.height)!)</span><br><span class="line">        slider?.frame = newFrame</span><br><span class="line">        </span><br><span class="line">        for (index) in (buttonsArray?.enumerated())! &#123;</span><br><span class="line">            index.element.setTitleColor(colorOfSlideItemsTitle, for: .normal)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        var buttonTag = 0</span><br><span class="line">        let ratio = offset.x / SCREEN_WIDTH</span><br><span class="line">        let tempRation = Int(ratio)</span><br><span class="line">        </span><br><span class="line">        let decimal:CGFloat = ratio - CGFloat(tempRation)</span><br><span class="line"></span><br><span class="line">        if decimal &gt;= 0.5 &#123;</span><br><span class="line">            buttonTag = Int(ratio) + 1</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            buttonTag = Int(ratio)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        buttonsArray![buttonTag].setTitleColor(colorOfHighlightedSlideItemsTitle, for: .normal)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /// 根据frame初始化指示器</span><br><span class="line">    func sliderView(frame:CGRect) -&gt; UIView &#123;</span><br><span class="line">        slider = UIView.init(frame: frame)</span><br><span class="line">        return slider!</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    /// 点击事件</span><br><span class="line">    @objc func buttonTouched(button:UIButton) &#123;</span><br><span class="line">        delegate?.slideView(sliderView: self, didSelectItemAtIndex: button.tag)</span><br><span class="line">        animateSlider(tag: tag)</span><br><span class="line">        contentScrollView.setContentOffset(CGPoint(x: SCREEN_WIDTH * CGFloat(button.tag), y: 0), animated: true)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h5 id="5、使用Extension实现UIScrollViewDidScrollDelegate"><a href="#5、使用Extension实现UIScrollViewDidScrollDelegate" class="headerlink" title="5、使用Extension实现UIScrollViewDidScrollDelegate"></a>5、使用Extension实现UIScrollViewDidScrollDelegate</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// MARK: ============ UIScrollViewDidScrollDelegate ============</span><br><span class="line">extension SegmentSelectorManager:UIScrollViewDelegate &#123;</span><br><span class="line">    func scrollViewDidScroll(_ scrollView: UIScrollView) &#123;</span><br><span class="line">        animateSliderToPosition(offset: scrollView.contentOffset)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6、使用方法-实例代码"><a href="#6、使用方法-实例代码" class="headerlink" title="6、使用方法(实例代码)"></a>6、使用方法(实例代码)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">override func setupSubViewsProperties() &#123;</span><br><span class="line">        segmentView = SegmentSelectorManager.init(frame: CGRect.zero)</span><br><span class="line">        segmentView?.delegate = self</span><br><span class="line">        segmentView?.dataSource = self</span><br><span class="line">        view.addSubview(segmentView!)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func setupSubViewsConstrains() &#123;</span><br><span class="line">        if let seg = segmentView &#123;</span><br><span class="line">            seg.translatesAutoresizingMaskIntoConstraints = false</span><br><span class="line">            seg.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true</span><br><span class="line">            seg.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true</span><br><span class="line">            seg.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -kTabBarHeight).isActive = true</span><br><span class="line">            seg.topAnchor.constraint(equalTo: wd_navgationBar_normal.bottomAnchor).isActive = true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">extension HotPlayController: SegmentSelectorManagerDataSource &#123;</span><br><span class="line"></span><br><span class="line">    func nameOfSliderItems(segemntControl: SegmentSelectorManager) -&gt; Array&lt;String&gt; &#123;</span><br><span class="line">        return [&quot;正在热映&quot;, &quot;即将上映&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func childViewControllers(segemntControl: SegmentSelectorManager) -&gt; Array&lt;UIViewController&gt; &#123;</span><br><span class="line">        return [HotPlayingController(), HotWillPlayViewController()]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func heightOfTopView(segemntControl: SegmentSelectorManager) -&gt; CGFloat &#123;</span><br><span class="line">        return 45</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func heightOfSlider(segemntControl: SegmentSelectorManager) -&gt; CGFloat &#123;</span><br><span class="line">        return 3</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func colorOfSlider(segemntControl slider: SegmentSelectorManager) -&gt; UIColor &#123;</span><br><span class="line">        return UIColor.wd_init(r: 73, g: 73, b: 73)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func colorOfTopView(segemntControl: SegmentSelectorManager) -&gt; UIColor &#123;</span><br><span class="line">        return UIColor.white</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func colorOfSliderItemsTitle(segemntControl: SegmentSelectorManager) -&gt; UIColor &#123;</span><br><span class="line">        return UIColor.gray</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    func colorOfHighlightedSliderItemsTitle(segemntControl: SegmentSelectorManager) -&gt; UIColor &#123;</span><br><span class="line">        return UIColor.wd_init(r: 73, g: 73, b: 73)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension HotPlayController: SegmentSelectorManagerDelegate &#123;</span><br><span class="line">    func slideView(sliderView: SegmentSelectorManager, didSelectItemAtIndex: Int) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7、效果图"><a href="#7、效果图" class="headerlink" title="7、效果图"></a>7、效果图</h5><p><img src="https://upload-images.jianshu.io/upload_images/3334769-115a441c7def0de0.gif?imageMogr2/auto-orient/strip" alt="效果图.gif"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/3334769-3932cbca22e906ac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据存储：KeyChain</title>
    <link href="https://wudan-ios.github.io/2018/08/20/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%EF%BC%9AKeyChain/"/>
    <id>https://wudan-ios.github.io/2018/08/20/数据存储：KeyChain/</id>
    <published>2018-08-20T02:10:00.000Z</published>
    <updated>2018-08-20T02:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>KeyChain是利用系统钥匙串进行简单的信息存取。类似于UserDefault;</p><ol><li><p>接口文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@interface LZKeyChainManager : NSObject</span><br><span class="line"></span><br><span class="line">+ (instancetype)manager;</span><br><span class="line">/**</span><br><span class="line"> 写入数据</span><br><span class="line"></span><br><span class="line"> @param service 名称</span><br><span class="line"> @param data 数据</span><br><span class="line"> */</span><br><span class="line">- (void)save:(NSString *)service data:(id)data;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 查询数据</span><br><span class="line"></span><br><span class="line"> @param service s名称</span><br><span class="line"> @return return value description</span><br><span class="line"> */</span><br><span class="line">- (id)load:(NSString *)service;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 删除</span><br><span class="line"></span><br><span class="line"> @param service 名称</span><br><span class="line"> */</span><br><span class="line">- (void)deleteInfo:(NSString *)service;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure></li><li><p>实现文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;LZKeyChainManager.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation LZKeyChainManager</span><br><span class="line"></span><br><span class="line">+ (instancetype)manager &#123;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    static LZKeyChainManager *manager;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        manager = [[LZKeyChainManager alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    return manager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSMutableDictionary *)getKeychainQuery:(NSString *)service &#123;</span><br><span class="line">    </span><br><span class="line">    return [NSMutableDictionary dictionaryWithObjectsAndKeys:(id)kSecClassGenericPassword,(id)kSecClass,</span><br><span class="line">            service, (id)kSecAttrService,</span><br><span class="line">            service, (id)kSecAttrAccount,</span><br><span class="line">            (id)kSecAttrAccessibleAfterFirstUnlock,(id)kSecAttrAccessible,</span><br><span class="line">            nil];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 写入</span><br><span class="line">- (void)save:(NSString *)service data:(id)data &#123;</span><br><span class="line"></span><br><span class="line">    NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];</span><br><span class="line">    SecItemDelete((CFDictionaryRef)keychainQuery);</span><br><span class="line">    [keychainQuery setObject:[NSKeyedArchiver archivedDataWithRootObject:data] forKey:(id)kSecValueData];</span><br><span class="line">    SecItemAdd((CFDictionaryRef)keychainQuery, NULL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#pragma mark - 读取</span><br><span class="line">- (id)load:(NSString *)service &#123;</span><br><span class="line">    </span><br><span class="line">    id ret = nil;</span><br><span class="line">    NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];</span><br><span class="line">    [keychainQuery setObject:(id)kCFBooleanTrue forKey:(id)kSecReturnData];</span><br><span class="line">    [keychainQuery setObject:(id)kSecMatchLimitOne forKey:(id)kSecMatchLimit];</span><br><span class="line">    CFDataRef keyData = NULL;</span><br><span class="line">    if (SecItemCopyMatching((CFDictionaryRef)keychainQuery, (CFTypeRef *)&amp;keyData) == noErr) &#123;</span><br><span class="line">        @try &#123;</span><br><span class="line">            ret = [NSKeyedUnarchiver unarchiveObjectWithData:(__bridge NSData *)keyData];</span><br><span class="line">        &#125; @catch (NSException *e) &#123;</span><br><span class="line">            NSLog(@&quot;Unarchive of %@ failed: %@&quot;, service, e);</span><br><span class="line">        &#125; @finally &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (keyData)</span><br><span class="line">        CFRelease(keyData);</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 删除</span><br><span class="line">- (void)deleteInfo:(NSString *)service &#123;</span><br><span class="line">    NSMutableDictionary *keychainQuery = [self getKeychainQuery:service];</span><br><span class="line">    SecItemDelete((CFDictionaryRef)keychainQuery);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;KeyChain是利用系统钥匙串进行简单的信息存取。类似于UserDefault;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;接口文件&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS自定义控件：一个简易的Combobox</title>
    <link href="https://wudan-ios.github.io/2018/08/18/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%EF%BC%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84Combobox/"/>
    <id>https://wudan-ios.github.io/2018/08/18/iOS自定义控件：一个简易的Combobox/</id>
    <published>2018-08-18T02:12:00.000Z</published>
    <updated>2018-10-10T02:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/3334769-72958ace35bcee4e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="镇楼专用图"></p><p>代码简单易懂，属于自己练手的代码，还在学习，写的不好，希望勿喷<br>1、头文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit/UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">typedef NS_ENUM(NSInteger, WDComboBoxControlDirection) &#123;</span><br><span class="line">    WDComboBoxControlDirectionTop,</span><br><span class="line">    WDComboBoxControlDirectionLeading,</span><br><span class="line">    WDComboBoxControlDirectionTrailing,</span><br><span class="line">    WDComboBoxControlDirectionBottom,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@protocol WDComboBoxControlDataSource &lt;NSObject&gt;</span><br><span class="line">@optional</span><br><span class="line">/** &lt; 数据数组 &gt; */</span><br><span class="line">- (NSArray&lt;NSArray&lt;NSString *&gt; *&gt; *)dataSourceOfColunm;</span><br><span class="line">@required</span><br><span class="line">/** &lt; 标题数组 &gt; */</span><br><span class="line">- (NSArray&lt;NSString *&gt; *)titleOfSection;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@protocol WDComboBoxControlDelegate &lt;NSObject&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 点击事件</span><br><span class="line"> </span><br><span class="line"> @param indexPath indexPath description</span><br><span class="line"> @param title title description</span><br><span class="line"> @param sourceView sourceView description</span><br><span class="line"> */</span><br><span class="line">- (void)selectedAtIndexPath:(NSIndexPath *)indexPath resultTitle:(NSString *)title fromSourceView:(UIView *)sourceView;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface WDComboBoxControl : UIView</span><br><span class="line"></span><br><span class="line">@property (nonatomic, weak) id &lt;WDComboBoxControlDataSource&gt; dataSource;</span><br><span class="line">@property (nonatomic, weak) id &lt;WDComboBoxControlDelegate&gt; delegate;</span><br><span class="line">/** &lt; 背景按钮，可以定义需要的属性 &gt; */</span><br><span class="line">@property (nonatomic, strong) UIButton *backgroundButton;</span><br><span class="line">/** &lt; 内容TableView，也可以定义一些属性 &gt; */</span><br><span class="line">@property (nonatomic, strong) UITableView *tableView;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> 初始化方法</span><br><span class="line"></span><br><span class="line"> @param height 显示内容高度</span><br><span class="line"> @param view 参考View</span><br><span class="line"> @return return value description</span><br><span class="line"> */</span><br><span class="line">- (instancetype)initViewWithMaxHeight:(CGFloat)height fromView:(UIView *)view showDirection:(WDComboBoxControlDirection)direction;</span><br><span class="line">/**</span><br><span class="line"> 显示页面</span><br><span class="line"> */</span><br><span class="line">- (void)showInView;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure></p><p>2、实现文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;WDComboBoxControl.h&quot;</span><br><span class="line"></span><br><span class="line">@interface WDComboBoxControl () &lt;UITableViewDelegate, UITableViewDataSource&gt;</span><br><span class="line"></span><br><span class="line">@property (nonatomic, assign) CGFloat viewHeight;</span><br><span class="line">@property (nonatomic, strong) NSArray&lt;NSArray&lt;NSString *&gt; *&gt; * dataArray;</span><br><span class="line">@property (nonatomic, strong) NSArray&lt;NSString *&gt; * titleArray;</span><br><span class="line">@property (nonatomic, strong) UIView *sourceView;</span><br><span class="line">@property (nonatomic, assign) WDComboBoxControlDirection direction;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation WDComboBoxControl</span><br><span class="line"></span><br><span class="line">#pragma mark =============== 初始化页面 ===============</span><br><span class="line">- (instancetype)initViewWithMaxHeight:(CGFloat)height fromView:(UIView *)view showDirection:(WDComboBoxControlDirection)direction &#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        _viewHeight = height;</span><br><span class="line">        _sourceView = view;</span><br><span class="line">        _direction = direction;</span><br><span class="line">        [self setupSubViewsPropertys];</span><br><span class="line">        [self setupSubViewsConstraints];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark =============== 显示页面 ===============</span><br><span class="line">- (void)showInView &#123;</span><br><span class="line">    self.frame = UIScreen.mainScreen.bounds;</span><br><span class="line">    [UIApplication.sharedApplication.delegate.window addSubview:self];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark =============== 让页面消失 ===============</span><br><span class="line">- (void)dismisssView &#123;</span><br><span class="line">    [self removeFromSuperview];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark =============== 获取数据源 ===============</span><br><span class="line">- (void)setDataSource:(id&lt;WDComboBoxControlDataSource&gt;)dataSource &#123;</span><br><span class="line">    _dataSource = dataSource;</span><br><span class="line">    if (self.dataSource &amp;&amp; [self.dataSource respondsToSelector:@selector(dataSourceOfColunm)]) &#123;</span><br><span class="line">        self.dataArray = [self.dataSource dataSourceOfColunm];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (self.dataArray &amp;&amp; [self.dataSource respondsToSelector:@selector(titleOfSection)]) &#123;</span><br><span class="line">        self.titleArray =  [self.dataSource titleOfSection];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [self.tableView reloadData];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark =============== Add controls, set properties ===============</span><br><span class="line">- (void)setupSubViewsPropertys &#123;</span><br><span class="line">    self.backgroundButton = [[UIButton alloc] init];</span><br><span class="line">    self.backgroundButton.backgroundColor = UIColor.clearColor;</span><br><span class="line">    [self.backgroundButton addTarget:self action:@selector(dismisssView) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    [self addSubview:self.backgroundButton];</span><br><span class="line">    </span><br><span class="line">    self.tableView = [[UITableView alloc] init];</span><br><span class="line">    self.tableView.delegate = self;</span><br><span class="line">    self.tableView.dataSource = self;</span><br><span class="line">    self.tableView.tableFooterView = [[UIView alloc] init];</span><br><span class="line">    self.tableView.layer.borderColor = UIColor.lightGrayColor.CGColor;</span><br><span class="line">    self.tableView.layer.borderWidth = 0.5;</span><br><span class="line">    self.tableView.estimatedRowHeight = 45;</span><br><span class="line">    self.tableView.layer.cornerRadius = 5;</span><br><span class="line">    self.tableView.rowHeight = UITableViewAutomaticDimension;</span><br><span class="line">    [self addSubview:self.tableView];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark =============== Setting control layout constraints ===============</span><br><span class="line">- (void)setupSubViewsConstraints &#123;</span><br><span class="line">    self.backgroundButton.frame = UIScreen.mainScreen.bounds;</span><br><span class="line">    </span><br><span class="line">    switch (self.direction) &#123;</span><br><span class="line">        case WDComboBoxControlDirectionBottom:&#123;</span><br><span class="line">            self.tableView.frame = CGRectMake(CGRectGetMinX(self.sourceView.frame),</span><br><span class="line">                                              CGRectGetMaxY(self.sourceView.frame),</span><br><span class="line">                                              self.sourceView.frame.size.width,</span><br><span class="line">                                              self.viewHeight);</span><br><span class="line">        &#125;</span><br><span class="line">            break;</span><br><span class="line">        case WDComboBoxControlDirectionTop:&#123;</span><br><span class="line">            self.tableView.frame = CGRectMake(CGRectGetMinX(self.sourceView.frame),</span><br><span class="line">                                              CGRectGetMaxY(self.sourceView.frame) - self.viewHeight - self.sourceView.frame.size.height,</span><br><span class="line">                                              self.sourceView.frame.size.width,</span><br><span class="line">                                              self.viewHeight);</span><br><span class="line">        &#125;</span><br><span class="line">            break;</span><br><span class="line">        case WDComboBoxControlDirectionLeading:&#123;</span><br><span class="line">            self.tableView.frame = CGRectMake(CGRectGetMinX(self.sourceView.frame) - self.sourceView.frame.size.width,</span><br><span class="line">                                              CGRectGetMinY(self.sourceView.frame),</span><br><span class="line">                                              self.sourceView.frame.size.width,</span><br><span class="line">                                              self.viewHeight);</span><br><span class="line">        &#125;</span><br><span class="line">            break;</span><br><span class="line">        case WDComboBoxControlDirectionTrailing:&#123;</span><br><span class="line">            self.tableView.frame = CGRectMake(CGRectGetMinX(self.sourceView.frame) + self.sourceView.frame.size.width,</span><br><span class="line">                                              CGRectGetMinY(self.sourceView.frame),</span><br><span class="line">                                              self.sourceView.frame.size.width,</span><br><span class="line">                                              self.viewHeight);</span><br><span class="line">        &#125;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            break;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark =============== UITableViewDelegate, UITableViewDataSource ===============</span><br><span class="line">- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section &#123;</span><br><span class="line">    return self.titleArray[section];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView &#123;</span><br><span class="line">    return self.dataArray.count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section &#123;</span><br><span class="line">    return [self.dataArray[section] count];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class="line">    </span><br><span class="line">    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@&quot;cell&quot;];</span><br><span class="line">    if (!cell) &#123;</span><br><span class="line">        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@&quot;cell&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">    cell.textLabel.text = self.dataArray[indexPath.section][indexPath.row];</span><br><span class="line">    cell.textLabel.numberOfLines = 0;</span><br><span class="line">    </span><br><span class="line">    return cell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath &#123;</span><br><span class="line">    if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(selectedAtIndexPath:resultTitle: fromSourceView:)]) &#123;</span><br><span class="line">        [self.delegate selectedAtIndexPath:indexPath resultTitle:self.dataArray[indexPath.section][indexPath.row] fromSourceView:self.sourceView];</span><br><span class="line">        [self dismisssView];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>3、使用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">// 1、导入头文件</span><br><span class="line">#import &quot;WDComboBoxControl.h&quot;</span><br><span class="line">// 2、遵循代理和数据源</span><br><span class="line">&lt;WDComboBoxControlDataSource, WDComboBoxControlDelegate&gt;</span><br><span class="line">// 3、实现方法</span><br><span class="line">#pragma mark =============== WDComBoxControlDataSource ===============</span><br><span class="line">- (NSArray&lt;NSString *&gt; *)titleOfSection;</span><br><span class="line">- (NSArray&lt;NSArray&lt;NSString *&gt; *&gt; *)dataSourceOfColunm;</span><br><span class="line"></span><br><span class="line">#pragma mark =============== WDComBoxControlDelegate ===============</span><br><span class="line">- (void)selectedAtIndexPath:(NSIndexPath *)indexPath resultTitle:(NSString *)title fromSourceView:(UIView *)sourceView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 下面是实例：</span><br><span class="line">@property (nonatomic, strong) UIButton *button;</span><br><span class="line">@property (nonatomic, strong) UIButton *button2;</span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    // Do any additional setup after loading the view.</span><br><span class="line">    </span><br><span class="line">    UIButton *button = [[UIButton alloc] init];</span><br><span class="line">    [button setTitleColor:UIColor.blackColor forState:UIControlStateNormal];</span><br><span class="line">    [button addTarget:self action:@selector(buttonShow:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    [self.view addSubview:button];</span><br><span class="line">    button.layer.borderColor = UIColor.lightGrayColor.CGColor;</span><br><span class="line">    button.layer.borderWidth = 0.5;</span><br><span class="line">    [button setTitle:@&quot;按钮&quot; forState:UIControlStateNormal];</span><br><span class="line">    [button mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">        make.centerX.mas_equalTo(self.view);</span><br><span class="line">        make.top.mas_equalTo(self.wdNavigationBar.mas_bottom);</span><br><span class="line">        make.width.mas_equalTo(300);</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line">    self.button = button;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    UIButton *button2 = [[UIButton alloc] init];</span><br><span class="line">    [button2 setTitleColor:UIColor.blackColor forState:UIControlStateNormal];</span><br><span class="line">    [button2 addTarget:self action:@selector(buttonShow:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    [self.view addSubview:button2];</span><br><span class="line">    button2.layer.borderColor = UIColor.lightGrayColor.CGColor;</span><br><span class="line">    button2.layer.borderWidth = 0.5;</span><br><span class="line">    [button2 setTitle:@&quot;按钮2&quot; forState:UIControlStateNormal];</span><br><span class="line">    button2.bounds = CGRectMake(0, 0, 300, 50);</span><br><span class="line">    button2.center = self.view.center;</span><br><span class="line">    self.button2 = button2;</span><br><span class="line">&#125;</span><br><span class="line">- (void)buttonShow:(UIButton *)sender &#123;</span><br><span class="line">    WDComboBoxControl *view = [[WDComboBoxControl alloc] initViewWithMaxHeight:400 fromView:sender showDirection:WDComboBoxControlDirectionBottom];</span><br><span class="line">    view.dataSource = self;</span><br><span class="line">    view.delegate = self;</span><br><span class="line">    view.backgroundButton.backgroundColor = [UIColor colorWithWhite:0 alpha:0.3];</span><br><span class="line">    [view showInView];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark =============== WDComBoxControlDataSource ===============</span><br><span class="line">- (NSArray&lt;NSString *&gt; *)titleOfSection &#123;</span><br><span class="line">    return @[@&quot;安徽省&quot;, @&quot;浙江省&quot;, @&quot;江苏省&quot;, @&quot;安徽省&quot;, @&quot;浙江省&quot;, @&quot;江苏省&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSArray&lt;NSArray&lt;NSString *&gt; *&gt; *)dataSourceOfColunm &#123;</span><br><span class="line">    return @[@[@&quot;合肥&quot;, @&quot;芜湖&quot;, @&quot;安庆&quot;],</span><br><span class="line">             @[@&quot;南京&quot;, @&quot;苏州&quot;, @&quot;无锡&quot;],</span><br><span class="line">             @[@&quot;杭州&quot;, @&quot;宁波&quot;, @&quot;温州&quot;],</span><br><span class="line">             @[@&quot;合肥&quot;, @&quot;芜湖&quot;, @&quot;安庆&quot;],</span><br><span class="line">             @[@&quot;南京&quot;, @&quot;苏州&quot;, @&quot;无锡&quot;],</span><br><span class="line">             @[@&quot;杭州&quot;, @&quot;宁波&quot;, @&quot;温州&quot;]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark =============== WDComBoxControlDelegate ===============</span><br><span class="line">- (void)selectedAtIndexPath:(NSIndexPath *)indexPath resultTitle:(NSString *)title fromSourceView:(UIView *)sourceView &#123;</span><br><span class="line">    UIButton *sender = (UIButton *)sourceView;</span><br><span class="line">    [sender setTitle:title forState:UIControlStateNormal];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4、效果图</p><p><img src="https://upload-images.jianshu.io/upload_images/3334769-a1266d179a4f81d9.gif?imageMogr2/auto-orient/strip" alt="效果图"></p><p>5、Demo地址（代码都在这里了，就不弄个Demo了，这个可以自定义的地方还有很多，TableView和背景的Button都可以，随心所欲吧！）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/3334769-72958ace35bcee4e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;
      
    
    </summary>
    
    
  </entry>
  
</feed>
